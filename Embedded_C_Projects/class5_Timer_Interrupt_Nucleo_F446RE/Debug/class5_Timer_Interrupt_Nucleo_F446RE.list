
class5_Timer_Interrupt_Nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cd4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000e98  08000e98  00001e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ec4  08000ec4  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ec4  08000ec4  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ec4  08000ec4  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ec4  08000ec4  00001ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ec8  08000ec8  00001ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000ecc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000f28  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000f28  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001125  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000044b  00000000  00000000  000031ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  000035f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000d6  00000000  00000000  00003730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d69a  00000000  00000000  00003806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001340  00000000  00000000  00010ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00047874  00000000  00000000  000121e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00059a54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a54  00000000  00000000  00059a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0005a4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e80 	.word	0x08000e80

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08000e80 	.word	0x08000e80

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4906      	ldr	r1, [pc, #24]	@ (8000238 <__NVIC_EnableIRQ+0x34>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	e000e100 	.word	0xe000e100

0800023c <Timer2_init>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


void Timer2_init(void) {
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1U << 0);
 8000240:	4b12      	ldr	r3, [pc, #72]	@ (800028c <Timer2_init+0x50>)
 8000242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000244:	4a11      	ldr	r2, [pc, #68]	@ (800028c <Timer2_init+0x50>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM2->PSC = 16000 - 1;
 800024c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000250:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000254:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 2000 - 1;
 8000256:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800025a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800025e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CNT = 0;
 8000260:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000264:	2200      	movs	r2, #0
 8000266:	625a      	str	r2, [r3, #36]	@ 0x24

	TIM2->DIER |= TIM_DIER_UIE;
 8000268:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800026c:	68db      	ldr	r3, [r3, #12]
 800026e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM2_IRQn);
 8000278:	201c      	movs	r0, #28
 800027a:	f7ff ffc3 	bl	8000204 <__NVIC_EnableIRQ>

	TIM2->CR1 = (1U<<0);
 800027e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000282:	2201      	movs	r2, #1
 8000284:	601a      	str	r2, [r3, #0]
}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40023800 	.word	0x40023800

08000290 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(1U<<0);
 8000294:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000298:	691b      	ldr	r3, [r3, #16]
 800029a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800029e:	f023 0301 	bic.w	r3, r3, #1
 80002a2:	6113      	str	r3, [r2, #16]
	puts("I'm in TIM2_ISR");
 80002a4:	4805      	ldr	r0, [pc, #20]	@ (80002bc <TIM2_IRQHandler+0x2c>)
 80002a6:	f000 fa5b 	bl	8000760 <puts>
	GPIOA->ODR ^=(1 << 5);
 80002aa:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <TIM2_IRQHandler+0x30>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a04      	ldr	r2, [pc, #16]	@ (80002c0 <TIM2_IRQHandler+0x30>)
 80002b0:	f083 0320 	eor.w	r3, r3, #32
 80002b4:	6153      	str	r3, [r2, #20]
//	for(uint32_t i = 0; i < 50000U; i++);
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	08000e98 	.word	0x08000e98
 80002c0:	40020000 	.word	0x40020000

080002c4 <GPIO_Init>:


void GPIO_Init(void) {
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; /**/
 80002c8:	4b10      	ldr	r3, [pc, #64]	@ (800030c <GPIO_Init+0x48>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002cc:	4a0f      	ldr	r2, [pc, #60]	@ (800030c <GPIO_Init+0x48>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (1 << 10);
 80002d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000310 <GPIO_Init+0x4c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000310 <GPIO_Init+0x4c>)
 80002da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002de:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1 << 5);
 80002e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000310 <GPIO_Init+0x4c>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000310 <GPIO_Init+0x4c>)
 80002e6:	f023 0320 	bic.w	r3, r3, #32
 80002ea:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= (1 << 10);
 80002ec:	4b08      	ldr	r3, [pc, #32]	@ (8000310 <GPIO_Init+0x4c>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	4a07      	ldr	r2, [pc, #28]	@ (8000310 <GPIO_Init+0x4c>)
 80002f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002f6:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(3 << 10);
 80002f8:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <GPIO_Init+0x4c>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <GPIO_Init+0x4c>)
 80002fe:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000302:	60d3      	str	r3, [r2, #12]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	40023800 	.word	0x40023800
 8000310:	40020000 	.word	0x40020000

08000314 <main>:

int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
	GPIO_Init();
 800031a:	f7ff ffd3 	bl	80002c4 <GPIO_Init>
	Timer2_init();
 800031e:	f7ff ff8d 	bl	800023c <Timer2_init>
	puts("I'm in main");
 8000322:	4808      	ldr	r0, [pc, #32]	@ (8000344 <main+0x30>)
 8000324:	f000 fa1c 	bl	8000760 <puts>
    /* Loop forever */
	for(;;) {
		puts("I'm in while");
 8000328:	4807      	ldr	r0, [pc, #28]	@ (8000348 <main+0x34>)
 800032a:	f000 fa19 	bl	8000760 <puts>
		for(uint32_t i = 0; i < 5000000U; i++);
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	e002      	b.n	800033a <main+0x26>
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3301      	adds	r3, #1
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a03      	ldr	r2, [pc, #12]	@ (800034c <main+0x38>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d9f8      	bls.n	8000334 <main+0x20>
		puts("I'm in while");
 8000342:	e7f1      	b.n	8000328 <main+0x14>
 8000344:	08000ea8 	.word	0x08000ea8
 8000348:	08000eb4 	.word	0x08000eb4
 800034c:	004c4b3f 	.word	0x004c4b3f

08000350 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800035a:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <ITM_SendChar+0x44>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a0d      	ldr	r2, [pc, #52]	@ (8000394 <ITM_SendChar+0x44>)
 8000360:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000364:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000366:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <ITM_SendChar+0x48>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a0b      	ldr	r2, [pc, #44]	@ (8000398 <ITM_SendChar+0x48>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000372:	bf00      	nop
 8000374:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	2b00      	cmp	r3, #0
 8000380:	d0f8      	beq.n	8000374 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000382:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	6013      	str	r3, [r2, #0]
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	e000edfc 	.word	0xe000edfc
 8000398:	e0000e00 	.word	0xe0000e00

0800039c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]
 80003ac:	e00a      	b.n	80003c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003ae:	f3af 8000 	nop.w
 80003b2:	4601      	mov	r1, r0
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	60ba      	str	r2, [r7, #8]
 80003ba:	b2ca      	uxtb	r2, r1
 80003bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	3301      	adds	r3, #1
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	697a      	ldr	r2, [r7, #20]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	dbf0      	blt.n	80003ae <_read+0x12>
	}

return len;
 80003cc:	687b      	ldr	r3, [r7, #4]
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3718      	adds	r7, #24
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b086      	sub	sp, #24
 80003da:	af00      	add	r7, sp, #0
 80003dc:	60f8      	str	r0, [r7, #12]
 80003de:	60b9      	str	r1, [r7, #8]
 80003e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
 80003e6:	e009      	b.n	80003fc <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	1c5a      	adds	r2, r3, #1
 80003ec:	60ba      	str	r2, [r7, #8]
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff ffad 	bl	8000350 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	3301      	adds	r3, #1
 80003fa:	617b      	str	r3, [r7, #20]
 80003fc:	697a      	ldr	r2, [r7, #20]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	429a      	cmp	r2, r3
 8000402:	dbf1      	blt.n	80003e8 <_write+0x12>
	}
	return len;
 8000404:	687b      	ldr	r3, [r7, #4]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3718      	adds	r7, #24
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <_close>:

int _close(int file)
{
 800040e:	b480      	push	{r7}
 8000410:	b083      	sub	sp, #12
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
	return -1;
 8000416:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800041a:	4618      	mov	r0, r3
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr

08000424 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000434:	605a      	str	r2, [r3, #4]
	return 0;
 8000436:	2300      	movs	r3, #0
}
 8000438:	4618      	mov	r0, r3
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr

08000442 <_isatty>:

int _isatty(int file)
{
 8000442:	b480      	push	{r7}
 8000444:	b083      	sub	sp, #12
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
	return 1;
 800044a:	2301      	movs	r3, #1
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000456:	b480      	push	{r7}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	60f8      	str	r0, [r7, #12]
 800045e:	60b9      	str	r1, [r7, #8]
 8000460:	607a      	str	r2, [r7, #4]
	return 0;
 8000462:	2300      	movs	r3, #0
}
 8000464:	4618      	mov	r0, r3
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
	...

08000470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000478:	4a14      	ldr	r2, [pc, #80]	@ (80004cc <_sbrk+0x5c>)
 800047a:	4b15      	ldr	r3, [pc, #84]	@ (80004d0 <_sbrk+0x60>)
 800047c:	1ad3      	subs	r3, r2, r3
 800047e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000484:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <_sbrk+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d102      	bne.n	8000492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800048c:	4b11      	ldr	r3, [pc, #68]	@ (80004d4 <_sbrk+0x64>)
 800048e:	4a12      	ldr	r2, [pc, #72]	@ (80004d8 <_sbrk+0x68>)
 8000490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000492:	4b10      	ldr	r3, [pc, #64]	@ (80004d4 <_sbrk+0x64>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4413      	add	r3, r2
 800049a:	693a      	ldr	r2, [r7, #16]
 800049c:	429a      	cmp	r2, r3
 800049e:	d207      	bcs.n	80004b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004a0:	f000 fa8c 	bl	80009bc <__errno>
 80004a4:	4603      	mov	r3, r0
 80004a6:	220c      	movs	r2, #12
 80004a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004ae:	e009      	b.n	80004c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004b0:	4b08      	ldr	r3, [pc, #32]	@ (80004d4 <_sbrk+0x64>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004b6:	4b07      	ldr	r3, [pc, #28]	@ (80004d4 <_sbrk+0x64>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	4a05      	ldr	r2, [pc, #20]	@ (80004d4 <_sbrk+0x64>)
 80004c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004c2:	68fb      	ldr	r3, [r7, #12]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3718      	adds	r7, #24
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20020000 	.word	0x20020000
 80004d0:	00000400 	.word	0x00000400
 80004d4:	20000078 	.word	0x20000078
 80004d8:	200001c8 	.word	0x200001c8

080004dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004dc:	480d      	ldr	r0, [pc, #52]	@ (8000514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e4:	480c      	ldr	r0, [pc, #48]	@ (8000518 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e6:	490d      	ldr	r1, [pc, #52]	@ (800051c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000520 <LoopForever+0xe>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000528 <LoopForever+0x16>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050a:	f000 fa5d 	bl	80009c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050e:	f7ff ff01 	bl	8000314 <main>

08000512 <LoopForever>:

LoopForever:
  b LoopForever
 8000512:	e7fe      	b.n	8000512 <LoopForever>
  ldr   r0, =_estack
 8000514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000520:	08000ecc 	.word	0x08000ecc
  ldr r2, =_sbss
 8000524:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000528:	200001c8 	.word	0x200001c8

0800052c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC_IRQHandler>
	...

08000530 <std>:
 8000530:	2300      	movs	r3, #0
 8000532:	b510      	push	{r4, lr}
 8000534:	4604      	mov	r4, r0
 8000536:	e9c0 3300 	strd	r3, r3, [r0]
 800053a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800053e:	6083      	str	r3, [r0, #8]
 8000540:	8181      	strh	r1, [r0, #12]
 8000542:	6643      	str	r3, [r0, #100]	@ 0x64
 8000544:	81c2      	strh	r2, [r0, #14]
 8000546:	6183      	str	r3, [r0, #24]
 8000548:	4619      	mov	r1, r3
 800054a:	2208      	movs	r2, #8
 800054c:	305c      	adds	r0, #92	@ 0x5c
 800054e:	f000 f9e7 	bl	8000920 <memset>
 8000552:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <std+0x58>)
 8000554:	6263      	str	r3, [r4, #36]	@ 0x24
 8000556:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <std+0x5c>)
 8000558:	62a3      	str	r3, [r4, #40]	@ 0x28
 800055a:	4b0d      	ldr	r3, [pc, #52]	@ (8000590 <std+0x60>)
 800055c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800055e:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <std+0x64>)
 8000560:	6323      	str	r3, [r4, #48]	@ 0x30
 8000562:	4b0d      	ldr	r3, [pc, #52]	@ (8000598 <std+0x68>)
 8000564:	6224      	str	r4, [r4, #32]
 8000566:	429c      	cmp	r4, r3
 8000568:	d006      	beq.n	8000578 <std+0x48>
 800056a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800056e:	4294      	cmp	r4, r2
 8000570:	d002      	beq.n	8000578 <std+0x48>
 8000572:	33d0      	adds	r3, #208	@ 0xd0
 8000574:	429c      	cmp	r4, r3
 8000576:	d105      	bne.n	8000584 <std+0x54>
 8000578:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800057c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000580:	f000 ba46 	b.w	8000a10 <__retarget_lock_init_recursive>
 8000584:	bd10      	pop	{r4, pc}
 8000586:	bf00      	nop
 8000588:	08000771 	.word	0x08000771
 800058c:	08000793 	.word	0x08000793
 8000590:	080007cb 	.word	0x080007cb
 8000594:	080007ef 	.word	0x080007ef
 8000598:	2000007c 	.word	0x2000007c

0800059c <stdio_exit_handler>:
 800059c:	4a02      	ldr	r2, [pc, #8]	@ (80005a8 <stdio_exit_handler+0xc>)
 800059e:	4903      	ldr	r1, [pc, #12]	@ (80005ac <stdio_exit_handler+0x10>)
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <stdio_exit_handler+0x14>)
 80005a2:	f000 b869 	b.w	8000678 <_fwalk_sglue>
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000
 80005ac:	08000d09 	.word	0x08000d09
 80005b0:	20000010 	.word	0x20000010

080005b4 <cleanup_stdio>:
 80005b4:	6841      	ldr	r1, [r0, #4]
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <cleanup_stdio+0x34>)
 80005b8:	4299      	cmp	r1, r3
 80005ba:	b510      	push	{r4, lr}
 80005bc:	4604      	mov	r4, r0
 80005be:	d001      	beq.n	80005c4 <cleanup_stdio+0x10>
 80005c0:	f000 fba2 	bl	8000d08 <_fflush_r>
 80005c4:	68a1      	ldr	r1, [r4, #8]
 80005c6:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <cleanup_stdio+0x38>)
 80005c8:	4299      	cmp	r1, r3
 80005ca:	d002      	beq.n	80005d2 <cleanup_stdio+0x1e>
 80005cc:	4620      	mov	r0, r4
 80005ce:	f000 fb9b 	bl	8000d08 <_fflush_r>
 80005d2:	68e1      	ldr	r1, [r4, #12]
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <cleanup_stdio+0x3c>)
 80005d6:	4299      	cmp	r1, r3
 80005d8:	d004      	beq.n	80005e4 <cleanup_stdio+0x30>
 80005da:	4620      	mov	r0, r4
 80005dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005e0:	f000 bb92 	b.w	8000d08 <_fflush_r>
 80005e4:	bd10      	pop	{r4, pc}
 80005e6:	bf00      	nop
 80005e8:	2000007c 	.word	0x2000007c
 80005ec:	200000e4 	.word	0x200000e4
 80005f0:	2000014c 	.word	0x2000014c

080005f4 <global_stdio_init.part.0>:
 80005f4:	b510      	push	{r4, lr}
 80005f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <global_stdio_init.part.0+0x30>)
 80005f8:	4c0b      	ldr	r4, [pc, #44]	@ (8000628 <global_stdio_init.part.0+0x34>)
 80005fa:	4a0c      	ldr	r2, [pc, #48]	@ (800062c <global_stdio_init.part.0+0x38>)
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	4620      	mov	r0, r4
 8000600:	2200      	movs	r2, #0
 8000602:	2104      	movs	r1, #4
 8000604:	f7ff ff94 	bl	8000530 <std>
 8000608:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800060c:	2201      	movs	r2, #1
 800060e:	2109      	movs	r1, #9
 8000610:	f7ff ff8e 	bl	8000530 <std>
 8000614:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000618:	2202      	movs	r2, #2
 800061a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800061e:	2112      	movs	r1, #18
 8000620:	f7ff bf86 	b.w	8000530 <std>
 8000624:	200001b4 	.word	0x200001b4
 8000628:	2000007c 	.word	0x2000007c
 800062c:	0800059d 	.word	0x0800059d

08000630 <__sfp_lock_acquire>:
 8000630:	4801      	ldr	r0, [pc, #4]	@ (8000638 <__sfp_lock_acquire+0x8>)
 8000632:	f000 b9ee 	b.w	8000a12 <__retarget_lock_acquire_recursive>
 8000636:	bf00      	nop
 8000638:	200001bd 	.word	0x200001bd

0800063c <__sfp_lock_release>:
 800063c:	4801      	ldr	r0, [pc, #4]	@ (8000644 <__sfp_lock_release+0x8>)
 800063e:	f000 b9e9 	b.w	8000a14 <__retarget_lock_release_recursive>
 8000642:	bf00      	nop
 8000644:	200001bd 	.word	0x200001bd

08000648 <__sinit>:
 8000648:	b510      	push	{r4, lr}
 800064a:	4604      	mov	r4, r0
 800064c:	f7ff fff0 	bl	8000630 <__sfp_lock_acquire>
 8000650:	6a23      	ldr	r3, [r4, #32]
 8000652:	b11b      	cbz	r3, 800065c <__sinit+0x14>
 8000654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000658:	f7ff bff0 	b.w	800063c <__sfp_lock_release>
 800065c:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <__sinit+0x28>)
 800065e:	6223      	str	r3, [r4, #32]
 8000660:	4b04      	ldr	r3, [pc, #16]	@ (8000674 <__sinit+0x2c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f5      	bne.n	8000654 <__sinit+0xc>
 8000668:	f7ff ffc4 	bl	80005f4 <global_stdio_init.part.0>
 800066c:	e7f2      	b.n	8000654 <__sinit+0xc>
 800066e:	bf00      	nop
 8000670:	080005b5 	.word	0x080005b5
 8000674:	200001b4 	.word	0x200001b4

08000678 <_fwalk_sglue>:
 8000678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800067c:	4607      	mov	r7, r0
 800067e:	4688      	mov	r8, r1
 8000680:	4614      	mov	r4, r2
 8000682:	2600      	movs	r6, #0
 8000684:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000688:	f1b9 0901 	subs.w	r9, r9, #1
 800068c:	d505      	bpl.n	800069a <_fwalk_sglue+0x22>
 800068e:	6824      	ldr	r4, [r4, #0]
 8000690:	2c00      	cmp	r4, #0
 8000692:	d1f7      	bne.n	8000684 <_fwalk_sglue+0xc>
 8000694:	4630      	mov	r0, r6
 8000696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800069a:	89ab      	ldrh	r3, [r5, #12]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d907      	bls.n	80006b0 <_fwalk_sglue+0x38>
 80006a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006a4:	3301      	adds	r3, #1
 80006a6:	d003      	beq.n	80006b0 <_fwalk_sglue+0x38>
 80006a8:	4629      	mov	r1, r5
 80006aa:	4638      	mov	r0, r7
 80006ac:	47c0      	blx	r8
 80006ae:	4306      	orrs	r6, r0
 80006b0:	3568      	adds	r5, #104	@ 0x68
 80006b2:	e7e9      	b.n	8000688 <_fwalk_sglue+0x10>

080006b4 <_puts_r>:
 80006b4:	6a03      	ldr	r3, [r0, #32]
 80006b6:	b570      	push	{r4, r5, r6, lr}
 80006b8:	6884      	ldr	r4, [r0, #8]
 80006ba:	4605      	mov	r5, r0
 80006bc:	460e      	mov	r6, r1
 80006be:	b90b      	cbnz	r3, 80006c4 <_puts_r+0x10>
 80006c0:	f7ff ffc2 	bl	8000648 <__sinit>
 80006c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006c6:	07db      	lsls	r3, r3, #31
 80006c8:	d405      	bmi.n	80006d6 <_puts_r+0x22>
 80006ca:	89a3      	ldrh	r3, [r4, #12]
 80006cc:	0598      	lsls	r0, r3, #22
 80006ce:	d402      	bmi.n	80006d6 <_puts_r+0x22>
 80006d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80006d2:	f000 f99e 	bl	8000a12 <__retarget_lock_acquire_recursive>
 80006d6:	89a3      	ldrh	r3, [r4, #12]
 80006d8:	0719      	lsls	r1, r3, #28
 80006da:	d502      	bpl.n	80006e2 <_puts_r+0x2e>
 80006dc:	6923      	ldr	r3, [r4, #16]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d135      	bne.n	800074e <_puts_r+0x9a>
 80006e2:	4621      	mov	r1, r4
 80006e4:	4628      	mov	r0, r5
 80006e6:	f000 f8c5 	bl	8000874 <__swsetup_r>
 80006ea:	b380      	cbz	r0, 800074e <_puts_r+0x9a>
 80006ec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80006f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006f2:	07da      	lsls	r2, r3, #31
 80006f4:	d405      	bmi.n	8000702 <_puts_r+0x4e>
 80006f6:	89a3      	ldrh	r3, [r4, #12]
 80006f8:	059b      	lsls	r3, r3, #22
 80006fa:	d402      	bmi.n	8000702 <_puts_r+0x4e>
 80006fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80006fe:	f000 f989 	bl	8000a14 <__retarget_lock_release_recursive>
 8000702:	4628      	mov	r0, r5
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	2b00      	cmp	r3, #0
 8000708:	da04      	bge.n	8000714 <_puts_r+0x60>
 800070a:	69a2      	ldr	r2, [r4, #24]
 800070c:	429a      	cmp	r2, r3
 800070e:	dc17      	bgt.n	8000740 <_puts_r+0x8c>
 8000710:	290a      	cmp	r1, #10
 8000712:	d015      	beq.n	8000740 <_puts_r+0x8c>
 8000714:	6823      	ldr	r3, [r4, #0]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	6022      	str	r2, [r4, #0]
 800071a:	7019      	strb	r1, [r3, #0]
 800071c:	68a3      	ldr	r3, [r4, #8]
 800071e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000722:	3b01      	subs	r3, #1
 8000724:	60a3      	str	r3, [r4, #8]
 8000726:	2900      	cmp	r1, #0
 8000728:	d1ed      	bne.n	8000706 <_puts_r+0x52>
 800072a:	2b00      	cmp	r3, #0
 800072c:	da11      	bge.n	8000752 <_puts_r+0x9e>
 800072e:	4622      	mov	r2, r4
 8000730:	210a      	movs	r1, #10
 8000732:	4628      	mov	r0, r5
 8000734:	f000 f85f 	bl	80007f6 <__swbuf_r>
 8000738:	3001      	adds	r0, #1
 800073a:	d0d7      	beq.n	80006ec <_puts_r+0x38>
 800073c:	250a      	movs	r5, #10
 800073e:	e7d7      	b.n	80006f0 <_puts_r+0x3c>
 8000740:	4622      	mov	r2, r4
 8000742:	4628      	mov	r0, r5
 8000744:	f000 f857 	bl	80007f6 <__swbuf_r>
 8000748:	3001      	adds	r0, #1
 800074a:	d1e7      	bne.n	800071c <_puts_r+0x68>
 800074c:	e7ce      	b.n	80006ec <_puts_r+0x38>
 800074e:	3e01      	subs	r6, #1
 8000750:	e7e4      	b.n	800071c <_puts_r+0x68>
 8000752:	6823      	ldr	r3, [r4, #0]
 8000754:	1c5a      	adds	r2, r3, #1
 8000756:	6022      	str	r2, [r4, #0]
 8000758:	220a      	movs	r2, #10
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	e7ee      	b.n	800073c <_puts_r+0x88>
	...

08000760 <puts>:
 8000760:	4b02      	ldr	r3, [pc, #8]	@ (800076c <puts+0xc>)
 8000762:	4601      	mov	r1, r0
 8000764:	6818      	ldr	r0, [r3, #0]
 8000766:	f7ff bfa5 	b.w	80006b4 <_puts_r>
 800076a:	bf00      	nop
 800076c:	2000000c 	.word	0x2000000c

08000770 <__sread>:
 8000770:	b510      	push	{r4, lr}
 8000772:	460c      	mov	r4, r1
 8000774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000778:	f000 f8fc 	bl	8000974 <_read_r>
 800077c:	2800      	cmp	r0, #0
 800077e:	bfab      	itete	ge
 8000780:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000782:	89a3      	ldrhlt	r3, [r4, #12]
 8000784:	181b      	addge	r3, r3, r0
 8000786:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800078a:	bfac      	ite	ge
 800078c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800078e:	81a3      	strhlt	r3, [r4, #12]
 8000790:	bd10      	pop	{r4, pc}

08000792 <__swrite>:
 8000792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000796:	461f      	mov	r7, r3
 8000798:	898b      	ldrh	r3, [r1, #12]
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	4605      	mov	r5, r0
 800079e:	460c      	mov	r4, r1
 80007a0:	4616      	mov	r6, r2
 80007a2:	d505      	bpl.n	80007b0 <__swrite+0x1e>
 80007a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007a8:	2302      	movs	r3, #2
 80007aa:	2200      	movs	r2, #0
 80007ac:	f000 f8d0 	bl	8000950 <_lseek_r>
 80007b0:	89a3      	ldrh	r3, [r4, #12]
 80007b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007ba:	81a3      	strh	r3, [r4, #12]
 80007bc:	4632      	mov	r2, r6
 80007be:	463b      	mov	r3, r7
 80007c0:	4628      	mov	r0, r5
 80007c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80007c6:	f000 b8e7 	b.w	8000998 <_write_r>

080007ca <__sseek>:
 80007ca:	b510      	push	{r4, lr}
 80007cc:	460c      	mov	r4, r1
 80007ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007d2:	f000 f8bd 	bl	8000950 <_lseek_r>
 80007d6:	1c43      	adds	r3, r0, #1
 80007d8:	89a3      	ldrh	r3, [r4, #12]
 80007da:	bf15      	itete	ne
 80007dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80007de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80007e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80007e6:	81a3      	strheq	r3, [r4, #12]
 80007e8:	bf18      	it	ne
 80007ea:	81a3      	strhne	r3, [r4, #12]
 80007ec:	bd10      	pop	{r4, pc}

080007ee <__sclose>:
 80007ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007f2:	f000 b89d 	b.w	8000930 <_close_r>

080007f6 <__swbuf_r>:
 80007f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f8:	460e      	mov	r6, r1
 80007fa:	4614      	mov	r4, r2
 80007fc:	4605      	mov	r5, r0
 80007fe:	b118      	cbz	r0, 8000808 <__swbuf_r+0x12>
 8000800:	6a03      	ldr	r3, [r0, #32]
 8000802:	b90b      	cbnz	r3, 8000808 <__swbuf_r+0x12>
 8000804:	f7ff ff20 	bl	8000648 <__sinit>
 8000808:	69a3      	ldr	r3, [r4, #24]
 800080a:	60a3      	str	r3, [r4, #8]
 800080c:	89a3      	ldrh	r3, [r4, #12]
 800080e:	071a      	lsls	r2, r3, #28
 8000810:	d501      	bpl.n	8000816 <__swbuf_r+0x20>
 8000812:	6923      	ldr	r3, [r4, #16]
 8000814:	b943      	cbnz	r3, 8000828 <__swbuf_r+0x32>
 8000816:	4621      	mov	r1, r4
 8000818:	4628      	mov	r0, r5
 800081a:	f000 f82b 	bl	8000874 <__swsetup_r>
 800081e:	b118      	cbz	r0, 8000828 <__swbuf_r+0x32>
 8000820:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000824:	4638      	mov	r0, r7
 8000826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000828:	6823      	ldr	r3, [r4, #0]
 800082a:	6922      	ldr	r2, [r4, #16]
 800082c:	1a98      	subs	r0, r3, r2
 800082e:	6963      	ldr	r3, [r4, #20]
 8000830:	b2f6      	uxtb	r6, r6
 8000832:	4283      	cmp	r3, r0
 8000834:	4637      	mov	r7, r6
 8000836:	dc05      	bgt.n	8000844 <__swbuf_r+0x4e>
 8000838:	4621      	mov	r1, r4
 800083a:	4628      	mov	r0, r5
 800083c:	f000 fa64 	bl	8000d08 <_fflush_r>
 8000840:	2800      	cmp	r0, #0
 8000842:	d1ed      	bne.n	8000820 <__swbuf_r+0x2a>
 8000844:	68a3      	ldr	r3, [r4, #8]
 8000846:	3b01      	subs	r3, #1
 8000848:	60a3      	str	r3, [r4, #8]
 800084a:	6823      	ldr	r3, [r4, #0]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	6022      	str	r2, [r4, #0]
 8000850:	701e      	strb	r6, [r3, #0]
 8000852:	6962      	ldr	r2, [r4, #20]
 8000854:	1c43      	adds	r3, r0, #1
 8000856:	429a      	cmp	r2, r3
 8000858:	d004      	beq.n	8000864 <__swbuf_r+0x6e>
 800085a:	89a3      	ldrh	r3, [r4, #12]
 800085c:	07db      	lsls	r3, r3, #31
 800085e:	d5e1      	bpl.n	8000824 <__swbuf_r+0x2e>
 8000860:	2e0a      	cmp	r6, #10
 8000862:	d1df      	bne.n	8000824 <__swbuf_r+0x2e>
 8000864:	4621      	mov	r1, r4
 8000866:	4628      	mov	r0, r5
 8000868:	f000 fa4e 	bl	8000d08 <_fflush_r>
 800086c:	2800      	cmp	r0, #0
 800086e:	d0d9      	beq.n	8000824 <__swbuf_r+0x2e>
 8000870:	e7d6      	b.n	8000820 <__swbuf_r+0x2a>
	...

08000874 <__swsetup_r>:
 8000874:	b538      	push	{r3, r4, r5, lr}
 8000876:	4b29      	ldr	r3, [pc, #164]	@ (800091c <__swsetup_r+0xa8>)
 8000878:	4605      	mov	r5, r0
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	460c      	mov	r4, r1
 800087e:	b118      	cbz	r0, 8000888 <__swsetup_r+0x14>
 8000880:	6a03      	ldr	r3, [r0, #32]
 8000882:	b90b      	cbnz	r3, 8000888 <__swsetup_r+0x14>
 8000884:	f7ff fee0 	bl	8000648 <__sinit>
 8000888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800088c:	0719      	lsls	r1, r3, #28
 800088e:	d422      	bmi.n	80008d6 <__swsetup_r+0x62>
 8000890:	06da      	lsls	r2, r3, #27
 8000892:	d407      	bmi.n	80008a4 <__swsetup_r+0x30>
 8000894:	2209      	movs	r2, #9
 8000896:	602a      	str	r2, [r5, #0]
 8000898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800089c:	81a3      	strh	r3, [r4, #12]
 800089e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008a2:	e033      	b.n	800090c <__swsetup_r+0x98>
 80008a4:	0758      	lsls	r0, r3, #29
 80008a6:	d512      	bpl.n	80008ce <__swsetup_r+0x5a>
 80008a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80008aa:	b141      	cbz	r1, 80008be <__swsetup_r+0x4a>
 80008ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80008b0:	4299      	cmp	r1, r3
 80008b2:	d002      	beq.n	80008ba <__swsetup_r+0x46>
 80008b4:	4628      	mov	r0, r5
 80008b6:	f000 f8af 	bl	8000a18 <_free_r>
 80008ba:	2300      	movs	r3, #0
 80008bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80008be:	89a3      	ldrh	r3, [r4, #12]
 80008c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80008c4:	81a3      	strh	r3, [r4, #12]
 80008c6:	2300      	movs	r3, #0
 80008c8:	6063      	str	r3, [r4, #4]
 80008ca:	6923      	ldr	r3, [r4, #16]
 80008cc:	6023      	str	r3, [r4, #0]
 80008ce:	89a3      	ldrh	r3, [r4, #12]
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	81a3      	strh	r3, [r4, #12]
 80008d6:	6923      	ldr	r3, [r4, #16]
 80008d8:	b94b      	cbnz	r3, 80008ee <__swsetup_r+0x7a>
 80008da:	89a3      	ldrh	r3, [r4, #12]
 80008dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80008e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008e4:	d003      	beq.n	80008ee <__swsetup_r+0x7a>
 80008e6:	4621      	mov	r1, r4
 80008e8:	4628      	mov	r0, r5
 80008ea:	f000 fa5b 	bl	8000da4 <__smakebuf_r>
 80008ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008f2:	f013 0201 	ands.w	r2, r3, #1
 80008f6:	d00a      	beq.n	800090e <__swsetup_r+0x9a>
 80008f8:	2200      	movs	r2, #0
 80008fa:	60a2      	str	r2, [r4, #8]
 80008fc:	6962      	ldr	r2, [r4, #20]
 80008fe:	4252      	negs	r2, r2
 8000900:	61a2      	str	r2, [r4, #24]
 8000902:	6922      	ldr	r2, [r4, #16]
 8000904:	b942      	cbnz	r2, 8000918 <__swsetup_r+0xa4>
 8000906:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800090a:	d1c5      	bne.n	8000898 <__swsetup_r+0x24>
 800090c:	bd38      	pop	{r3, r4, r5, pc}
 800090e:	0799      	lsls	r1, r3, #30
 8000910:	bf58      	it	pl
 8000912:	6962      	ldrpl	r2, [r4, #20]
 8000914:	60a2      	str	r2, [r4, #8]
 8000916:	e7f4      	b.n	8000902 <__swsetup_r+0x8e>
 8000918:	2000      	movs	r0, #0
 800091a:	e7f7      	b.n	800090c <__swsetup_r+0x98>
 800091c:	2000000c 	.word	0x2000000c

08000920 <memset>:
 8000920:	4402      	add	r2, r0
 8000922:	4603      	mov	r3, r0
 8000924:	4293      	cmp	r3, r2
 8000926:	d100      	bne.n	800092a <memset+0xa>
 8000928:	4770      	bx	lr
 800092a:	f803 1b01 	strb.w	r1, [r3], #1
 800092e:	e7f9      	b.n	8000924 <memset+0x4>

08000930 <_close_r>:
 8000930:	b538      	push	{r3, r4, r5, lr}
 8000932:	4d06      	ldr	r5, [pc, #24]	@ (800094c <_close_r+0x1c>)
 8000934:	2300      	movs	r3, #0
 8000936:	4604      	mov	r4, r0
 8000938:	4608      	mov	r0, r1
 800093a:	602b      	str	r3, [r5, #0]
 800093c:	f7ff fd67 	bl	800040e <_close>
 8000940:	1c43      	adds	r3, r0, #1
 8000942:	d102      	bne.n	800094a <_close_r+0x1a>
 8000944:	682b      	ldr	r3, [r5, #0]
 8000946:	b103      	cbz	r3, 800094a <_close_r+0x1a>
 8000948:	6023      	str	r3, [r4, #0]
 800094a:	bd38      	pop	{r3, r4, r5, pc}
 800094c:	200001b8 	.word	0x200001b8

08000950 <_lseek_r>:
 8000950:	b538      	push	{r3, r4, r5, lr}
 8000952:	4d07      	ldr	r5, [pc, #28]	@ (8000970 <_lseek_r+0x20>)
 8000954:	4604      	mov	r4, r0
 8000956:	4608      	mov	r0, r1
 8000958:	4611      	mov	r1, r2
 800095a:	2200      	movs	r2, #0
 800095c:	602a      	str	r2, [r5, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	f7ff fd79 	bl	8000456 <_lseek>
 8000964:	1c43      	adds	r3, r0, #1
 8000966:	d102      	bne.n	800096e <_lseek_r+0x1e>
 8000968:	682b      	ldr	r3, [r5, #0]
 800096a:	b103      	cbz	r3, 800096e <_lseek_r+0x1e>
 800096c:	6023      	str	r3, [r4, #0]
 800096e:	bd38      	pop	{r3, r4, r5, pc}
 8000970:	200001b8 	.word	0x200001b8

08000974 <_read_r>:
 8000974:	b538      	push	{r3, r4, r5, lr}
 8000976:	4d07      	ldr	r5, [pc, #28]	@ (8000994 <_read_r+0x20>)
 8000978:	4604      	mov	r4, r0
 800097a:	4608      	mov	r0, r1
 800097c:	4611      	mov	r1, r2
 800097e:	2200      	movs	r2, #0
 8000980:	602a      	str	r2, [r5, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	f7ff fd0a 	bl	800039c <_read>
 8000988:	1c43      	adds	r3, r0, #1
 800098a:	d102      	bne.n	8000992 <_read_r+0x1e>
 800098c:	682b      	ldr	r3, [r5, #0]
 800098e:	b103      	cbz	r3, 8000992 <_read_r+0x1e>
 8000990:	6023      	str	r3, [r4, #0]
 8000992:	bd38      	pop	{r3, r4, r5, pc}
 8000994:	200001b8 	.word	0x200001b8

08000998 <_write_r>:
 8000998:	b538      	push	{r3, r4, r5, lr}
 800099a:	4d07      	ldr	r5, [pc, #28]	@ (80009b8 <_write_r+0x20>)
 800099c:	4604      	mov	r4, r0
 800099e:	4608      	mov	r0, r1
 80009a0:	4611      	mov	r1, r2
 80009a2:	2200      	movs	r2, #0
 80009a4:	602a      	str	r2, [r5, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	f7ff fd15 	bl	80003d6 <_write>
 80009ac:	1c43      	adds	r3, r0, #1
 80009ae:	d102      	bne.n	80009b6 <_write_r+0x1e>
 80009b0:	682b      	ldr	r3, [r5, #0]
 80009b2:	b103      	cbz	r3, 80009b6 <_write_r+0x1e>
 80009b4:	6023      	str	r3, [r4, #0]
 80009b6:	bd38      	pop	{r3, r4, r5, pc}
 80009b8:	200001b8 	.word	0x200001b8

080009bc <__errno>:
 80009bc:	4b01      	ldr	r3, [pc, #4]	@ (80009c4 <__errno+0x8>)
 80009be:	6818      	ldr	r0, [r3, #0]
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	2000000c 	.word	0x2000000c

080009c8 <__libc_init_array>:
 80009c8:	b570      	push	{r4, r5, r6, lr}
 80009ca:	4d0d      	ldr	r5, [pc, #52]	@ (8000a00 <__libc_init_array+0x38>)
 80009cc:	4c0d      	ldr	r4, [pc, #52]	@ (8000a04 <__libc_init_array+0x3c>)
 80009ce:	1b64      	subs	r4, r4, r5
 80009d0:	10a4      	asrs	r4, r4, #2
 80009d2:	2600      	movs	r6, #0
 80009d4:	42a6      	cmp	r6, r4
 80009d6:	d109      	bne.n	80009ec <__libc_init_array+0x24>
 80009d8:	4d0b      	ldr	r5, [pc, #44]	@ (8000a08 <__libc_init_array+0x40>)
 80009da:	4c0c      	ldr	r4, [pc, #48]	@ (8000a0c <__libc_init_array+0x44>)
 80009dc:	f000 fa50 	bl	8000e80 <_init>
 80009e0:	1b64      	subs	r4, r4, r5
 80009e2:	10a4      	asrs	r4, r4, #2
 80009e4:	2600      	movs	r6, #0
 80009e6:	42a6      	cmp	r6, r4
 80009e8:	d105      	bne.n	80009f6 <__libc_init_array+0x2e>
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f0:	4798      	blx	r3
 80009f2:	3601      	adds	r6, #1
 80009f4:	e7ee      	b.n	80009d4 <__libc_init_array+0xc>
 80009f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009fa:	4798      	blx	r3
 80009fc:	3601      	adds	r6, #1
 80009fe:	e7f2      	b.n	80009e6 <__libc_init_array+0x1e>
 8000a00:	08000ec4 	.word	0x08000ec4
 8000a04:	08000ec4 	.word	0x08000ec4
 8000a08:	08000ec4 	.word	0x08000ec4
 8000a0c:	08000ec8 	.word	0x08000ec8

08000a10 <__retarget_lock_init_recursive>:
 8000a10:	4770      	bx	lr

08000a12 <__retarget_lock_acquire_recursive>:
 8000a12:	4770      	bx	lr

08000a14 <__retarget_lock_release_recursive>:
 8000a14:	4770      	bx	lr
	...

08000a18 <_free_r>:
 8000a18:	b538      	push	{r3, r4, r5, lr}
 8000a1a:	4605      	mov	r5, r0
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	d041      	beq.n	8000aa4 <_free_r+0x8c>
 8000a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a24:	1f0c      	subs	r4, r1, #4
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	bfb8      	it	lt
 8000a2a:	18e4      	addlt	r4, r4, r3
 8000a2c:	f000 f8e0 	bl	8000bf0 <__malloc_lock>
 8000a30:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa8 <_free_r+0x90>)
 8000a32:	6813      	ldr	r3, [r2, #0]
 8000a34:	b933      	cbnz	r3, 8000a44 <_free_r+0x2c>
 8000a36:	6063      	str	r3, [r4, #4]
 8000a38:	6014      	str	r4, [r2, #0]
 8000a3a:	4628      	mov	r0, r5
 8000a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a40:	f000 b8dc 	b.w	8000bfc <__malloc_unlock>
 8000a44:	42a3      	cmp	r3, r4
 8000a46:	d908      	bls.n	8000a5a <_free_r+0x42>
 8000a48:	6820      	ldr	r0, [r4, #0]
 8000a4a:	1821      	adds	r1, r4, r0
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	bf01      	itttt	eq
 8000a50:	6819      	ldreq	r1, [r3, #0]
 8000a52:	685b      	ldreq	r3, [r3, #4]
 8000a54:	1809      	addeq	r1, r1, r0
 8000a56:	6021      	streq	r1, [r4, #0]
 8000a58:	e7ed      	b.n	8000a36 <_free_r+0x1e>
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	b10b      	cbz	r3, 8000a64 <_free_r+0x4c>
 8000a60:	42a3      	cmp	r3, r4
 8000a62:	d9fa      	bls.n	8000a5a <_free_r+0x42>
 8000a64:	6811      	ldr	r1, [r2, #0]
 8000a66:	1850      	adds	r0, r2, r1
 8000a68:	42a0      	cmp	r0, r4
 8000a6a:	d10b      	bne.n	8000a84 <_free_r+0x6c>
 8000a6c:	6820      	ldr	r0, [r4, #0]
 8000a6e:	4401      	add	r1, r0
 8000a70:	1850      	adds	r0, r2, r1
 8000a72:	4283      	cmp	r3, r0
 8000a74:	6011      	str	r1, [r2, #0]
 8000a76:	d1e0      	bne.n	8000a3a <_free_r+0x22>
 8000a78:	6818      	ldr	r0, [r3, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	6053      	str	r3, [r2, #4]
 8000a7e:	4408      	add	r0, r1
 8000a80:	6010      	str	r0, [r2, #0]
 8000a82:	e7da      	b.n	8000a3a <_free_r+0x22>
 8000a84:	d902      	bls.n	8000a8c <_free_r+0x74>
 8000a86:	230c      	movs	r3, #12
 8000a88:	602b      	str	r3, [r5, #0]
 8000a8a:	e7d6      	b.n	8000a3a <_free_r+0x22>
 8000a8c:	6820      	ldr	r0, [r4, #0]
 8000a8e:	1821      	adds	r1, r4, r0
 8000a90:	428b      	cmp	r3, r1
 8000a92:	bf04      	itt	eq
 8000a94:	6819      	ldreq	r1, [r3, #0]
 8000a96:	685b      	ldreq	r3, [r3, #4]
 8000a98:	6063      	str	r3, [r4, #4]
 8000a9a:	bf04      	itt	eq
 8000a9c:	1809      	addeq	r1, r1, r0
 8000a9e:	6021      	streq	r1, [r4, #0]
 8000aa0:	6054      	str	r4, [r2, #4]
 8000aa2:	e7ca      	b.n	8000a3a <_free_r+0x22>
 8000aa4:	bd38      	pop	{r3, r4, r5, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200001c4 	.word	0x200001c4

08000aac <sbrk_aligned>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	4e0f      	ldr	r6, [pc, #60]	@ (8000aec <sbrk_aligned+0x40>)
 8000ab0:	460c      	mov	r4, r1
 8000ab2:	6831      	ldr	r1, [r6, #0]
 8000ab4:	4605      	mov	r5, r0
 8000ab6:	b911      	cbnz	r1, 8000abe <sbrk_aligned+0x12>
 8000ab8:	f000 f9d2 	bl	8000e60 <_sbrk_r>
 8000abc:	6030      	str	r0, [r6, #0]
 8000abe:	4621      	mov	r1, r4
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	f000 f9cd 	bl	8000e60 <_sbrk_r>
 8000ac6:	1c43      	adds	r3, r0, #1
 8000ac8:	d103      	bne.n	8000ad2 <sbrk_aligned+0x26>
 8000aca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000ace:	4620      	mov	r0, r4
 8000ad0:	bd70      	pop	{r4, r5, r6, pc}
 8000ad2:	1cc4      	adds	r4, r0, #3
 8000ad4:	f024 0403 	bic.w	r4, r4, #3
 8000ad8:	42a0      	cmp	r0, r4
 8000ada:	d0f8      	beq.n	8000ace <sbrk_aligned+0x22>
 8000adc:	1a21      	subs	r1, r4, r0
 8000ade:	4628      	mov	r0, r5
 8000ae0:	f000 f9be 	bl	8000e60 <_sbrk_r>
 8000ae4:	3001      	adds	r0, #1
 8000ae6:	d1f2      	bne.n	8000ace <sbrk_aligned+0x22>
 8000ae8:	e7ef      	b.n	8000aca <sbrk_aligned+0x1e>
 8000aea:	bf00      	nop
 8000aec:	200001c0 	.word	0x200001c0

08000af0 <_malloc_r>:
 8000af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000af4:	1ccd      	adds	r5, r1, #3
 8000af6:	f025 0503 	bic.w	r5, r5, #3
 8000afa:	3508      	adds	r5, #8
 8000afc:	2d0c      	cmp	r5, #12
 8000afe:	bf38      	it	cc
 8000b00:	250c      	movcc	r5, #12
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	4606      	mov	r6, r0
 8000b06:	db01      	blt.n	8000b0c <_malloc_r+0x1c>
 8000b08:	42a9      	cmp	r1, r5
 8000b0a:	d904      	bls.n	8000b16 <_malloc_r+0x26>
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	6033      	str	r3, [r6, #0]
 8000b10:	2000      	movs	r0, #0
 8000b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bec <_malloc_r+0xfc>
 8000b1a:	f000 f869 	bl	8000bf0 <__malloc_lock>
 8000b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b22:	461c      	mov	r4, r3
 8000b24:	bb44      	cbnz	r4, 8000b78 <_malloc_r+0x88>
 8000b26:	4629      	mov	r1, r5
 8000b28:	4630      	mov	r0, r6
 8000b2a:	f7ff ffbf 	bl	8000aac <sbrk_aligned>
 8000b2e:	1c43      	adds	r3, r0, #1
 8000b30:	4604      	mov	r4, r0
 8000b32:	d158      	bne.n	8000be6 <_malloc_r+0xf6>
 8000b34:	f8d8 4000 	ldr.w	r4, [r8]
 8000b38:	4627      	mov	r7, r4
 8000b3a:	2f00      	cmp	r7, #0
 8000b3c:	d143      	bne.n	8000bc6 <_malloc_r+0xd6>
 8000b3e:	2c00      	cmp	r4, #0
 8000b40:	d04b      	beq.n	8000bda <_malloc_r+0xea>
 8000b42:	6823      	ldr	r3, [r4, #0]
 8000b44:	4639      	mov	r1, r7
 8000b46:	4630      	mov	r0, r6
 8000b48:	eb04 0903 	add.w	r9, r4, r3
 8000b4c:	f000 f988 	bl	8000e60 <_sbrk_r>
 8000b50:	4581      	cmp	r9, r0
 8000b52:	d142      	bne.n	8000bda <_malloc_r+0xea>
 8000b54:	6821      	ldr	r1, [r4, #0]
 8000b56:	1a6d      	subs	r5, r5, r1
 8000b58:	4629      	mov	r1, r5
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	f7ff ffa6 	bl	8000aac <sbrk_aligned>
 8000b60:	3001      	adds	r0, #1
 8000b62:	d03a      	beq.n	8000bda <_malloc_r+0xea>
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	442b      	add	r3, r5
 8000b68:	6023      	str	r3, [r4, #0]
 8000b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	bb62      	cbnz	r2, 8000bcc <_malloc_r+0xdc>
 8000b72:	f8c8 7000 	str.w	r7, [r8]
 8000b76:	e00f      	b.n	8000b98 <_malloc_r+0xa8>
 8000b78:	6822      	ldr	r2, [r4, #0]
 8000b7a:	1b52      	subs	r2, r2, r5
 8000b7c:	d420      	bmi.n	8000bc0 <_malloc_r+0xd0>
 8000b7e:	2a0b      	cmp	r2, #11
 8000b80:	d917      	bls.n	8000bb2 <_malloc_r+0xc2>
 8000b82:	1961      	adds	r1, r4, r5
 8000b84:	42a3      	cmp	r3, r4
 8000b86:	6025      	str	r5, [r4, #0]
 8000b88:	bf18      	it	ne
 8000b8a:	6059      	strne	r1, [r3, #4]
 8000b8c:	6863      	ldr	r3, [r4, #4]
 8000b8e:	bf08      	it	eq
 8000b90:	f8c8 1000 	streq.w	r1, [r8]
 8000b94:	5162      	str	r2, [r4, r5]
 8000b96:	604b      	str	r3, [r1, #4]
 8000b98:	4630      	mov	r0, r6
 8000b9a:	f000 f82f 	bl	8000bfc <__malloc_unlock>
 8000b9e:	f104 000b 	add.w	r0, r4, #11
 8000ba2:	1d23      	adds	r3, r4, #4
 8000ba4:	f020 0007 	bic.w	r0, r0, #7
 8000ba8:	1ac2      	subs	r2, r0, r3
 8000baa:	bf1c      	itt	ne
 8000bac:	1a1b      	subne	r3, r3, r0
 8000bae:	50a3      	strne	r3, [r4, r2]
 8000bb0:	e7af      	b.n	8000b12 <_malloc_r+0x22>
 8000bb2:	6862      	ldr	r2, [r4, #4]
 8000bb4:	42a3      	cmp	r3, r4
 8000bb6:	bf0c      	ite	eq
 8000bb8:	f8c8 2000 	streq.w	r2, [r8]
 8000bbc:	605a      	strne	r2, [r3, #4]
 8000bbe:	e7eb      	b.n	8000b98 <_malloc_r+0xa8>
 8000bc0:	4623      	mov	r3, r4
 8000bc2:	6864      	ldr	r4, [r4, #4]
 8000bc4:	e7ae      	b.n	8000b24 <_malloc_r+0x34>
 8000bc6:	463c      	mov	r4, r7
 8000bc8:	687f      	ldr	r7, [r7, #4]
 8000bca:	e7b6      	b.n	8000b3a <_malloc_r+0x4a>
 8000bcc:	461a      	mov	r2, r3
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	42a3      	cmp	r3, r4
 8000bd2:	d1fb      	bne.n	8000bcc <_malloc_r+0xdc>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	6053      	str	r3, [r2, #4]
 8000bd8:	e7de      	b.n	8000b98 <_malloc_r+0xa8>
 8000bda:	230c      	movs	r3, #12
 8000bdc:	6033      	str	r3, [r6, #0]
 8000bde:	4630      	mov	r0, r6
 8000be0:	f000 f80c 	bl	8000bfc <__malloc_unlock>
 8000be4:	e794      	b.n	8000b10 <_malloc_r+0x20>
 8000be6:	6005      	str	r5, [r0, #0]
 8000be8:	e7d6      	b.n	8000b98 <_malloc_r+0xa8>
 8000bea:	bf00      	nop
 8000bec:	200001c4 	.word	0x200001c4

08000bf0 <__malloc_lock>:
 8000bf0:	4801      	ldr	r0, [pc, #4]	@ (8000bf8 <__malloc_lock+0x8>)
 8000bf2:	f7ff bf0e 	b.w	8000a12 <__retarget_lock_acquire_recursive>
 8000bf6:	bf00      	nop
 8000bf8:	200001bc 	.word	0x200001bc

08000bfc <__malloc_unlock>:
 8000bfc:	4801      	ldr	r0, [pc, #4]	@ (8000c04 <__malloc_unlock+0x8>)
 8000bfe:	f7ff bf09 	b.w	8000a14 <__retarget_lock_release_recursive>
 8000c02:	bf00      	nop
 8000c04:	200001bc 	.word	0x200001bc

08000c08 <__sflush_r>:
 8000c08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	0716      	lsls	r6, r2, #28
 8000c10:	4605      	mov	r5, r0
 8000c12:	460c      	mov	r4, r1
 8000c14:	d454      	bmi.n	8000cc0 <__sflush_r+0xb8>
 8000c16:	684b      	ldr	r3, [r1, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dc02      	bgt.n	8000c22 <__sflush_r+0x1a>
 8000c1c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	dd48      	ble.n	8000cb4 <__sflush_r+0xac>
 8000c22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d045      	beq.n	8000cb4 <__sflush_r+0xac>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000c2e:	682f      	ldr	r7, [r5, #0]
 8000c30:	6a21      	ldr	r1, [r4, #32]
 8000c32:	602b      	str	r3, [r5, #0]
 8000c34:	d030      	beq.n	8000c98 <__sflush_r+0x90>
 8000c36:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000c38:	89a3      	ldrh	r3, [r4, #12]
 8000c3a:	0759      	lsls	r1, r3, #29
 8000c3c:	d505      	bpl.n	8000c4a <__sflush_r+0x42>
 8000c3e:	6863      	ldr	r3, [r4, #4]
 8000c40:	1ad2      	subs	r2, r2, r3
 8000c42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000c44:	b10b      	cbz	r3, 8000c4a <__sflush_r+0x42>
 8000c46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000c48:	1ad2      	subs	r2, r2, r3
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c4e:	6a21      	ldr	r1, [r4, #32]
 8000c50:	4628      	mov	r0, r5
 8000c52:	47b0      	blx	r6
 8000c54:	1c43      	adds	r3, r0, #1
 8000c56:	89a3      	ldrh	r3, [r4, #12]
 8000c58:	d106      	bne.n	8000c68 <__sflush_r+0x60>
 8000c5a:	6829      	ldr	r1, [r5, #0]
 8000c5c:	291d      	cmp	r1, #29
 8000c5e:	d82b      	bhi.n	8000cb8 <__sflush_r+0xb0>
 8000c60:	4a28      	ldr	r2, [pc, #160]	@ (8000d04 <__sflush_r+0xfc>)
 8000c62:	410a      	asrs	r2, r1
 8000c64:	07d6      	lsls	r6, r2, #31
 8000c66:	d427      	bmi.n	8000cb8 <__sflush_r+0xb0>
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6062      	str	r2, [r4, #4]
 8000c6c:	04d9      	lsls	r1, r3, #19
 8000c6e:	6922      	ldr	r2, [r4, #16]
 8000c70:	6022      	str	r2, [r4, #0]
 8000c72:	d504      	bpl.n	8000c7e <__sflush_r+0x76>
 8000c74:	1c42      	adds	r2, r0, #1
 8000c76:	d101      	bne.n	8000c7c <__sflush_r+0x74>
 8000c78:	682b      	ldr	r3, [r5, #0]
 8000c7a:	b903      	cbnz	r3, 8000c7e <__sflush_r+0x76>
 8000c7c:	6560      	str	r0, [r4, #84]	@ 0x54
 8000c7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000c80:	602f      	str	r7, [r5, #0]
 8000c82:	b1b9      	cbz	r1, 8000cb4 <__sflush_r+0xac>
 8000c84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d002      	beq.n	8000c92 <__sflush_r+0x8a>
 8000c8c:	4628      	mov	r0, r5
 8000c8e:	f7ff fec3 	bl	8000a18 <_free_r>
 8000c92:	2300      	movs	r3, #0
 8000c94:	6363      	str	r3, [r4, #52]	@ 0x34
 8000c96:	e00d      	b.n	8000cb4 <__sflush_r+0xac>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	47b0      	blx	r6
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	1c50      	adds	r0, r2, #1
 8000ca2:	d1c9      	bne.n	8000c38 <__sflush_r+0x30>
 8000ca4:	682b      	ldr	r3, [r5, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0c6      	beq.n	8000c38 <__sflush_r+0x30>
 8000caa:	2b1d      	cmp	r3, #29
 8000cac:	d001      	beq.n	8000cb2 <__sflush_r+0xaa>
 8000cae:	2b16      	cmp	r3, #22
 8000cb0:	d11d      	bne.n	8000cee <__sflush_r+0xe6>
 8000cb2:	602f      	str	r7, [r5, #0]
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	e021      	b.n	8000cfc <__sflush_r+0xf4>
 8000cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cbc:	b21b      	sxth	r3, r3
 8000cbe:	e01a      	b.n	8000cf6 <__sflush_r+0xee>
 8000cc0:	690f      	ldr	r7, [r1, #16]
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d0f6      	beq.n	8000cb4 <__sflush_r+0xac>
 8000cc6:	0793      	lsls	r3, r2, #30
 8000cc8:	680e      	ldr	r6, [r1, #0]
 8000cca:	bf08      	it	eq
 8000ccc:	694b      	ldreq	r3, [r1, #20]
 8000cce:	600f      	str	r7, [r1, #0]
 8000cd0:	bf18      	it	ne
 8000cd2:	2300      	movne	r3, #0
 8000cd4:	1bf6      	subs	r6, r6, r7
 8000cd6:	608b      	str	r3, [r1, #8]
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	ddeb      	ble.n	8000cb4 <__sflush_r+0xac>
 8000cdc:	6a21      	ldr	r1, [r4, #32]
 8000cde:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000ce2:	4633      	mov	r3, r6
 8000ce4:	463a      	mov	r2, r7
 8000ce6:	4628      	mov	r0, r5
 8000ce8:	47e0      	blx	ip
 8000cea:	2800      	cmp	r0, #0
 8000cec:	dc07      	bgt.n	8000cfe <__sflush_r+0xf6>
 8000cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cf6:	81a3      	strh	r3, [r4, #12]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cfe:	4407      	add	r7, r0
 8000d00:	1a36      	subs	r6, r6, r0
 8000d02:	e7e9      	b.n	8000cd8 <__sflush_r+0xd0>
 8000d04:	dfbffffe 	.word	0xdfbffffe

08000d08 <_fflush_r>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	690b      	ldr	r3, [r1, #16]
 8000d0c:	4605      	mov	r5, r0
 8000d0e:	460c      	mov	r4, r1
 8000d10:	b913      	cbnz	r3, 8000d18 <_fflush_r+0x10>
 8000d12:	2500      	movs	r5, #0
 8000d14:	4628      	mov	r0, r5
 8000d16:	bd38      	pop	{r3, r4, r5, pc}
 8000d18:	b118      	cbz	r0, 8000d22 <_fflush_r+0x1a>
 8000d1a:	6a03      	ldr	r3, [r0, #32]
 8000d1c:	b90b      	cbnz	r3, 8000d22 <_fflush_r+0x1a>
 8000d1e:	f7ff fc93 	bl	8000648 <__sinit>
 8000d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f3      	beq.n	8000d12 <_fflush_r+0xa>
 8000d2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000d2c:	07d0      	lsls	r0, r2, #31
 8000d2e:	d404      	bmi.n	8000d3a <_fflush_r+0x32>
 8000d30:	0599      	lsls	r1, r3, #22
 8000d32:	d402      	bmi.n	8000d3a <_fflush_r+0x32>
 8000d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d36:	f7ff fe6c 	bl	8000a12 <__retarget_lock_acquire_recursive>
 8000d3a:	4628      	mov	r0, r5
 8000d3c:	4621      	mov	r1, r4
 8000d3e:	f7ff ff63 	bl	8000c08 <__sflush_r>
 8000d42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d44:	07da      	lsls	r2, r3, #31
 8000d46:	4605      	mov	r5, r0
 8000d48:	d4e4      	bmi.n	8000d14 <_fflush_r+0xc>
 8000d4a:	89a3      	ldrh	r3, [r4, #12]
 8000d4c:	059b      	lsls	r3, r3, #22
 8000d4e:	d4e1      	bmi.n	8000d14 <_fflush_r+0xc>
 8000d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d52:	f7ff fe5f 	bl	8000a14 <__retarget_lock_release_recursive>
 8000d56:	e7dd      	b.n	8000d14 <_fflush_r+0xc>

08000d58 <__swhatbuf_r>:
 8000d58:	b570      	push	{r4, r5, r6, lr}
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d60:	2900      	cmp	r1, #0
 8000d62:	b096      	sub	sp, #88	@ 0x58
 8000d64:	4615      	mov	r5, r2
 8000d66:	461e      	mov	r6, r3
 8000d68:	da0d      	bge.n	8000d86 <__swhatbuf_r+0x2e>
 8000d6a:	89a3      	ldrh	r3, [r4, #12]
 8000d6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000d70:	f04f 0100 	mov.w	r1, #0
 8000d74:	bf14      	ite	ne
 8000d76:	2340      	movne	r3, #64	@ 0x40
 8000d78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	6031      	str	r1, [r6, #0]
 8000d80:	602b      	str	r3, [r5, #0]
 8000d82:	b016      	add	sp, #88	@ 0x58
 8000d84:	bd70      	pop	{r4, r5, r6, pc}
 8000d86:	466a      	mov	r2, sp
 8000d88:	f000 f848 	bl	8000e1c <_fstat_r>
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	dbec      	blt.n	8000d6a <__swhatbuf_r+0x12>
 8000d90:	9901      	ldr	r1, [sp, #4]
 8000d92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000d96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000d9a:	4259      	negs	r1, r3
 8000d9c:	4159      	adcs	r1, r3
 8000d9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000da2:	e7eb      	b.n	8000d7c <__swhatbuf_r+0x24>

08000da4 <__smakebuf_r>:
 8000da4:	898b      	ldrh	r3, [r1, #12]
 8000da6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000da8:	079d      	lsls	r5, r3, #30
 8000daa:	4606      	mov	r6, r0
 8000dac:	460c      	mov	r4, r1
 8000dae:	d507      	bpl.n	8000dc0 <__smakebuf_r+0x1c>
 8000db0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000db4:	6023      	str	r3, [r4, #0]
 8000db6:	6123      	str	r3, [r4, #16]
 8000db8:	2301      	movs	r3, #1
 8000dba:	6163      	str	r3, [r4, #20]
 8000dbc:	b003      	add	sp, #12
 8000dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc0:	ab01      	add	r3, sp, #4
 8000dc2:	466a      	mov	r2, sp
 8000dc4:	f7ff ffc8 	bl	8000d58 <__swhatbuf_r>
 8000dc8:	9f00      	ldr	r7, [sp, #0]
 8000dca:	4605      	mov	r5, r0
 8000dcc:	4639      	mov	r1, r7
 8000dce:	4630      	mov	r0, r6
 8000dd0:	f7ff fe8e 	bl	8000af0 <_malloc_r>
 8000dd4:	b948      	cbnz	r0, 8000dea <__smakebuf_r+0x46>
 8000dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dda:	059a      	lsls	r2, r3, #22
 8000ddc:	d4ee      	bmi.n	8000dbc <__smakebuf_r+0x18>
 8000dde:	f023 0303 	bic.w	r3, r3, #3
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	81a3      	strh	r3, [r4, #12]
 8000de8:	e7e2      	b.n	8000db0 <__smakebuf_r+0xc>
 8000dea:	89a3      	ldrh	r3, [r4, #12]
 8000dec:	6020      	str	r0, [r4, #0]
 8000dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000df2:	81a3      	strh	r3, [r4, #12]
 8000df4:	9b01      	ldr	r3, [sp, #4]
 8000df6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000dfa:	b15b      	cbz	r3, 8000e14 <__smakebuf_r+0x70>
 8000dfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e00:	4630      	mov	r0, r6
 8000e02:	f000 f81d 	bl	8000e40 <_isatty_r>
 8000e06:	b128      	cbz	r0, 8000e14 <__smakebuf_r+0x70>
 8000e08:	89a3      	ldrh	r3, [r4, #12]
 8000e0a:	f023 0303 	bic.w	r3, r3, #3
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	81a3      	strh	r3, [r4, #12]
 8000e14:	89a3      	ldrh	r3, [r4, #12]
 8000e16:	431d      	orrs	r5, r3
 8000e18:	81a5      	strh	r5, [r4, #12]
 8000e1a:	e7cf      	b.n	8000dbc <__smakebuf_r+0x18>

08000e1c <_fstat_r>:
 8000e1c:	b538      	push	{r3, r4, r5, lr}
 8000e1e:	4d07      	ldr	r5, [pc, #28]	@ (8000e3c <_fstat_r+0x20>)
 8000e20:	2300      	movs	r3, #0
 8000e22:	4604      	mov	r4, r0
 8000e24:	4608      	mov	r0, r1
 8000e26:	4611      	mov	r1, r2
 8000e28:	602b      	str	r3, [r5, #0]
 8000e2a:	f7ff fafb 	bl	8000424 <_fstat>
 8000e2e:	1c43      	adds	r3, r0, #1
 8000e30:	d102      	bne.n	8000e38 <_fstat_r+0x1c>
 8000e32:	682b      	ldr	r3, [r5, #0]
 8000e34:	b103      	cbz	r3, 8000e38 <_fstat_r+0x1c>
 8000e36:	6023      	str	r3, [r4, #0]
 8000e38:	bd38      	pop	{r3, r4, r5, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001b8 	.word	0x200001b8

08000e40 <_isatty_r>:
 8000e40:	b538      	push	{r3, r4, r5, lr}
 8000e42:	4d06      	ldr	r5, [pc, #24]	@ (8000e5c <_isatty_r+0x1c>)
 8000e44:	2300      	movs	r3, #0
 8000e46:	4604      	mov	r4, r0
 8000e48:	4608      	mov	r0, r1
 8000e4a:	602b      	str	r3, [r5, #0]
 8000e4c:	f7ff faf9 	bl	8000442 <_isatty>
 8000e50:	1c43      	adds	r3, r0, #1
 8000e52:	d102      	bne.n	8000e5a <_isatty_r+0x1a>
 8000e54:	682b      	ldr	r3, [r5, #0]
 8000e56:	b103      	cbz	r3, 8000e5a <_isatty_r+0x1a>
 8000e58:	6023      	str	r3, [r4, #0]
 8000e5a:	bd38      	pop	{r3, r4, r5, pc}
 8000e5c:	200001b8 	.word	0x200001b8

08000e60 <_sbrk_r>:
 8000e60:	b538      	push	{r3, r4, r5, lr}
 8000e62:	4d06      	ldr	r5, [pc, #24]	@ (8000e7c <_sbrk_r+0x1c>)
 8000e64:	2300      	movs	r3, #0
 8000e66:	4604      	mov	r4, r0
 8000e68:	4608      	mov	r0, r1
 8000e6a:	602b      	str	r3, [r5, #0]
 8000e6c:	f7ff fb00 	bl	8000470 <_sbrk>
 8000e70:	1c43      	adds	r3, r0, #1
 8000e72:	d102      	bne.n	8000e7a <_sbrk_r+0x1a>
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	b103      	cbz	r3, 8000e7a <_sbrk_r+0x1a>
 8000e78:	6023      	str	r3, [r4, #0]
 8000e7a:	bd38      	pop	{r3, r4, r5, pc}
 8000e7c:	200001b8 	.word	0x200001b8

08000e80 <_init>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	bf00      	nop
 8000e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e86:	bc08      	pop	{r3}
 8000e88:	469e      	mov	lr, r3
 8000e8a:	4770      	bx	lr

08000e8c <_fini>:
 8000e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8e:	bf00      	nop
 8000e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e92:	bc08      	pop	{r3}
 8000e94:	469e      	mov	lr, r3
 8000e96:	4770      	bx	lr
