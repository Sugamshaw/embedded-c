
ADC_intr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000152c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080016fc  080016fc  000116fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800179c  0800179c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800179c  0800179c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800179c  0800179c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800179c  0800179c  0001179c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017a0  080017a0  000117a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080017a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  08001808  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001808  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f6b  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008be  00000000  00000000  00021ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  000228b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00022ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000da5f  00000000  00000000  00022c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000027e5  00000000  00000000  0003069f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004756f  00000000  00000000  00032e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007a3f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dd4  00000000  00000000  0007a444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080016e4 	.word	0x080016e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	080016e4 	.word	0x080016e4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db0b      	blt.n	80002da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4906      	ldr	r1, [pc, #24]	; (80002e4 <__NVIC_EnableIRQ+0x34>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <adc_init>:
#include <stdio.h>

#define PA0_ADC_MODE (3 << 0)
#define ADC_SEQ_LEN_1 0

void adc_init(){
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
    GPIOA->MODER |= PA0_ADC_MODE;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <adc_init+0x38>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <adc_init+0x38>)
 80002f2:	f043 0303 	orr.w	r3, r3, #3
 80002f6:	6013      	str	r3, [r2, #0]
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <adc_init+0x3c>)
 80002fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002fc:	4a09      	ldr	r2, [pc, #36]	; (8000324 <adc_init+0x3c>)
 80002fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000302:	6453      	str	r3, [r2, #68]	; 0x44

    ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <adc_init+0x40>)
 8000306:	2200      	movs	r2, #0
 8000308:	62da      	str	r2, [r3, #44]	; 0x2c
    ADC1->CR2 |= ADC_CR2_ADON;
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <adc_init+0x40>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	4a06      	ldr	r2, [pc, #24]	; (8000328 <adc_init+0x40>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6093      	str	r3, [r2, #8]
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40020000 	.word	0x40020000
 8000324:	40023800 	.word	0x40023800
 8000328:	40012000 	.word	0x40012000

0800032c <adc_int_init>:

void adc_int_init(){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
    ADC1->CR1 |= ADC_CR1_EOCIE;
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <adc_int_init+0x1c>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <adc_int_init+0x1c>)
 8000336:	f043 0320 	orr.w	r3, r3, #32
 800033a:	6053      	str	r3, [r2, #4]
    NVIC_EnableIRQ(ADC_IRQn);
 800033c:	2012      	movs	r0, #18
 800033e:	f7ff ffb7 	bl	80002b0 <__NVIC_EnableIRQ>
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40012000 	.word	0x40012000

0800034c <adc_start_conversion>:

void adc_start_conversion(void){
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_CONT;
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <adc_start_conversion+0x24>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4a06      	ldr	r2, [pc, #24]	; (8000370 <adc_start_conversion+0x24>)
 8000356:	f043 0302 	orr.w	r3, r3, #2
 800035a:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC_CR2_SWSTART;
 800035c:	4b04      	ldr	r3, [pc, #16]	; (8000370 <adc_start_conversion+0x24>)
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	4a03      	ldr	r2, [pc, #12]	; (8000370 <adc_start_conversion+0x24>)
 8000362:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000366:	6093      	str	r3, [r2, #8]
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40012000 	.word	0x40012000

08000374 <ADC_IRQHandler>:
uint32_t adc_read(void){
    while(!(ADC1->SR & ADC_SR_EOC));
    return (ADC1->DR);
}

void ADC_IRQHandler(void){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0

    if((ADC1->SR & ADC_SR_EOC) != 0){
 800037a:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <ADC_IRQHandler+0x4c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f003 0302 	and.w	r3, r3, #2
 8000382:	2b00      	cmp	r3, #0
 8000384:	d018      	beq.n	80003b8 <ADC_IRQHandler+0x44>
        ADC1->SR &=~ ADC_SR_EOC;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <ADC_IRQHandler+0x4c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <ADC_IRQHandler+0x4c>)
 800038c:	f023 0302 	bic.w	r3, r3, #2
 8000390:	6013      	str	r3, [r2, #0]

        volatile uint32_t value = ADC1->DR;
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <ADC_IRQHandler+0x4c>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000396:	603b      	str	r3, [r7, #0]
        printf("%d\n\r", (int)value);
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	4619      	mov	r1, r3
 800039c:	4809      	ldr	r0, [pc, #36]	; (80003c4 <ADC_IRQHandler+0x50>)
 800039e:	f000 fa1b 	bl	80007d8 <iprintf>
        for(uint32_t i=0;i<0xffff;i++);
 80003a2:	2300      	movs	r3, #0
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	e002      	b.n	80003ae <ADC_IRQHandler+0x3a>
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d9f7      	bls.n	80003a8 <ADC_IRQHandler+0x34>
    }
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40012000 	.word	0x40012000
 80003c4:	080016fc 	.word	0x080016fc

080003c8 <main>:
#endif




int main(){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0

    clockSpeed_PLL();
 80003cc:	f000 f826 	bl	800041c <clockSpeed_PLL>
    SysTick_Init();
 80003d0:	f000 f8da 	bl	8000588 <SysTick_Init>

    tx_init();
 80003d4:	f000 f892 	bl	80004fc <tx_init>
    adc_init();
 80003d8:	f7ff ff86 	bl	80002e8 <adc_init>
    adc_int_init();
 80003dc:	f7ff ffa6 	bl	800032c <adc_int_init>

    adc_start_conversion();
 80003e0:	f7ff ffb4 	bl	800034c <adc_start_conversion>

    while(1){
 80003e4:	e7fe      	b.n	80003e4 <main+0x1c>
	...

080003e8 <__io_putchar>:

    };
}

int __io_putchar(int ch){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
    tx_send(ch);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 f8b1 	bl	800055c <tx_send>
    for(uint32_t i=0;i<500000;i++);
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	e002      	b.n	8000406 <__io_putchar+0x1e>
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	3301      	adds	r3, #1
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	4a03      	ldr	r2, [pc, #12]	; (8000418 <__io_putchar+0x30>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d9f8      	bls.n	8000400 <__io_putchar+0x18>
    return ch;
 800040e:	687b      	ldr	r3, [r7, #4]
}
 8000410:	4618      	mov	r0, r3
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	0007a11f 	.word	0x0007a11f

0800041c <clockSpeed_PLL>:

#include "stm32f446xx.h"

#include "pll.h"

void clockSpeed_PLL(){
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

    RCC->CR |= RCC_CR_HSION;
 8000420:	4b32      	ldr	r3, [pc, #200]	; (80004ec <clockSpeed_PLL+0xd0>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a31      	ldr	r2, [pc, #196]	; (80004ec <clockSpeed_PLL+0xd0>)
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));
 800042c:	bf00      	nop
 800042e:	4b2f      	ldr	r3, [pc, #188]	; (80004ec <clockSpeed_PLL+0xd0>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f003 0302 	and.w	r3, r3, #2
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f9      	beq.n	800042e <clockSpeed_PLL+0x12>

    RCC->PLLCFGR = (PLL_M) | (PLL_N << 6) | (PLL_P << 16) | (PLL_Q << 24);
 800043a:	4b2c      	ldr	r3, [pc, #176]	; (80004ec <clockSpeed_PLL+0xd0>)
 800043c:	4a2c      	ldr	r2, [pc, #176]	; (80004f0 <clockSpeed_PLL+0xd4>)
 800043e:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR &=~ RCC_PLLCFGR_PLLSRC;
 8000440:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <clockSpeed_PLL+0xd0>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	4a29      	ldr	r2, [pc, #164]	; (80004ec <clockSpeed_PLL+0xd0>)
 8000446:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800044a:	6053      	str	r3, [r2, #4]

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE2_DIV2 | RCC_CFGR_PPRE1_DIV4;
 800044c:	4b27      	ldr	r3, [pc, #156]	; (80004ec <clockSpeed_PLL+0xd0>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	4a26      	ldr	r2, [pc, #152]	; (80004ec <clockSpeed_PLL+0xd0>)
 8000452:	f443 4314 	orr.w	r3, r3, #37888	; 0x9400
 8000456:	6093      	str	r3, [r2, #8]

    RCC->CR |= RCC_CR_PLLON;
 8000458:	4b24      	ldr	r3, [pc, #144]	; (80004ec <clockSpeed_PLL+0xd0>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a23      	ldr	r2, [pc, #140]	; (80004ec <clockSpeed_PLL+0xd0>)
 800045e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000462:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 8000464:	bf00      	nop
 8000466:	4b21      	ldr	r3, [pc, #132]	; (80004ec <clockSpeed_PLL+0xd0>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0f9      	beq.n	8000466 <clockSpeed_PLL+0x4a>

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000472:	4b1e      	ldr	r3, [pc, #120]	; (80004ec <clockSpeed_PLL+0xd0>)
 8000474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000476:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <clockSpeed_PLL+0xd0>)
 8000478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800047c:	6413      	str	r3, [r2, #64]	; 0x40
    
    PWR->CR |= PWR_CR_ODEN;
 800047e:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <clockSpeed_PLL+0xd8>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a1c      	ldr	r2, [pc, #112]	; (80004f4 <clockSpeed_PLL+0xd8>)
 8000484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000488:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR & PWR_CSR_ODRDY)) ;
 800048a:	bf00      	nop
 800048c:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <clockSpeed_PLL+0xd8>)
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000494:	2b00      	cmp	r3, #0
 8000496:	d0f9      	beq.n	800048c <clockSpeed_PLL+0x70>
    
    PWR->CR |= PWR_CR_ODSWEN;
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <clockSpeed_PLL+0xd8>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a15      	ldr	r2, [pc, #84]	; (80004f4 <clockSpeed_PLL+0xd8>)
 800049e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004a2:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR & PWR_CSR_ODSWRDY)) ;
 80004a4:	bf00      	nop
 80004a6:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <clockSpeed_PLL+0xd8>)
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f9      	beq.n	80004a6 <clockSpeed_PLL+0x8a>

    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <clockSpeed_PLL+0xdc>)
 80004b4:	f240 7205 	movw	r2, #1797	; 0x705
 80004b8:	601a      	str	r2, [r3, #0]

    RCC->CFGR &=~ RCC_CFGR_SW;
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <clockSpeed_PLL+0xd0>)
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <clockSpeed_PLL+0xd0>)
 80004c0:	f023 0303 	bic.w	r3, r3, #3
 80004c4:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <clockSpeed_PLL+0xd0>)
 80004c8:	689b      	ldr	r3, [r3, #8]
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <clockSpeed_PLL+0xd0>)
 80004cc:	f043 0302 	orr.w	r3, r3, #2
 80004d0:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80004d2:	bf00      	nop
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <clockSpeed_PLL+0xd0>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	f003 030c 	and.w	r3, r3, #12
 80004dc:	2b08      	cmp	r3, #8
 80004de:	d1f9      	bne.n	80004d4 <clockSpeed_PLL+0xb8>

}
 80004e0:	bf00      	nop
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40023800 	.word	0x40023800
 80004f0:	02002d08 	.word	0x02002d08
 80004f4:	40007000 	.word	0x40007000
 80004f8:	40023c00 	.word	0x40023c00

080004fc <tx_init>:
char rx_read(){
    while(!(USART2->SR & USART_SR_RXNE)){};
    return USART2->DR;
}

void tx_init(){
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; 
 8000500:	4b13      	ldr	r3, [pc, #76]	; (8000550 <tx_init+0x54>)
 8000502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000504:	4a12      	ldr	r2, [pc, #72]	; (8000550 <tx_init+0x54>)
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= PA2_AF;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <tx_init+0x58>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a10      	ldr	r2, [pc, #64]	; (8000554 <tx_init+0x58>)
 8000512:	f043 0320 	orr.w	r3, r3, #32
 8000516:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= PA2_AF_USART2_TX;
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <tx_init+0x58>)
 800051a:	6a1b      	ldr	r3, [r3, #32]
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <tx_init+0x58>)
 800051e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000522:	6213      	str	r3, [r2, #32]

    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <tx_init+0x54>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	4a09      	ldr	r2, [pc, #36]	; (8000550 <tx_init+0x54>)
 800052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
    USART2->BRR = (APB1_FREQ + (BAUDRATE/2U))/BAUDRATE;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <tx_init+0x5c>)
 8000532:	f240 1287 	movw	r2, #391	; 0x187
 8000536:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_UE;
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <tx_init+0x5c>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <tx_init+0x5c>)
 800053e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000542:	f043 0308 	orr.w	r3, r3, #8
 8000546:	60d3      	str	r3, [r2, #12]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	40023800 	.word	0x40023800
 8000554:	40020000 	.word	0x40020000
 8000558:	40004400 	.word	0x40004400

0800055c <tx_send>:

void tx_send(char c){
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
    while(!(USART2->SR & USART_SR_TXE)){};
 8000566:	bf00      	nop
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <tx_send+0x28>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0f9      	beq.n	8000568 <tx_send+0xc>
    USART2->DR = (c & 0xFF);
 8000574:	4a03      	ldr	r2, [pc, #12]	; (8000584 <tx_send+0x28>)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	6053      	str	r3, [r2, #4]
};
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40004400 	.word	0x40004400

08000588 <SysTick_Init>:
#include "pll.h"

volatile uint32_t ms_counter = 0;
volatile uint32_t millis = 0;

void SysTick_Init(){
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
    SysTick->VAL = 0;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <SysTick_Init+0x20>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
    SysTick->LOAD = (HCLK_FREQ / 1000)- 1;
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <SysTick_Init+0x20>)
 8000594:	4a05      	ldr	r2, [pc, #20]	; (80005ac <SysTick_Init+0x24>)
 8000596:	605a      	str	r2, [r3, #4]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <SysTick_Init+0x20>)
 800059a:	2207      	movs	r2, #7
 800059c:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_TICKINT_Msk |
                    SysTick_CTRL_ENABLE_Msk;
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	e000e010 	.word	0xe000e010
 80005ac:	0002bf1f 	.word	0x0002bf1f

080005b0 <SysTick_Handler>:

void SysTick_Handler(){
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
    if (ms_counter) ms_counter--;
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <SysTick_Handler+0x28>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d004      	beq.n	80005c6 <SysTick_Handler+0x16>
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <SysTick_Handler+0x28>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	3b01      	subs	r3, #1
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <SysTick_Handler+0x28>)
 80005c4:	6013      	str	r3, [r2, #0]
    millis++;
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <SysTick_Handler+0x2c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	4a03      	ldr	r2, [pc, #12]	; (80005dc <SysTick_Handler+0x2c>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	20000080 	.word	0x20000080
 80005dc:	20000084 	.word	0x20000084

080005e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	e00a      	b.n	8000608 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005f2:	f3af 8000 	nop.w
 80005f6:	4601      	mov	r1, r0
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	60ba      	str	r2, [r7, #8]
 80005fe:	b2ca      	uxtb	r2, r1
 8000600:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	3301      	adds	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	429a      	cmp	r2, r3
 800060e:	dbf0      	blt.n	80005f2 <_read+0x12>
	}

return len;
 8000610:	687b      	ldr	r3, [r7, #4]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b086      	sub	sp, #24
 800061e:	af00      	add	r7, sp, #0
 8000620:	60f8      	str	r0, [r7, #12]
 8000622:	60b9      	str	r1, [r7, #8]
 8000624:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	e009      	b.n	8000640 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	60ba      	str	r2, [r7, #8]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff fed7 	bl	80003e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	429a      	cmp	r2, r3
 8000646:	dbf1      	blt.n	800062c <_write+0x12>
	}
	return len;
 8000648:	687b      	ldr	r3, [r7, #4]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <_close>:

int _close(int file)
{
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
	return -1;
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800065e:	4618      	mov	r0, r3
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000678:	605a      	str	r2, [r3, #4]
	return 0;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr

08000686 <_isatty>:

int _isatty(int file)
{
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
	return 1;
 800068e:	2301      	movs	r3, #1
}
 8000690:	4618      	mov	r0, r3
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800069a:	b480      	push	{r7}
 800069c:	b085      	sub	sp, #20
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	607a      	str	r2, [r7, #4]
	return 0;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
	...

080006b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006bc:	4a14      	ldr	r2, [pc, #80]	; (8000710 <_sbrk+0x5c>)
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <_sbrk+0x60>)
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <_sbrk+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <_sbrk+0x64>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <_sbrk+0x68>)
 80006d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <_sbrk+0x64>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d207      	bcs.n	80006f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e4:	f000 f846 	bl	8000774 <__errno>
 80006e8:	4603      	mov	r3, r0
 80006ea:	220c      	movs	r2, #12
 80006ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
 80006f2:	e009      	b.n	8000708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	4a05      	ldr	r2, [pc, #20]	; (8000718 <_sbrk+0x64>)
 8000704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000706:	68fb      	ldr	r3, [r7, #12]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20020000 	.word	0x20020000
 8000714:	00000400 	.word	0x00000400
 8000718:	20000088 	.word	0x20000088
 800071c:	200000a0 	.word	0x200000a0

08000720 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000722:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000724:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <LoopForever+0x6>)
  ldr r1, =_edata
 800072a:	490d      	ldr	r1, [pc, #52]	; (8000760 <LoopForever+0xa>)
  ldr r2, =_sidata
 800072c:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <LoopForever+0xe>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000730:	e002      	b.n	8000738 <LoopCopyDataInit>

08000732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000736:	3304      	adds	r3, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800073c:	d3f9      	bcc.n	8000732 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000740:	4c0a      	ldr	r4, [pc, #40]	; (800076c <LoopForever+0x16>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000744:	e001      	b.n	800074a <LoopFillZerobss>

08000746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000748:	3204      	adds	r2, #4

0800074a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800074c:	d3fb      	bcc.n	8000746 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800074e:	f000 f817 	bl	8000780 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000752:	f7ff fe39 	bl	80003c8 <main>

08000756 <LoopForever>:

LoopForever:
    b LoopForever
 8000756:	e7fe      	b.n	8000756 <LoopForever>
  ldr   r0, =_estack
 8000758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000760:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000764:	080017a4 	.word	0x080017a4
  ldr r2, =_sbss
 8000768:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800076c:	2000009c 	.word	0x2000009c

08000770 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <BusFault_Handler>
	...

08000774 <__errno>:
 8000774:	4b01      	ldr	r3, [pc, #4]	; (800077c <__errno+0x8>)
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000000 	.word	0x20000000

08000780 <__libc_init_array>:
 8000780:	b570      	push	{r4, r5, r6, lr}
 8000782:	4d0d      	ldr	r5, [pc, #52]	; (80007b8 <__libc_init_array+0x38>)
 8000784:	4c0d      	ldr	r4, [pc, #52]	; (80007bc <__libc_init_array+0x3c>)
 8000786:	1b64      	subs	r4, r4, r5
 8000788:	10a4      	asrs	r4, r4, #2
 800078a:	2600      	movs	r6, #0
 800078c:	42a6      	cmp	r6, r4
 800078e:	d109      	bne.n	80007a4 <__libc_init_array+0x24>
 8000790:	4d0b      	ldr	r5, [pc, #44]	; (80007c0 <__libc_init_array+0x40>)
 8000792:	4c0c      	ldr	r4, [pc, #48]	; (80007c4 <__libc_init_array+0x44>)
 8000794:	f000 ffa6 	bl	80016e4 <_init>
 8000798:	1b64      	subs	r4, r4, r5
 800079a:	10a4      	asrs	r4, r4, #2
 800079c:	2600      	movs	r6, #0
 800079e:	42a6      	cmp	r6, r4
 80007a0:	d105      	bne.n	80007ae <__libc_init_array+0x2e>
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a8:	4798      	blx	r3
 80007aa:	3601      	adds	r6, #1
 80007ac:	e7ee      	b.n	800078c <__libc_init_array+0xc>
 80007ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80007b2:	4798      	blx	r3
 80007b4:	3601      	adds	r6, #1
 80007b6:	e7f2      	b.n	800079e <__libc_init_array+0x1e>
 80007b8:	0800179c 	.word	0x0800179c
 80007bc:	0800179c 	.word	0x0800179c
 80007c0:	0800179c 	.word	0x0800179c
 80007c4:	080017a0 	.word	0x080017a0

080007c8 <memset>:
 80007c8:	4402      	add	r2, r0
 80007ca:	4603      	mov	r3, r0
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d100      	bne.n	80007d2 <memset+0xa>
 80007d0:	4770      	bx	lr
 80007d2:	f803 1b01 	strb.w	r1, [r3], #1
 80007d6:	e7f9      	b.n	80007cc <memset+0x4>

080007d8 <iprintf>:
 80007d8:	b40f      	push	{r0, r1, r2, r3}
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <iprintf+0x2c>)
 80007dc:	b513      	push	{r0, r1, r4, lr}
 80007de:	681c      	ldr	r4, [r3, #0]
 80007e0:	b124      	cbz	r4, 80007ec <iprintf+0x14>
 80007e2:	69a3      	ldr	r3, [r4, #24]
 80007e4:	b913      	cbnz	r3, 80007ec <iprintf+0x14>
 80007e6:	4620      	mov	r0, r4
 80007e8:	f000 f866 	bl	80008b8 <__sinit>
 80007ec:	ab05      	add	r3, sp, #20
 80007ee:	9a04      	ldr	r2, [sp, #16]
 80007f0:	68a1      	ldr	r1, [r4, #8]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4620      	mov	r0, r4
 80007f6:	f000 f9bb 	bl	8000b70 <_vfiprintf_r>
 80007fa:	b002      	add	sp, #8
 80007fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr
 8000804:	20000000 	.word	0x20000000

08000808 <std>:
 8000808:	2300      	movs	r3, #0
 800080a:	b510      	push	{r4, lr}
 800080c:	4604      	mov	r4, r0
 800080e:	e9c0 3300 	strd	r3, r3, [r0]
 8000812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000816:	6083      	str	r3, [r0, #8]
 8000818:	8181      	strh	r1, [r0, #12]
 800081a:	6643      	str	r3, [r0, #100]	; 0x64
 800081c:	81c2      	strh	r2, [r0, #14]
 800081e:	6183      	str	r3, [r0, #24]
 8000820:	4619      	mov	r1, r3
 8000822:	2208      	movs	r2, #8
 8000824:	305c      	adds	r0, #92	; 0x5c
 8000826:	f7ff ffcf 	bl	80007c8 <memset>
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <std+0x38>)
 800082c:	6263      	str	r3, [r4, #36]	; 0x24
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <std+0x3c>)
 8000830:	62a3      	str	r3, [r4, #40]	; 0x28
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <std+0x40>)
 8000834:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <std+0x44>)
 8000838:	6224      	str	r4, [r4, #32]
 800083a:	6323      	str	r3, [r4, #48]	; 0x30
 800083c:	bd10      	pop	{r4, pc}
 800083e:	bf00      	nop
 8000840:	08001119 	.word	0x08001119
 8000844:	0800113b 	.word	0x0800113b
 8000848:	08001173 	.word	0x08001173
 800084c:	08001197 	.word	0x08001197

08000850 <_cleanup_r>:
 8000850:	4901      	ldr	r1, [pc, #4]	; (8000858 <_cleanup_r+0x8>)
 8000852:	f000 b8af 	b.w	80009b4 <_fwalk_reent>
 8000856:	bf00      	nop
 8000858:	08001469 	.word	0x08001469

0800085c <__sfmoreglue>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	2268      	movs	r2, #104	; 0x68
 8000860:	1e4d      	subs	r5, r1, #1
 8000862:	4355      	muls	r5, r2
 8000864:	460e      	mov	r6, r1
 8000866:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800086a:	f000 f8e5 	bl	8000a38 <_malloc_r>
 800086e:	4604      	mov	r4, r0
 8000870:	b140      	cbz	r0, 8000884 <__sfmoreglue+0x28>
 8000872:	2100      	movs	r1, #0
 8000874:	e9c0 1600 	strd	r1, r6, [r0]
 8000878:	300c      	adds	r0, #12
 800087a:	60a0      	str	r0, [r4, #8]
 800087c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000880:	f7ff ffa2 	bl	80007c8 <memset>
 8000884:	4620      	mov	r0, r4
 8000886:	bd70      	pop	{r4, r5, r6, pc}

08000888 <__sfp_lock_acquire>:
 8000888:	4801      	ldr	r0, [pc, #4]	; (8000890 <__sfp_lock_acquire+0x8>)
 800088a:	f000 b8b3 	b.w	80009f4 <__retarget_lock_acquire_recursive>
 800088e:	bf00      	nop
 8000890:	2000008d 	.word	0x2000008d

08000894 <__sfp_lock_release>:
 8000894:	4801      	ldr	r0, [pc, #4]	; (800089c <__sfp_lock_release+0x8>)
 8000896:	f000 b8ae 	b.w	80009f6 <__retarget_lock_release_recursive>
 800089a:	bf00      	nop
 800089c:	2000008d 	.word	0x2000008d

080008a0 <__sinit_lock_acquire>:
 80008a0:	4801      	ldr	r0, [pc, #4]	; (80008a8 <__sinit_lock_acquire+0x8>)
 80008a2:	f000 b8a7 	b.w	80009f4 <__retarget_lock_acquire_recursive>
 80008a6:	bf00      	nop
 80008a8:	2000008e 	.word	0x2000008e

080008ac <__sinit_lock_release>:
 80008ac:	4801      	ldr	r0, [pc, #4]	; (80008b4 <__sinit_lock_release+0x8>)
 80008ae:	f000 b8a2 	b.w	80009f6 <__retarget_lock_release_recursive>
 80008b2:	bf00      	nop
 80008b4:	2000008e 	.word	0x2000008e

080008b8 <__sinit>:
 80008b8:	b510      	push	{r4, lr}
 80008ba:	4604      	mov	r4, r0
 80008bc:	f7ff fff0 	bl	80008a0 <__sinit_lock_acquire>
 80008c0:	69a3      	ldr	r3, [r4, #24]
 80008c2:	b11b      	cbz	r3, 80008cc <__sinit+0x14>
 80008c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008c8:	f7ff bff0 	b.w	80008ac <__sinit_lock_release>
 80008cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80008d0:	6523      	str	r3, [r4, #80]	; 0x50
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <__sinit+0x68>)
 80008d4:	4a13      	ldr	r2, [pc, #76]	; (8000924 <__sinit+0x6c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80008da:	42a3      	cmp	r3, r4
 80008dc:	bf04      	itt	eq
 80008de:	2301      	moveq	r3, #1
 80008e0:	61a3      	streq	r3, [r4, #24]
 80008e2:	4620      	mov	r0, r4
 80008e4:	f000 f820 	bl	8000928 <__sfp>
 80008e8:	6060      	str	r0, [r4, #4]
 80008ea:	4620      	mov	r0, r4
 80008ec:	f000 f81c 	bl	8000928 <__sfp>
 80008f0:	60a0      	str	r0, [r4, #8]
 80008f2:	4620      	mov	r0, r4
 80008f4:	f000 f818 	bl	8000928 <__sfp>
 80008f8:	2200      	movs	r2, #0
 80008fa:	60e0      	str	r0, [r4, #12]
 80008fc:	2104      	movs	r1, #4
 80008fe:	6860      	ldr	r0, [r4, #4]
 8000900:	f7ff ff82 	bl	8000808 <std>
 8000904:	68a0      	ldr	r0, [r4, #8]
 8000906:	2201      	movs	r2, #1
 8000908:	2109      	movs	r1, #9
 800090a:	f7ff ff7d 	bl	8000808 <std>
 800090e:	68e0      	ldr	r0, [r4, #12]
 8000910:	2202      	movs	r2, #2
 8000912:	2112      	movs	r1, #18
 8000914:	f7ff ff78 	bl	8000808 <std>
 8000918:	2301      	movs	r3, #1
 800091a:	61a3      	str	r3, [r4, #24]
 800091c:	e7d2      	b.n	80008c4 <__sinit+0xc>
 800091e:	bf00      	nop
 8000920:	08001704 	.word	0x08001704
 8000924:	08000851 	.word	0x08000851

08000928 <__sfp>:
 8000928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800092a:	4607      	mov	r7, r0
 800092c:	f7ff ffac 	bl	8000888 <__sfp_lock_acquire>
 8000930:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <__sfp+0x84>)
 8000932:	681e      	ldr	r6, [r3, #0]
 8000934:	69b3      	ldr	r3, [r6, #24]
 8000936:	b913      	cbnz	r3, 800093e <__sfp+0x16>
 8000938:	4630      	mov	r0, r6
 800093a:	f7ff ffbd 	bl	80008b8 <__sinit>
 800093e:	3648      	adds	r6, #72	; 0x48
 8000940:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000944:	3b01      	subs	r3, #1
 8000946:	d503      	bpl.n	8000950 <__sfp+0x28>
 8000948:	6833      	ldr	r3, [r6, #0]
 800094a:	b30b      	cbz	r3, 8000990 <__sfp+0x68>
 800094c:	6836      	ldr	r6, [r6, #0]
 800094e:	e7f7      	b.n	8000940 <__sfp+0x18>
 8000950:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000954:	b9d5      	cbnz	r5, 800098c <__sfp+0x64>
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <__sfp+0x88>)
 8000958:	60e3      	str	r3, [r4, #12]
 800095a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800095e:	6665      	str	r5, [r4, #100]	; 0x64
 8000960:	f000 f847 	bl	80009f2 <__retarget_lock_init_recursive>
 8000964:	f7ff ff96 	bl	8000894 <__sfp_lock_release>
 8000968:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800096c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000970:	6025      	str	r5, [r4, #0]
 8000972:	61a5      	str	r5, [r4, #24]
 8000974:	2208      	movs	r2, #8
 8000976:	4629      	mov	r1, r5
 8000978:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800097c:	f7ff ff24 	bl	80007c8 <memset>
 8000980:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000984:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000988:	4620      	mov	r0, r4
 800098a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800098c:	3468      	adds	r4, #104	; 0x68
 800098e:	e7d9      	b.n	8000944 <__sfp+0x1c>
 8000990:	2104      	movs	r1, #4
 8000992:	4638      	mov	r0, r7
 8000994:	f7ff ff62 	bl	800085c <__sfmoreglue>
 8000998:	4604      	mov	r4, r0
 800099a:	6030      	str	r0, [r6, #0]
 800099c:	2800      	cmp	r0, #0
 800099e:	d1d5      	bne.n	800094c <__sfp+0x24>
 80009a0:	f7ff ff78 	bl	8000894 <__sfp_lock_release>
 80009a4:	230c      	movs	r3, #12
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	e7ee      	b.n	8000988 <__sfp+0x60>
 80009aa:	bf00      	nop
 80009ac:	08001704 	.word	0x08001704
 80009b0:	ffff0001 	.word	0xffff0001

080009b4 <_fwalk_reent>:
 80009b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009b8:	4606      	mov	r6, r0
 80009ba:	4688      	mov	r8, r1
 80009bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80009c0:	2700      	movs	r7, #0
 80009c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009c6:	f1b9 0901 	subs.w	r9, r9, #1
 80009ca:	d505      	bpl.n	80009d8 <_fwalk_reent+0x24>
 80009cc:	6824      	ldr	r4, [r4, #0]
 80009ce:	2c00      	cmp	r4, #0
 80009d0:	d1f7      	bne.n	80009c2 <_fwalk_reent+0xe>
 80009d2:	4638      	mov	r0, r7
 80009d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009d8:	89ab      	ldrh	r3, [r5, #12]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d907      	bls.n	80009ee <_fwalk_reent+0x3a>
 80009de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009e2:	3301      	adds	r3, #1
 80009e4:	d003      	beq.n	80009ee <_fwalk_reent+0x3a>
 80009e6:	4629      	mov	r1, r5
 80009e8:	4630      	mov	r0, r6
 80009ea:	47c0      	blx	r8
 80009ec:	4307      	orrs	r7, r0
 80009ee:	3568      	adds	r5, #104	; 0x68
 80009f0:	e7e9      	b.n	80009c6 <_fwalk_reent+0x12>

080009f2 <__retarget_lock_init_recursive>:
 80009f2:	4770      	bx	lr

080009f4 <__retarget_lock_acquire_recursive>:
 80009f4:	4770      	bx	lr

080009f6 <__retarget_lock_release_recursive>:
 80009f6:	4770      	bx	lr

080009f8 <sbrk_aligned>:
 80009f8:	b570      	push	{r4, r5, r6, lr}
 80009fa:	4e0e      	ldr	r6, [pc, #56]	; (8000a34 <sbrk_aligned+0x3c>)
 80009fc:	460c      	mov	r4, r1
 80009fe:	6831      	ldr	r1, [r6, #0]
 8000a00:	4605      	mov	r5, r0
 8000a02:	b911      	cbnz	r1, 8000a0a <sbrk_aligned+0x12>
 8000a04:	f000 fb78 	bl	80010f8 <_sbrk_r>
 8000a08:	6030      	str	r0, [r6, #0]
 8000a0a:	4621      	mov	r1, r4
 8000a0c:	4628      	mov	r0, r5
 8000a0e:	f000 fb73 	bl	80010f8 <_sbrk_r>
 8000a12:	1c43      	adds	r3, r0, #1
 8000a14:	d00a      	beq.n	8000a2c <sbrk_aligned+0x34>
 8000a16:	1cc4      	adds	r4, r0, #3
 8000a18:	f024 0403 	bic.w	r4, r4, #3
 8000a1c:	42a0      	cmp	r0, r4
 8000a1e:	d007      	beq.n	8000a30 <sbrk_aligned+0x38>
 8000a20:	1a21      	subs	r1, r4, r0
 8000a22:	4628      	mov	r0, r5
 8000a24:	f000 fb68 	bl	80010f8 <_sbrk_r>
 8000a28:	3001      	adds	r0, #1
 8000a2a:	d101      	bne.n	8000a30 <sbrk_aligned+0x38>
 8000a2c:	f04f 34ff 	mov.w	r4, #4294967295
 8000a30:	4620      	mov	r0, r4
 8000a32:	bd70      	pop	{r4, r5, r6, pc}
 8000a34:	20000094 	.word	0x20000094

08000a38 <_malloc_r>:
 8000a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a3c:	1ccd      	adds	r5, r1, #3
 8000a3e:	f025 0503 	bic.w	r5, r5, #3
 8000a42:	3508      	adds	r5, #8
 8000a44:	2d0c      	cmp	r5, #12
 8000a46:	bf38      	it	cc
 8000a48:	250c      	movcc	r5, #12
 8000a4a:	2d00      	cmp	r5, #0
 8000a4c:	4607      	mov	r7, r0
 8000a4e:	db01      	blt.n	8000a54 <_malloc_r+0x1c>
 8000a50:	42a9      	cmp	r1, r5
 8000a52:	d905      	bls.n	8000a60 <_malloc_r+0x28>
 8000a54:	230c      	movs	r3, #12
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	2600      	movs	r6, #0
 8000a5a:	4630      	mov	r0, r6
 8000a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a60:	4e2e      	ldr	r6, [pc, #184]	; (8000b1c <_malloc_r+0xe4>)
 8000a62:	f000 fdb5 	bl	80015d0 <__malloc_lock>
 8000a66:	6833      	ldr	r3, [r6, #0]
 8000a68:	461c      	mov	r4, r3
 8000a6a:	bb34      	cbnz	r4, 8000aba <_malloc_r+0x82>
 8000a6c:	4629      	mov	r1, r5
 8000a6e:	4638      	mov	r0, r7
 8000a70:	f7ff ffc2 	bl	80009f8 <sbrk_aligned>
 8000a74:	1c43      	adds	r3, r0, #1
 8000a76:	4604      	mov	r4, r0
 8000a78:	d14d      	bne.n	8000b16 <_malloc_r+0xde>
 8000a7a:	6834      	ldr	r4, [r6, #0]
 8000a7c:	4626      	mov	r6, r4
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	d140      	bne.n	8000b04 <_malloc_r+0xcc>
 8000a82:	6823      	ldr	r3, [r4, #0]
 8000a84:	4631      	mov	r1, r6
 8000a86:	4638      	mov	r0, r7
 8000a88:	eb04 0803 	add.w	r8, r4, r3
 8000a8c:	f000 fb34 	bl	80010f8 <_sbrk_r>
 8000a90:	4580      	cmp	r8, r0
 8000a92:	d13a      	bne.n	8000b0a <_malloc_r+0xd2>
 8000a94:	6821      	ldr	r1, [r4, #0]
 8000a96:	3503      	adds	r5, #3
 8000a98:	1a6d      	subs	r5, r5, r1
 8000a9a:	f025 0503 	bic.w	r5, r5, #3
 8000a9e:	3508      	adds	r5, #8
 8000aa0:	2d0c      	cmp	r5, #12
 8000aa2:	bf38      	it	cc
 8000aa4:	250c      	movcc	r5, #12
 8000aa6:	4629      	mov	r1, r5
 8000aa8:	4638      	mov	r0, r7
 8000aaa:	f7ff ffa5 	bl	80009f8 <sbrk_aligned>
 8000aae:	3001      	adds	r0, #1
 8000ab0:	d02b      	beq.n	8000b0a <_malloc_r+0xd2>
 8000ab2:	6823      	ldr	r3, [r4, #0]
 8000ab4:	442b      	add	r3, r5
 8000ab6:	6023      	str	r3, [r4, #0]
 8000ab8:	e00e      	b.n	8000ad8 <_malloc_r+0xa0>
 8000aba:	6822      	ldr	r2, [r4, #0]
 8000abc:	1b52      	subs	r2, r2, r5
 8000abe:	d41e      	bmi.n	8000afe <_malloc_r+0xc6>
 8000ac0:	2a0b      	cmp	r2, #11
 8000ac2:	d916      	bls.n	8000af2 <_malloc_r+0xba>
 8000ac4:	1961      	adds	r1, r4, r5
 8000ac6:	42a3      	cmp	r3, r4
 8000ac8:	6025      	str	r5, [r4, #0]
 8000aca:	bf18      	it	ne
 8000acc:	6059      	strne	r1, [r3, #4]
 8000ace:	6863      	ldr	r3, [r4, #4]
 8000ad0:	bf08      	it	eq
 8000ad2:	6031      	streq	r1, [r6, #0]
 8000ad4:	5162      	str	r2, [r4, r5]
 8000ad6:	604b      	str	r3, [r1, #4]
 8000ad8:	4638      	mov	r0, r7
 8000ada:	f104 060b 	add.w	r6, r4, #11
 8000ade:	f000 fd7d 	bl	80015dc <__malloc_unlock>
 8000ae2:	f026 0607 	bic.w	r6, r6, #7
 8000ae6:	1d23      	adds	r3, r4, #4
 8000ae8:	1af2      	subs	r2, r6, r3
 8000aea:	d0b6      	beq.n	8000a5a <_malloc_r+0x22>
 8000aec:	1b9b      	subs	r3, r3, r6
 8000aee:	50a3      	str	r3, [r4, r2]
 8000af0:	e7b3      	b.n	8000a5a <_malloc_r+0x22>
 8000af2:	6862      	ldr	r2, [r4, #4]
 8000af4:	42a3      	cmp	r3, r4
 8000af6:	bf0c      	ite	eq
 8000af8:	6032      	streq	r2, [r6, #0]
 8000afa:	605a      	strne	r2, [r3, #4]
 8000afc:	e7ec      	b.n	8000ad8 <_malloc_r+0xa0>
 8000afe:	4623      	mov	r3, r4
 8000b00:	6864      	ldr	r4, [r4, #4]
 8000b02:	e7b2      	b.n	8000a6a <_malloc_r+0x32>
 8000b04:	4634      	mov	r4, r6
 8000b06:	6876      	ldr	r6, [r6, #4]
 8000b08:	e7b9      	b.n	8000a7e <_malloc_r+0x46>
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4638      	mov	r0, r7
 8000b10:	f000 fd64 	bl	80015dc <__malloc_unlock>
 8000b14:	e7a1      	b.n	8000a5a <_malloc_r+0x22>
 8000b16:	6025      	str	r5, [r4, #0]
 8000b18:	e7de      	b.n	8000ad8 <_malloc_r+0xa0>
 8000b1a:	bf00      	nop
 8000b1c:	20000090 	.word	0x20000090

08000b20 <__sfputc_r>:
 8000b20:	6893      	ldr	r3, [r2, #8]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	b410      	push	{r4}
 8000b28:	6093      	str	r3, [r2, #8]
 8000b2a:	da07      	bge.n	8000b3c <__sfputc_r+0x1c>
 8000b2c:	6994      	ldr	r4, [r2, #24]
 8000b2e:	42a3      	cmp	r3, r4
 8000b30:	db01      	blt.n	8000b36 <__sfputc_r+0x16>
 8000b32:	290a      	cmp	r1, #10
 8000b34:	d102      	bne.n	8000b3c <__sfputc_r+0x1c>
 8000b36:	bc10      	pop	{r4}
 8000b38:	f000 bb32 	b.w	80011a0 <__swbuf_r>
 8000b3c:	6813      	ldr	r3, [r2, #0]
 8000b3e:	1c58      	adds	r0, r3, #1
 8000b40:	6010      	str	r0, [r2, #0]
 8000b42:	7019      	strb	r1, [r3, #0]
 8000b44:	4608      	mov	r0, r1
 8000b46:	bc10      	pop	{r4}
 8000b48:	4770      	bx	lr

08000b4a <__sfputs_r>:
 8000b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4c:	4606      	mov	r6, r0
 8000b4e:	460f      	mov	r7, r1
 8000b50:	4614      	mov	r4, r2
 8000b52:	18d5      	adds	r5, r2, r3
 8000b54:	42ac      	cmp	r4, r5
 8000b56:	d101      	bne.n	8000b5c <__sfputs_r+0x12>
 8000b58:	2000      	movs	r0, #0
 8000b5a:	e007      	b.n	8000b6c <__sfputs_r+0x22>
 8000b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b60:	463a      	mov	r2, r7
 8000b62:	4630      	mov	r0, r6
 8000b64:	f7ff ffdc 	bl	8000b20 <__sfputc_r>
 8000b68:	1c43      	adds	r3, r0, #1
 8000b6a:	d1f3      	bne.n	8000b54 <__sfputs_r+0xa>
 8000b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b70 <_vfiprintf_r>:
 8000b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b74:	460d      	mov	r5, r1
 8000b76:	b09d      	sub	sp, #116	; 0x74
 8000b78:	4614      	mov	r4, r2
 8000b7a:	4698      	mov	r8, r3
 8000b7c:	4606      	mov	r6, r0
 8000b7e:	b118      	cbz	r0, 8000b88 <_vfiprintf_r+0x18>
 8000b80:	6983      	ldr	r3, [r0, #24]
 8000b82:	b90b      	cbnz	r3, 8000b88 <_vfiprintf_r+0x18>
 8000b84:	f7ff fe98 	bl	80008b8 <__sinit>
 8000b88:	4b89      	ldr	r3, [pc, #548]	; (8000db0 <_vfiprintf_r+0x240>)
 8000b8a:	429d      	cmp	r5, r3
 8000b8c:	d11b      	bne.n	8000bc6 <_vfiprintf_r+0x56>
 8000b8e:	6875      	ldr	r5, [r6, #4]
 8000b90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b92:	07d9      	lsls	r1, r3, #31
 8000b94:	d405      	bmi.n	8000ba2 <_vfiprintf_r+0x32>
 8000b96:	89ab      	ldrh	r3, [r5, #12]
 8000b98:	059a      	lsls	r2, r3, #22
 8000b9a:	d402      	bmi.n	8000ba2 <_vfiprintf_r+0x32>
 8000b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b9e:	f7ff ff29 	bl	80009f4 <__retarget_lock_acquire_recursive>
 8000ba2:	89ab      	ldrh	r3, [r5, #12]
 8000ba4:	071b      	lsls	r3, r3, #28
 8000ba6:	d501      	bpl.n	8000bac <_vfiprintf_r+0x3c>
 8000ba8:	692b      	ldr	r3, [r5, #16]
 8000baa:	b9eb      	cbnz	r3, 8000be8 <_vfiprintf_r+0x78>
 8000bac:	4629      	mov	r1, r5
 8000bae:	4630      	mov	r0, r6
 8000bb0:	f000 fb5a 	bl	8001268 <__swsetup_r>
 8000bb4:	b1c0      	cbz	r0, 8000be8 <_vfiprintf_r+0x78>
 8000bb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bb8:	07dc      	lsls	r4, r3, #31
 8000bba:	d50e      	bpl.n	8000bda <_vfiprintf_r+0x6a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	b01d      	add	sp, #116	; 0x74
 8000bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bc6:	4b7b      	ldr	r3, [pc, #492]	; (8000db4 <_vfiprintf_r+0x244>)
 8000bc8:	429d      	cmp	r5, r3
 8000bca:	d101      	bne.n	8000bd0 <_vfiprintf_r+0x60>
 8000bcc:	68b5      	ldr	r5, [r6, #8]
 8000bce:	e7df      	b.n	8000b90 <_vfiprintf_r+0x20>
 8000bd0:	4b79      	ldr	r3, [pc, #484]	; (8000db8 <_vfiprintf_r+0x248>)
 8000bd2:	429d      	cmp	r5, r3
 8000bd4:	bf08      	it	eq
 8000bd6:	68f5      	ldreq	r5, [r6, #12]
 8000bd8:	e7da      	b.n	8000b90 <_vfiprintf_r+0x20>
 8000bda:	89ab      	ldrh	r3, [r5, #12]
 8000bdc:	0598      	lsls	r0, r3, #22
 8000bde:	d4ed      	bmi.n	8000bbc <_vfiprintf_r+0x4c>
 8000be0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000be2:	f7ff ff08 	bl	80009f6 <__retarget_lock_release_recursive>
 8000be6:	e7e9      	b.n	8000bbc <_vfiprintf_r+0x4c>
 8000be8:	2300      	movs	r3, #0
 8000bea:	9309      	str	r3, [sp, #36]	; 0x24
 8000bec:	2320      	movs	r3, #32
 8000bee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000bf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bf6:	2330      	movs	r3, #48	; 0x30
 8000bf8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000dbc <_vfiprintf_r+0x24c>
 8000bfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c00:	f04f 0901 	mov.w	r9, #1
 8000c04:	4623      	mov	r3, r4
 8000c06:	469a      	mov	sl, r3
 8000c08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c0c:	b10a      	cbz	r2, 8000c12 <_vfiprintf_r+0xa2>
 8000c0e:	2a25      	cmp	r2, #37	; 0x25
 8000c10:	d1f9      	bne.n	8000c06 <_vfiprintf_r+0x96>
 8000c12:	ebba 0b04 	subs.w	fp, sl, r4
 8000c16:	d00b      	beq.n	8000c30 <_vfiprintf_r+0xc0>
 8000c18:	465b      	mov	r3, fp
 8000c1a:	4622      	mov	r2, r4
 8000c1c:	4629      	mov	r1, r5
 8000c1e:	4630      	mov	r0, r6
 8000c20:	f7ff ff93 	bl	8000b4a <__sfputs_r>
 8000c24:	3001      	adds	r0, #1
 8000c26:	f000 80aa 	beq.w	8000d7e <_vfiprintf_r+0x20e>
 8000c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c2c:	445a      	add	r2, fp
 8000c2e:	9209      	str	r2, [sp, #36]	; 0x24
 8000c30:	f89a 3000 	ldrb.w	r3, [sl]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f000 80a2 	beq.w	8000d7e <_vfiprintf_r+0x20e>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c44:	f10a 0a01 	add.w	sl, sl, #1
 8000c48:	9304      	str	r3, [sp, #16]
 8000c4a:	9307      	str	r3, [sp, #28]
 8000c4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c50:	931a      	str	r3, [sp, #104]	; 0x68
 8000c52:	4654      	mov	r4, sl
 8000c54:	2205      	movs	r2, #5
 8000c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c5a:	4858      	ldr	r0, [pc, #352]	; (8000dbc <_vfiprintf_r+0x24c>)
 8000c5c:	f7ff fad8 	bl	8000210 <memchr>
 8000c60:	9a04      	ldr	r2, [sp, #16]
 8000c62:	b9d8      	cbnz	r0, 8000c9c <_vfiprintf_r+0x12c>
 8000c64:	06d1      	lsls	r1, r2, #27
 8000c66:	bf44      	itt	mi
 8000c68:	2320      	movmi	r3, #32
 8000c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c6e:	0713      	lsls	r3, r2, #28
 8000c70:	bf44      	itt	mi
 8000c72:	232b      	movmi	r3, #43	; 0x2b
 8000c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c78:	f89a 3000 	ldrb.w	r3, [sl]
 8000c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8000c7e:	d015      	beq.n	8000cac <_vfiprintf_r+0x13c>
 8000c80:	9a07      	ldr	r2, [sp, #28]
 8000c82:	4654      	mov	r4, sl
 8000c84:	2000      	movs	r0, #0
 8000c86:	f04f 0c0a 	mov.w	ip, #10
 8000c8a:	4621      	mov	r1, r4
 8000c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c90:	3b30      	subs	r3, #48	; 0x30
 8000c92:	2b09      	cmp	r3, #9
 8000c94:	d94e      	bls.n	8000d34 <_vfiprintf_r+0x1c4>
 8000c96:	b1b0      	cbz	r0, 8000cc6 <_vfiprintf_r+0x156>
 8000c98:	9207      	str	r2, [sp, #28]
 8000c9a:	e014      	b.n	8000cc6 <_vfiprintf_r+0x156>
 8000c9c:	eba0 0308 	sub.w	r3, r0, r8
 8000ca0:	fa09 f303 	lsl.w	r3, r9, r3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	9304      	str	r3, [sp, #16]
 8000ca8:	46a2      	mov	sl, r4
 8000caa:	e7d2      	b.n	8000c52 <_vfiprintf_r+0xe2>
 8000cac:	9b03      	ldr	r3, [sp, #12]
 8000cae:	1d19      	adds	r1, r3, #4
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	9103      	str	r1, [sp, #12]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	bfbb      	ittet	lt
 8000cb8:	425b      	neglt	r3, r3
 8000cba:	f042 0202 	orrlt.w	r2, r2, #2
 8000cbe:	9307      	strge	r3, [sp, #28]
 8000cc0:	9307      	strlt	r3, [sp, #28]
 8000cc2:	bfb8      	it	lt
 8000cc4:	9204      	strlt	r2, [sp, #16]
 8000cc6:	7823      	ldrb	r3, [r4, #0]
 8000cc8:	2b2e      	cmp	r3, #46	; 0x2e
 8000cca:	d10c      	bne.n	8000ce6 <_vfiprintf_r+0x176>
 8000ccc:	7863      	ldrb	r3, [r4, #1]
 8000cce:	2b2a      	cmp	r3, #42	; 0x2a
 8000cd0:	d135      	bne.n	8000d3e <_vfiprintf_r+0x1ce>
 8000cd2:	9b03      	ldr	r3, [sp, #12]
 8000cd4:	1d1a      	adds	r2, r3, #4
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	9203      	str	r2, [sp, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bfb8      	it	lt
 8000cde:	f04f 33ff 	movlt.w	r3, #4294967295
 8000ce2:	3402      	adds	r4, #2
 8000ce4:	9305      	str	r3, [sp, #20]
 8000ce6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8000dc0 <_vfiprintf_r+0x250>
 8000cea:	7821      	ldrb	r1, [r4, #0]
 8000cec:	2203      	movs	r2, #3
 8000cee:	4650      	mov	r0, sl
 8000cf0:	f7ff fa8e 	bl	8000210 <memchr>
 8000cf4:	b140      	cbz	r0, 8000d08 <_vfiprintf_r+0x198>
 8000cf6:	2340      	movs	r3, #64	; 0x40
 8000cf8:	eba0 000a 	sub.w	r0, r0, sl
 8000cfc:	fa03 f000 	lsl.w	r0, r3, r0
 8000d00:	9b04      	ldr	r3, [sp, #16]
 8000d02:	4303      	orrs	r3, r0
 8000d04:	3401      	adds	r4, #1
 8000d06:	9304      	str	r3, [sp, #16]
 8000d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d0c:	482d      	ldr	r0, [pc, #180]	; (8000dc4 <_vfiprintf_r+0x254>)
 8000d0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d12:	2206      	movs	r2, #6
 8000d14:	f7ff fa7c 	bl	8000210 <memchr>
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	d03f      	beq.n	8000d9c <_vfiprintf_r+0x22c>
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <_vfiprintf_r+0x258>)
 8000d1e:	bb1b      	cbnz	r3, 8000d68 <_vfiprintf_r+0x1f8>
 8000d20:	9b03      	ldr	r3, [sp, #12]
 8000d22:	3307      	adds	r3, #7
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	3308      	adds	r3, #8
 8000d2a:	9303      	str	r3, [sp, #12]
 8000d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d2e:	443b      	add	r3, r7
 8000d30:	9309      	str	r3, [sp, #36]	; 0x24
 8000d32:	e767      	b.n	8000c04 <_vfiprintf_r+0x94>
 8000d34:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d38:	460c      	mov	r4, r1
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	e7a5      	b.n	8000c8a <_vfiprintf_r+0x11a>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	3401      	adds	r4, #1
 8000d42:	9305      	str	r3, [sp, #20]
 8000d44:	4619      	mov	r1, r3
 8000d46:	f04f 0c0a 	mov.w	ip, #10
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d50:	3a30      	subs	r2, #48	; 0x30
 8000d52:	2a09      	cmp	r2, #9
 8000d54:	d903      	bls.n	8000d5e <_vfiprintf_r+0x1ee>
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0c5      	beq.n	8000ce6 <_vfiprintf_r+0x176>
 8000d5a:	9105      	str	r1, [sp, #20]
 8000d5c:	e7c3      	b.n	8000ce6 <_vfiprintf_r+0x176>
 8000d5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d62:	4604      	mov	r4, r0
 8000d64:	2301      	movs	r3, #1
 8000d66:	e7f0      	b.n	8000d4a <_vfiprintf_r+0x1da>
 8000d68:	ab03      	add	r3, sp, #12
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	462a      	mov	r2, r5
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <_vfiprintf_r+0x25c>)
 8000d70:	a904      	add	r1, sp, #16
 8000d72:	4630      	mov	r0, r6
 8000d74:	f3af 8000 	nop.w
 8000d78:	4607      	mov	r7, r0
 8000d7a:	1c78      	adds	r0, r7, #1
 8000d7c:	d1d6      	bne.n	8000d2c <_vfiprintf_r+0x1bc>
 8000d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d80:	07d9      	lsls	r1, r3, #31
 8000d82:	d405      	bmi.n	8000d90 <_vfiprintf_r+0x220>
 8000d84:	89ab      	ldrh	r3, [r5, #12]
 8000d86:	059a      	lsls	r2, r3, #22
 8000d88:	d402      	bmi.n	8000d90 <_vfiprintf_r+0x220>
 8000d8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d8c:	f7ff fe33 	bl	80009f6 <__retarget_lock_release_recursive>
 8000d90:	89ab      	ldrh	r3, [r5, #12]
 8000d92:	065b      	lsls	r3, r3, #25
 8000d94:	f53f af12 	bmi.w	8000bbc <_vfiprintf_r+0x4c>
 8000d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d9a:	e711      	b.n	8000bc0 <_vfiprintf_r+0x50>
 8000d9c:	ab03      	add	r3, sp, #12
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	462a      	mov	r2, r5
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <_vfiprintf_r+0x25c>)
 8000da4:	a904      	add	r1, sp, #16
 8000da6:	4630      	mov	r0, r6
 8000da8:	f000 f880 	bl	8000eac <_printf_i>
 8000dac:	e7e4      	b.n	8000d78 <_vfiprintf_r+0x208>
 8000dae:	bf00      	nop
 8000db0:	08001728 	.word	0x08001728
 8000db4:	08001748 	.word	0x08001748
 8000db8:	08001708 	.word	0x08001708
 8000dbc:	08001768 	.word	0x08001768
 8000dc0:	0800176e 	.word	0x0800176e
 8000dc4:	08001772 	.word	0x08001772
 8000dc8:	00000000 	.word	0x00000000
 8000dcc:	08000b4b 	.word	0x08000b4b

08000dd0 <_printf_common>:
 8000dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd4:	4616      	mov	r6, r2
 8000dd6:	4699      	mov	r9, r3
 8000dd8:	688a      	ldr	r2, [r1, #8]
 8000dda:	690b      	ldr	r3, [r1, #16]
 8000ddc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000de0:	4293      	cmp	r3, r2
 8000de2:	bfb8      	it	lt
 8000de4:	4613      	movlt	r3, r2
 8000de6:	6033      	str	r3, [r6, #0]
 8000de8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000dec:	4607      	mov	r7, r0
 8000dee:	460c      	mov	r4, r1
 8000df0:	b10a      	cbz	r2, 8000df6 <_printf_common+0x26>
 8000df2:	3301      	adds	r3, #1
 8000df4:	6033      	str	r3, [r6, #0]
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	0699      	lsls	r1, r3, #26
 8000dfa:	bf42      	ittt	mi
 8000dfc:	6833      	ldrmi	r3, [r6, #0]
 8000dfe:	3302      	addmi	r3, #2
 8000e00:	6033      	strmi	r3, [r6, #0]
 8000e02:	6825      	ldr	r5, [r4, #0]
 8000e04:	f015 0506 	ands.w	r5, r5, #6
 8000e08:	d106      	bne.n	8000e18 <_printf_common+0x48>
 8000e0a:	f104 0a19 	add.w	sl, r4, #25
 8000e0e:	68e3      	ldr	r3, [r4, #12]
 8000e10:	6832      	ldr	r2, [r6, #0]
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	42ab      	cmp	r3, r5
 8000e16:	dc26      	bgt.n	8000e66 <_printf_common+0x96>
 8000e18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e1c:	1e13      	subs	r3, r2, #0
 8000e1e:	6822      	ldr	r2, [r4, #0]
 8000e20:	bf18      	it	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	0692      	lsls	r2, r2, #26
 8000e26:	d42b      	bmi.n	8000e80 <_printf_common+0xb0>
 8000e28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e2c:	4649      	mov	r1, r9
 8000e2e:	4638      	mov	r0, r7
 8000e30:	47c0      	blx	r8
 8000e32:	3001      	adds	r0, #1
 8000e34:	d01e      	beq.n	8000e74 <_printf_common+0xa4>
 8000e36:	6823      	ldr	r3, [r4, #0]
 8000e38:	68e5      	ldr	r5, [r4, #12]
 8000e3a:	6832      	ldr	r2, [r6, #0]
 8000e3c:	f003 0306 	and.w	r3, r3, #6
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	bf08      	it	eq
 8000e44:	1aad      	subeq	r5, r5, r2
 8000e46:	68a3      	ldr	r3, [r4, #8]
 8000e48:	6922      	ldr	r2, [r4, #16]
 8000e4a:	bf0c      	ite	eq
 8000e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e50:	2500      	movne	r5, #0
 8000e52:	4293      	cmp	r3, r2
 8000e54:	bfc4      	itt	gt
 8000e56:	1a9b      	subgt	r3, r3, r2
 8000e58:	18ed      	addgt	r5, r5, r3
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	341a      	adds	r4, #26
 8000e5e:	42b5      	cmp	r5, r6
 8000e60:	d11a      	bne.n	8000e98 <_printf_common+0xc8>
 8000e62:	2000      	movs	r0, #0
 8000e64:	e008      	b.n	8000e78 <_printf_common+0xa8>
 8000e66:	2301      	movs	r3, #1
 8000e68:	4652      	mov	r2, sl
 8000e6a:	4649      	mov	r1, r9
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	47c0      	blx	r8
 8000e70:	3001      	adds	r0, #1
 8000e72:	d103      	bne.n	8000e7c <_printf_common+0xac>
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7c:	3501      	adds	r5, #1
 8000e7e:	e7c6      	b.n	8000e0e <_printf_common+0x3e>
 8000e80:	18e1      	adds	r1, r4, r3
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	2030      	movs	r0, #48	; 0x30
 8000e86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e8a:	4422      	add	r2, r4
 8000e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e94:	3302      	adds	r3, #2
 8000e96:	e7c7      	b.n	8000e28 <_printf_common+0x58>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	4622      	mov	r2, r4
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	4638      	mov	r0, r7
 8000ea0:	47c0      	blx	r8
 8000ea2:	3001      	adds	r0, #1
 8000ea4:	d0e6      	beq.n	8000e74 <_printf_common+0xa4>
 8000ea6:	3601      	adds	r6, #1
 8000ea8:	e7d9      	b.n	8000e5e <_printf_common+0x8e>
	...

08000eac <_printf_i>:
 8000eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb0:	7e0f      	ldrb	r7, [r1, #24]
 8000eb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000eb4:	2f78      	cmp	r7, #120	; 0x78
 8000eb6:	4691      	mov	r9, r2
 8000eb8:	4680      	mov	r8, r0
 8000eba:	460c      	mov	r4, r1
 8000ebc:	469a      	mov	sl, r3
 8000ebe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000ec2:	d807      	bhi.n	8000ed4 <_printf_i+0x28>
 8000ec4:	2f62      	cmp	r7, #98	; 0x62
 8000ec6:	d80a      	bhi.n	8000ede <_printf_i+0x32>
 8000ec8:	2f00      	cmp	r7, #0
 8000eca:	f000 80d8 	beq.w	800107e <_printf_i+0x1d2>
 8000ece:	2f58      	cmp	r7, #88	; 0x58
 8000ed0:	f000 80a3 	beq.w	800101a <_printf_i+0x16e>
 8000ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ed8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000edc:	e03a      	b.n	8000f54 <_printf_i+0xa8>
 8000ede:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ee2:	2b15      	cmp	r3, #21
 8000ee4:	d8f6      	bhi.n	8000ed4 <_printf_i+0x28>
 8000ee6:	a101      	add	r1, pc, #4	; (adr r1, 8000eec <_printf_i+0x40>)
 8000ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000eec:	08000f45 	.word	0x08000f45
 8000ef0:	08000f59 	.word	0x08000f59
 8000ef4:	08000ed5 	.word	0x08000ed5
 8000ef8:	08000ed5 	.word	0x08000ed5
 8000efc:	08000ed5 	.word	0x08000ed5
 8000f00:	08000ed5 	.word	0x08000ed5
 8000f04:	08000f59 	.word	0x08000f59
 8000f08:	08000ed5 	.word	0x08000ed5
 8000f0c:	08000ed5 	.word	0x08000ed5
 8000f10:	08000ed5 	.word	0x08000ed5
 8000f14:	08000ed5 	.word	0x08000ed5
 8000f18:	08001065 	.word	0x08001065
 8000f1c:	08000f89 	.word	0x08000f89
 8000f20:	08001047 	.word	0x08001047
 8000f24:	08000ed5 	.word	0x08000ed5
 8000f28:	08000ed5 	.word	0x08000ed5
 8000f2c:	08001087 	.word	0x08001087
 8000f30:	08000ed5 	.word	0x08000ed5
 8000f34:	08000f89 	.word	0x08000f89
 8000f38:	08000ed5 	.word	0x08000ed5
 8000f3c:	08000ed5 	.word	0x08000ed5
 8000f40:	0800104f 	.word	0x0800104f
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	1d1a      	adds	r2, r3, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	602a      	str	r2, [r5, #0]
 8000f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f54:	2301      	movs	r3, #1
 8000f56:	e0a3      	b.n	80010a0 <_printf_i+0x1f4>
 8000f58:	6820      	ldr	r0, [r4, #0]
 8000f5a:	6829      	ldr	r1, [r5, #0]
 8000f5c:	0606      	lsls	r6, r0, #24
 8000f5e:	f101 0304 	add.w	r3, r1, #4
 8000f62:	d50a      	bpl.n	8000f7a <_printf_i+0xce>
 8000f64:	680e      	ldr	r6, [r1, #0]
 8000f66:	602b      	str	r3, [r5, #0]
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	da03      	bge.n	8000f74 <_printf_i+0xc8>
 8000f6c:	232d      	movs	r3, #45	; 0x2d
 8000f6e:	4276      	negs	r6, r6
 8000f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f74:	485e      	ldr	r0, [pc, #376]	; (80010f0 <_printf_i+0x244>)
 8000f76:	230a      	movs	r3, #10
 8000f78:	e019      	b.n	8000fae <_printf_i+0x102>
 8000f7a:	680e      	ldr	r6, [r1, #0]
 8000f7c:	602b      	str	r3, [r5, #0]
 8000f7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000f82:	bf18      	it	ne
 8000f84:	b236      	sxthne	r6, r6
 8000f86:	e7ef      	b.n	8000f68 <_printf_i+0xbc>
 8000f88:	682b      	ldr	r3, [r5, #0]
 8000f8a:	6820      	ldr	r0, [r4, #0]
 8000f8c:	1d19      	adds	r1, r3, #4
 8000f8e:	6029      	str	r1, [r5, #0]
 8000f90:	0601      	lsls	r1, r0, #24
 8000f92:	d501      	bpl.n	8000f98 <_printf_i+0xec>
 8000f94:	681e      	ldr	r6, [r3, #0]
 8000f96:	e002      	b.n	8000f9e <_printf_i+0xf2>
 8000f98:	0646      	lsls	r6, r0, #25
 8000f9a:	d5fb      	bpl.n	8000f94 <_printf_i+0xe8>
 8000f9c:	881e      	ldrh	r6, [r3, #0]
 8000f9e:	4854      	ldr	r0, [pc, #336]	; (80010f0 <_printf_i+0x244>)
 8000fa0:	2f6f      	cmp	r7, #111	; 0x6f
 8000fa2:	bf0c      	ite	eq
 8000fa4:	2308      	moveq	r3, #8
 8000fa6:	230a      	movne	r3, #10
 8000fa8:	2100      	movs	r1, #0
 8000faa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000fae:	6865      	ldr	r5, [r4, #4]
 8000fb0:	60a5      	str	r5, [r4, #8]
 8000fb2:	2d00      	cmp	r5, #0
 8000fb4:	bfa2      	ittt	ge
 8000fb6:	6821      	ldrge	r1, [r4, #0]
 8000fb8:	f021 0104 	bicge.w	r1, r1, #4
 8000fbc:	6021      	strge	r1, [r4, #0]
 8000fbe:	b90e      	cbnz	r6, 8000fc4 <_printf_i+0x118>
 8000fc0:	2d00      	cmp	r5, #0
 8000fc2:	d04d      	beq.n	8001060 <_printf_i+0x1b4>
 8000fc4:	4615      	mov	r5, r2
 8000fc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8000fca:	fb03 6711 	mls	r7, r3, r1, r6
 8000fce:	5dc7      	ldrb	r7, [r0, r7]
 8000fd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000fd4:	4637      	mov	r7, r6
 8000fd6:	42bb      	cmp	r3, r7
 8000fd8:	460e      	mov	r6, r1
 8000fda:	d9f4      	bls.n	8000fc6 <_printf_i+0x11a>
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	d10b      	bne.n	8000ff8 <_printf_i+0x14c>
 8000fe0:	6823      	ldr	r3, [r4, #0]
 8000fe2:	07de      	lsls	r6, r3, #31
 8000fe4:	d508      	bpl.n	8000ff8 <_printf_i+0x14c>
 8000fe6:	6923      	ldr	r3, [r4, #16]
 8000fe8:	6861      	ldr	r1, [r4, #4]
 8000fea:	4299      	cmp	r1, r3
 8000fec:	bfde      	ittt	le
 8000fee:	2330      	movle	r3, #48	; 0x30
 8000ff0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000ff4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000ff8:	1b52      	subs	r2, r2, r5
 8000ffa:	6122      	str	r2, [r4, #16]
 8000ffc:	f8cd a000 	str.w	sl, [sp]
 8001000:	464b      	mov	r3, r9
 8001002:	aa03      	add	r2, sp, #12
 8001004:	4621      	mov	r1, r4
 8001006:	4640      	mov	r0, r8
 8001008:	f7ff fee2 	bl	8000dd0 <_printf_common>
 800100c:	3001      	adds	r0, #1
 800100e:	d14c      	bne.n	80010aa <_printf_i+0x1fe>
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	b004      	add	sp, #16
 8001016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101a:	4835      	ldr	r0, [pc, #212]	; (80010f0 <_printf_i+0x244>)
 800101c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001020:	6829      	ldr	r1, [r5, #0]
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	f851 6b04 	ldr.w	r6, [r1], #4
 8001028:	6029      	str	r1, [r5, #0]
 800102a:	061d      	lsls	r5, r3, #24
 800102c:	d514      	bpl.n	8001058 <_printf_i+0x1ac>
 800102e:	07df      	lsls	r7, r3, #31
 8001030:	bf44      	itt	mi
 8001032:	f043 0320 	orrmi.w	r3, r3, #32
 8001036:	6023      	strmi	r3, [r4, #0]
 8001038:	b91e      	cbnz	r6, 8001042 <_printf_i+0x196>
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	f023 0320 	bic.w	r3, r3, #32
 8001040:	6023      	str	r3, [r4, #0]
 8001042:	2310      	movs	r3, #16
 8001044:	e7b0      	b.n	8000fa8 <_printf_i+0xfc>
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	f043 0320 	orr.w	r3, r3, #32
 800104c:	6023      	str	r3, [r4, #0]
 800104e:	2378      	movs	r3, #120	; 0x78
 8001050:	4828      	ldr	r0, [pc, #160]	; (80010f4 <_printf_i+0x248>)
 8001052:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001056:	e7e3      	b.n	8001020 <_printf_i+0x174>
 8001058:	0659      	lsls	r1, r3, #25
 800105a:	bf48      	it	mi
 800105c:	b2b6      	uxthmi	r6, r6
 800105e:	e7e6      	b.n	800102e <_printf_i+0x182>
 8001060:	4615      	mov	r5, r2
 8001062:	e7bb      	b.n	8000fdc <_printf_i+0x130>
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	6826      	ldr	r6, [r4, #0]
 8001068:	6961      	ldr	r1, [r4, #20]
 800106a:	1d18      	adds	r0, r3, #4
 800106c:	6028      	str	r0, [r5, #0]
 800106e:	0635      	lsls	r5, r6, #24
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	d501      	bpl.n	8001078 <_printf_i+0x1cc>
 8001074:	6019      	str	r1, [r3, #0]
 8001076:	e002      	b.n	800107e <_printf_i+0x1d2>
 8001078:	0670      	lsls	r0, r6, #25
 800107a:	d5fb      	bpl.n	8001074 <_printf_i+0x1c8>
 800107c:	8019      	strh	r1, [r3, #0]
 800107e:	2300      	movs	r3, #0
 8001080:	6123      	str	r3, [r4, #16]
 8001082:	4615      	mov	r5, r2
 8001084:	e7ba      	b.n	8000ffc <_printf_i+0x150>
 8001086:	682b      	ldr	r3, [r5, #0]
 8001088:	1d1a      	adds	r2, r3, #4
 800108a:	602a      	str	r2, [r5, #0]
 800108c:	681d      	ldr	r5, [r3, #0]
 800108e:	6862      	ldr	r2, [r4, #4]
 8001090:	2100      	movs	r1, #0
 8001092:	4628      	mov	r0, r5
 8001094:	f7ff f8bc 	bl	8000210 <memchr>
 8001098:	b108      	cbz	r0, 800109e <_printf_i+0x1f2>
 800109a:	1b40      	subs	r0, r0, r5
 800109c:	6060      	str	r0, [r4, #4]
 800109e:	6863      	ldr	r3, [r4, #4]
 80010a0:	6123      	str	r3, [r4, #16]
 80010a2:	2300      	movs	r3, #0
 80010a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010a8:	e7a8      	b.n	8000ffc <_printf_i+0x150>
 80010aa:	6923      	ldr	r3, [r4, #16]
 80010ac:	462a      	mov	r2, r5
 80010ae:	4649      	mov	r1, r9
 80010b0:	4640      	mov	r0, r8
 80010b2:	47d0      	blx	sl
 80010b4:	3001      	adds	r0, #1
 80010b6:	d0ab      	beq.n	8001010 <_printf_i+0x164>
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	079b      	lsls	r3, r3, #30
 80010bc:	d413      	bmi.n	80010e6 <_printf_i+0x23a>
 80010be:	68e0      	ldr	r0, [r4, #12]
 80010c0:	9b03      	ldr	r3, [sp, #12]
 80010c2:	4298      	cmp	r0, r3
 80010c4:	bfb8      	it	lt
 80010c6:	4618      	movlt	r0, r3
 80010c8:	e7a4      	b.n	8001014 <_printf_i+0x168>
 80010ca:	2301      	movs	r3, #1
 80010cc:	4632      	mov	r2, r6
 80010ce:	4649      	mov	r1, r9
 80010d0:	4640      	mov	r0, r8
 80010d2:	47d0      	blx	sl
 80010d4:	3001      	adds	r0, #1
 80010d6:	d09b      	beq.n	8001010 <_printf_i+0x164>
 80010d8:	3501      	adds	r5, #1
 80010da:	68e3      	ldr	r3, [r4, #12]
 80010dc:	9903      	ldr	r1, [sp, #12]
 80010de:	1a5b      	subs	r3, r3, r1
 80010e0:	42ab      	cmp	r3, r5
 80010e2:	dcf2      	bgt.n	80010ca <_printf_i+0x21e>
 80010e4:	e7eb      	b.n	80010be <_printf_i+0x212>
 80010e6:	2500      	movs	r5, #0
 80010e8:	f104 0619 	add.w	r6, r4, #25
 80010ec:	e7f5      	b.n	80010da <_printf_i+0x22e>
 80010ee:	bf00      	nop
 80010f0:	08001779 	.word	0x08001779
 80010f4:	0800178a 	.word	0x0800178a

080010f8 <_sbrk_r>:
 80010f8:	b538      	push	{r3, r4, r5, lr}
 80010fa:	4d06      	ldr	r5, [pc, #24]	; (8001114 <_sbrk_r+0x1c>)
 80010fc:	2300      	movs	r3, #0
 80010fe:	4604      	mov	r4, r0
 8001100:	4608      	mov	r0, r1
 8001102:	602b      	str	r3, [r5, #0]
 8001104:	f7ff fad6 	bl	80006b4 <_sbrk>
 8001108:	1c43      	adds	r3, r0, #1
 800110a:	d102      	bne.n	8001112 <_sbrk_r+0x1a>
 800110c:	682b      	ldr	r3, [r5, #0]
 800110e:	b103      	cbz	r3, 8001112 <_sbrk_r+0x1a>
 8001110:	6023      	str	r3, [r4, #0]
 8001112:	bd38      	pop	{r3, r4, r5, pc}
 8001114:	20000098 	.word	0x20000098

08001118 <__sread>:
 8001118:	b510      	push	{r4, lr}
 800111a:	460c      	mov	r4, r1
 800111c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001120:	f000 faac 	bl	800167c <_read_r>
 8001124:	2800      	cmp	r0, #0
 8001126:	bfab      	itete	ge
 8001128:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800112a:	89a3      	ldrhlt	r3, [r4, #12]
 800112c:	181b      	addge	r3, r3, r0
 800112e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001132:	bfac      	ite	ge
 8001134:	6563      	strge	r3, [r4, #84]	; 0x54
 8001136:	81a3      	strhlt	r3, [r4, #12]
 8001138:	bd10      	pop	{r4, pc}

0800113a <__swrite>:
 800113a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800113e:	461f      	mov	r7, r3
 8001140:	898b      	ldrh	r3, [r1, #12]
 8001142:	05db      	lsls	r3, r3, #23
 8001144:	4605      	mov	r5, r0
 8001146:	460c      	mov	r4, r1
 8001148:	4616      	mov	r6, r2
 800114a:	d505      	bpl.n	8001158 <__swrite+0x1e>
 800114c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001150:	2302      	movs	r3, #2
 8001152:	2200      	movs	r2, #0
 8001154:	f000 f9c4 	bl	80014e0 <_lseek_r>
 8001158:	89a3      	ldrh	r3, [r4, #12]
 800115a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800115e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001162:	81a3      	strh	r3, [r4, #12]
 8001164:	4632      	mov	r2, r6
 8001166:	463b      	mov	r3, r7
 8001168:	4628      	mov	r0, r5
 800116a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800116e:	f000 b869 	b.w	8001244 <_write_r>

08001172 <__sseek>:
 8001172:	b510      	push	{r4, lr}
 8001174:	460c      	mov	r4, r1
 8001176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800117a:	f000 f9b1 	bl	80014e0 <_lseek_r>
 800117e:	1c43      	adds	r3, r0, #1
 8001180:	89a3      	ldrh	r3, [r4, #12]
 8001182:	bf15      	itete	ne
 8001184:	6560      	strne	r0, [r4, #84]	; 0x54
 8001186:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800118a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800118e:	81a3      	strheq	r3, [r4, #12]
 8001190:	bf18      	it	ne
 8001192:	81a3      	strhne	r3, [r4, #12]
 8001194:	bd10      	pop	{r4, pc}

08001196 <__sclose>:
 8001196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800119a:	f000 b8d3 	b.w	8001344 <_close_r>
	...

080011a0 <__swbuf_r>:
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a2:	460e      	mov	r6, r1
 80011a4:	4614      	mov	r4, r2
 80011a6:	4605      	mov	r5, r0
 80011a8:	b118      	cbz	r0, 80011b2 <__swbuf_r+0x12>
 80011aa:	6983      	ldr	r3, [r0, #24]
 80011ac:	b90b      	cbnz	r3, 80011b2 <__swbuf_r+0x12>
 80011ae:	f7ff fb83 	bl	80008b8 <__sinit>
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <__swbuf_r+0x98>)
 80011b4:	429c      	cmp	r4, r3
 80011b6:	d12b      	bne.n	8001210 <__swbuf_r+0x70>
 80011b8:	686c      	ldr	r4, [r5, #4]
 80011ba:	69a3      	ldr	r3, [r4, #24]
 80011bc:	60a3      	str	r3, [r4, #8]
 80011be:	89a3      	ldrh	r3, [r4, #12]
 80011c0:	071a      	lsls	r2, r3, #28
 80011c2:	d52f      	bpl.n	8001224 <__swbuf_r+0x84>
 80011c4:	6923      	ldr	r3, [r4, #16]
 80011c6:	b36b      	cbz	r3, 8001224 <__swbuf_r+0x84>
 80011c8:	6923      	ldr	r3, [r4, #16]
 80011ca:	6820      	ldr	r0, [r4, #0]
 80011cc:	1ac0      	subs	r0, r0, r3
 80011ce:	6963      	ldr	r3, [r4, #20]
 80011d0:	b2f6      	uxtb	r6, r6
 80011d2:	4283      	cmp	r3, r0
 80011d4:	4637      	mov	r7, r6
 80011d6:	dc04      	bgt.n	80011e2 <__swbuf_r+0x42>
 80011d8:	4621      	mov	r1, r4
 80011da:	4628      	mov	r0, r5
 80011dc:	f000 f944 	bl	8001468 <_fflush_r>
 80011e0:	bb30      	cbnz	r0, 8001230 <__swbuf_r+0x90>
 80011e2:	68a3      	ldr	r3, [r4, #8]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	60a3      	str	r3, [r4, #8]
 80011e8:	6823      	ldr	r3, [r4, #0]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	6022      	str	r2, [r4, #0]
 80011ee:	701e      	strb	r6, [r3, #0]
 80011f0:	6963      	ldr	r3, [r4, #20]
 80011f2:	3001      	adds	r0, #1
 80011f4:	4283      	cmp	r3, r0
 80011f6:	d004      	beq.n	8001202 <__swbuf_r+0x62>
 80011f8:	89a3      	ldrh	r3, [r4, #12]
 80011fa:	07db      	lsls	r3, r3, #31
 80011fc:	d506      	bpl.n	800120c <__swbuf_r+0x6c>
 80011fe:	2e0a      	cmp	r6, #10
 8001200:	d104      	bne.n	800120c <__swbuf_r+0x6c>
 8001202:	4621      	mov	r1, r4
 8001204:	4628      	mov	r0, r5
 8001206:	f000 f92f 	bl	8001468 <_fflush_r>
 800120a:	b988      	cbnz	r0, 8001230 <__swbuf_r+0x90>
 800120c:	4638      	mov	r0, r7
 800120e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <__swbuf_r+0x9c>)
 8001212:	429c      	cmp	r4, r3
 8001214:	d101      	bne.n	800121a <__swbuf_r+0x7a>
 8001216:	68ac      	ldr	r4, [r5, #8]
 8001218:	e7cf      	b.n	80011ba <__swbuf_r+0x1a>
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <__swbuf_r+0xa0>)
 800121c:	429c      	cmp	r4, r3
 800121e:	bf08      	it	eq
 8001220:	68ec      	ldreq	r4, [r5, #12]
 8001222:	e7ca      	b.n	80011ba <__swbuf_r+0x1a>
 8001224:	4621      	mov	r1, r4
 8001226:	4628      	mov	r0, r5
 8001228:	f000 f81e 	bl	8001268 <__swsetup_r>
 800122c:	2800      	cmp	r0, #0
 800122e:	d0cb      	beq.n	80011c8 <__swbuf_r+0x28>
 8001230:	f04f 37ff 	mov.w	r7, #4294967295
 8001234:	e7ea      	b.n	800120c <__swbuf_r+0x6c>
 8001236:	bf00      	nop
 8001238:	08001728 	.word	0x08001728
 800123c:	08001748 	.word	0x08001748
 8001240:	08001708 	.word	0x08001708

08001244 <_write_r>:
 8001244:	b538      	push	{r3, r4, r5, lr}
 8001246:	4d07      	ldr	r5, [pc, #28]	; (8001264 <_write_r+0x20>)
 8001248:	4604      	mov	r4, r0
 800124a:	4608      	mov	r0, r1
 800124c:	4611      	mov	r1, r2
 800124e:	2200      	movs	r2, #0
 8001250:	602a      	str	r2, [r5, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	f7ff f9e1 	bl	800061a <_write>
 8001258:	1c43      	adds	r3, r0, #1
 800125a:	d102      	bne.n	8001262 <_write_r+0x1e>
 800125c:	682b      	ldr	r3, [r5, #0]
 800125e:	b103      	cbz	r3, 8001262 <_write_r+0x1e>
 8001260:	6023      	str	r3, [r4, #0]
 8001262:	bd38      	pop	{r3, r4, r5, pc}
 8001264:	20000098 	.word	0x20000098

08001268 <__swsetup_r>:
 8001268:	4b32      	ldr	r3, [pc, #200]	; (8001334 <__swsetup_r+0xcc>)
 800126a:	b570      	push	{r4, r5, r6, lr}
 800126c:	681d      	ldr	r5, [r3, #0]
 800126e:	4606      	mov	r6, r0
 8001270:	460c      	mov	r4, r1
 8001272:	b125      	cbz	r5, 800127e <__swsetup_r+0x16>
 8001274:	69ab      	ldr	r3, [r5, #24]
 8001276:	b913      	cbnz	r3, 800127e <__swsetup_r+0x16>
 8001278:	4628      	mov	r0, r5
 800127a:	f7ff fb1d 	bl	80008b8 <__sinit>
 800127e:	4b2e      	ldr	r3, [pc, #184]	; (8001338 <__swsetup_r+0xd0>)
 8001280:	429c      	cmp	r4, r3
 8001282:	d10f      	bne.n	80012a4 <__swsetup_r+0x3c>
 8001284:	686c      	ldr	r4, [r5, #4]
 8001286:	89a3      	ldrh	r3, [r4, #12]
 8001288:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800128c:	0719      	lsls	r1, r3, #28
 800128e:	d42c      	bmi.n	80012ea <__swsetup_r+0x82>
 8001290:	06dd      	lsls	r5, r3, #27
 8001292:	d411      	bmi.n	80012b8 <__swsetup_r+0x50>
 8001294:	2309      	movs	r3, #9
 8001296:	6033      	str	r3, [r6, #0]
 8001298:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800129c:	81a3      	strh	r3, [r4, #12]
 800129e:	f04f 30ff 	mov.w	r0, #4294967295
 80012a2:	e03e      	b.n	8001322 <__swsetup_r+0xba>
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <__swsetup_r+0xd4>)
 80012a6:	429c      	cmp	r4, r3
 80012a8:	d101      	bne.n	80012ae <__swsetup_r+0x46>
 80012aa:	68ac      	ldr	r4, [r5, #8]
 80012ac:	e7eb      	b.n	8001286 <__swsetup_r+0x1e>
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <__swsetup_r+0xd8>)
 80012b0:	429c      	cmp	r4, r3
 80012b2:	bf08      	it	eq
 80012b4:	68ec      	ldreq	r4, [r5, #12]
 80012b6:	e7e6      	b.n	8001286 <__swsetup_r+0x1e>
 80012b8:	0758      	lsls	r0, r3, #29
 80012ba:	d512      	bpl.n	80012e2 <__swsetup_r+0x7a>
 80012bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012be:	b141      	cbz	r1, 80012d2 <__swsetup_r+0x6a>
 80012c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012c4:	4299      	cmp	r1, r3
 80012c6:	d002      	beq.n	80012ce <__swsetup_r+0x66>
 80012c8:	4630      	mov	r0, r6
 80012ca:	f000 f98d 	bl	80015e8 <_free_r>
 80012ce:	2300      	movs	r3, #0
 80012d0:	6363      	str	r3, [r4, #52]	; 0x34
 80012d2:	89a3      	ldrh	r3, [r4, #12]
 80012d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012d8:	81a3      	strh	r3, [r4, #12]
 80012da:	2300      	movs	r3, #0
 80012dc:	6063      	str	r3, [r4, #4]
 80012de:	6923      	ldr	r3, [r4, #16]
 80012e0:	6023      	str	r3, [r4, #0]
 80012e2:	89a3      	ldrh	r3, [r4, #12]
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	81a3      	strh	r3, [r4, #12]
 80012ea:	6923      	ldr	r3, [r4, #16]
 80012ec:	b94b      	cbnz	r3, 8001302 <__swsetup_r+0x9a>
 80012ee:	89a3      	ldrh	r3, [r4, #12]
 80012f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012f8:	d003      	beq.n	8001302 <__swsetup_r+0x9a>
 80012fa:	4621      	mov	r1, r4
 80012fc:	4630      	mov	r0, r6
 80012fe:	f000 f927 	bl	8001550 <__smakebuf_r>
 8001302:	89a0      	ldrh	r0, [r4, #12]
 8001304:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001308:	f010 0301 	ands.w	r3, r0, #1
 800130c:	d00a      	beq.n	8001324 <__swsetup_r+0xbc>
 800130e:	2300      	movs	r3, #0
 8001310:	60a3      	str	r3, [r4, #8]
 8001312:	6963      	ldr	r3, [r4, #20]
 8001314:	425b      	negs	r3, r3
 8001316:	61a3      	str	r3, [r4, #24]
 8001318:	6923      	ldr	r3, [r4, #16]
 800131a:	b943      	cbnz	r3, 800132e <__swsetup_r+0xc6>
 800131c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001320:	d1ba      	bne.n	8001298 <__swsetup_r+0x30>
 8001322:	bd70      	pop	{r4, r5, r6, pc}
 8001324:	0781      	lsls	r1, r0, #30
 8001326:	bf58      	it	pl
 8001328:	6963      	ldrpl	r3, [r4, #20]
 800132a:	60a3      	str	r3, [r4, #8]
 800132c:	e7f4      	b.n	8001318 <__swsetup_r+0xb0>
 800132e:	2000      	movs	r0, #0
 8001330:	e7f7      	b.n	8001322 <__swsetup_r+0xba>
 8001332:	bf00      	nop
 8001334:	20000000 	.word	0x20000000
 8001338:	08001728 	.word	0x08001728
 800133c:	08001748 	.word	0x08001748
 8001340:	08001708 	.word	0x08001708

08001344 <_close_r>:
 8001344:	b538      	push	{r3, r4, r5, lr}
 8001346:	4d06      	ldr	r5, [pc, #24]	; (8001360 <_close_r+0x1c>)
 8001348:	2300      	movs	r3, #0
 800134a:	4604      	mov	r4, r0
 800134c:	4608      	mov	r0, r1
 800134e:	602b      	str	r3, [r5, #0]
 8001350:	f7ff f97f 	bl	8000652 <_close>
 8001354:	1c43      	adds	r3, r0, #1
 8001356:	d102      	bne.n	800135e <_close_r+0x1a>
 8001358:	682b      	ldr	r3, [r5, #0]
 800135a:	b103      	cbz	r3, 800135e <_close_r+0x1a>
 800135c:	6023      	str	r3, [r4, #0]
 800135e:	bd38      	pop	{r3, r4, r5, pc}
 8001360:	20000098 	.word	0x20000098

08001364 <__sflush_r>:
 8001364:	898a      	ldrh	r2, [r1, #12]
 8001366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001368:	4605      	mov	r5, r0
 800136a:	0710      	lsls	r0, r2, #28
 800136c:	460c      	mov	r4, r1
 800136e:	d457      	bmi.n	8001420 <__sflush_r+0xbc>
 8001370:	684b      	ldr	r3, [r1, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	dc04      	bgt.n	8001380 <__sflush_r+0x1c>
 8001376:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001378:	2b00      	cmp	r3, #0
 800137a:	dc01      	bgt.n	8001380 <__sflush_r+0x1c>
 800137c:	2000      	movs	r0, #0
 800137e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001382:	2e00      	cmp	r6, #0
 8001384:	d0fa      	beq.n	800137c <__sflush_r+0x18>
 8001386:	2300      	movs	r3, #0
 8001388:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800138c:	682f      	ldr	r7, [r5, #0]
 800138e:	602b      	str	r3, [r5, #0]
 8001390:	d032      	beq.n	80013f8 <__sflush_r+0x94>
 8001392:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001394:	89a3      	ldrh	r3, [r4, #12]
 8001396:	075a      	lsls	r2, r3, #29
 8001398:	d505      	bpl.n	80013a6 <__sflush_r+0x42>
 800139a:	6863      	ldr	r3, [r4, #4]
 800139c:	1ac0      	subs	r0, r0, r3
 800139e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013a0:	b10b      	cbz	r3, 80013a6 <__sflush_r+0x42>
 80013a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013a4:	1ac0      	subs	r0, r0, r3
 80013a6:	2300      	movs	r3, #0
 80013a8:	4602      	mov	r2, r0
 80013aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013ac:	6a21      	ldr	r1, [r4, #32]
 80013ae:	4628      	mov	r0, r5
 80013b0:	47b0      	blx	r6
 80013b2:	1c43      	adds	r3, r0, #1
 80013b4:	89a3      	ldrh	r3, [r4, #12]
 80013b6:	d106      	bne.n	80013c6 <__sflush_r+0x62>
 80013b8:	6829      	ldr	r1, [r5, #0]
 80013ba:	291d      	cmp	r1, #29
 80013bc:	d82c      	bhi.n	8001418 <__sflush_r+0xb4>
 80013be:	4a29      	ldr	r2, [pc, #164]	; (8001464 <__sflush_r+0x100>)
 80013c0:	40ca      	lsrs	r2, r1
 80013c2:	07d6      	lsls	r6, r2, #31
 80013c4:	d528      	bpl.n	8001418 <__sflush_r+0xb4>
 80013c6:	2200      	movs	r2, #0
 80013c8:	6062      	str	r2, [r4, #4]
 80013ca:	04d9      	lsls	r1, r3, #19
 80013cc:	6922      	ldr	r2, [r4, #16]
 80013ce:	6022      	str	r2, [r4, #0]
 80013d0:	d504      	bpl.n	80013dc <__sflush_r+0x78>
 80013d2:	1c42      	adds	r2, r0, #1
 80013d4:	d101      	bne.n	80013da <__sflush_r+0x76>
 80013d6:	682b      	ldr	r3, [r5, #0]
 80013d8:	b903      	cbnz	r3, 80013dc <__sflush_r+0x78>
 80013da:	6560      	str	r0, [r4, #84]	; 0x54
 80013dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013de:	602f      	str	r7, [r5, #0]
 80013e0:	2900      	cmp	r1, #0
 80013e2:	d0cb      	beq.n	800137c <__sflush_r+0x18>
 80013e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013e8:	4299      	cmp	r1, r3
 80013ea:	d002      	beq.n	80013f2 <__sflush_r+0x8e>
 80013ec:	4628      	mov	r0, r5
 80013ee:	f000 f8fb 	bl	80015e8 <_free_r>
 80013f2:	2000      	movs	r0, #0
 80013f4:	6360      	str	r0, [r4, #52]	; 0x34
 80013f6:	e7c2      	b.n	800137e <__sflush_r+0x1a>
 80013f8:	6a21      	ldr	r1, [r4, #32]
 80013fa:	2301      	movs	r3, #1
 80013fc:	4628      	mov	r0, r5
 80013fe:	47b0      	blx	r6
 8001400:	1c41      	adds	r1, r0, #1
 8001402:	d1c7      	bne.n	8001394 <__sflush_r+0x30>
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0c4      	beq.n	8001394 <__sflush_r+0x30>
 800140a:	2b1d      	cmp	r3, #29
 800140c:	d001      	beq.n	8001412 <__sflush_r+0xae>
 800140e:	2b16      	cmp	r3, #22
 8001410:	d101      	bne.n	8001416 <__sflush_r+0xb2>
 8001412:	602f      	str	r7, [r5, #0]
 8001414:	e7b2      	b.n	800137c <__sflush_r+0x18>
 8001416:	89a3      	ldrh	r3, [r4, #12]
 8001418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800141c:	81a3      	strh	r3, [r4, #12]
 800141e:	e7ae      	b.n	800137e <__sflush_r+0x1a>
 8001420:	690f      	ldr	r7, [r1, #16]
 8001422:	2f00      	cmp	r7, #0
 8001424:	d0aa      	beq.n	800137c <__sflush_r+0x18>
 8001426:	0793      	lsls	r3, r2, #30
 8001428:	680e      	ldr	r6, [r1, #0]
 800142a:	bf08      	it	eq
 800142c:	694b      	ldreq	r3, [r1, #20]
 800142e:	600f      	str	r7, [r1, #0]
 8001430:	bf18      	it	ne
 8001432:	2300      	movne	r3, #0
 8001434:	1bf6      	subs	r6, r6, r7
 8001436:	608b      	str	r3, [r1, #8]
 8001438:	2e00      	cmp	r6, #0
 800143a:	dd9f      	ble.n	800137c <__sflush_r+0x18>
 800143c:	6a21      	ldr	r1, [r4, #32]
 800143e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001442:	4633      	mov	r3, r6
 8001444:	463a      	mov	r2, r7
 8001446:	4628      	mov	r0, r5
 8001448:	47e0      	blx	ip
 800144a:	2800      	cmp	r0, #0
 800144c:	dc06      	bgt.n	800145c <__sflush_r+0xf8>
 800144e:	89a3      	ldrh	r3, [r4, #12]
 8001450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001454:	81a3      	strh	r3, [r4, #12]
 8001456:	f04f 30ff 	mov.w	r0, #4294967295
 800145a:	e790      	b.n	800137e <__sflush_r+0x1a>
 800145c:	4407      	add	r7, r0
 800145e:	1a36      	subs	r6, r6, r0
 8001460:	e7ea      	b.n	8001438 <__sflush_r+0xd4>
 8001462:	bf00      	nop
 8001464:	20400001 	.word	0x20400001

08001468 <_fflush_r>:
 8001468:	b538      	push	{r3, r4, r5, lr}
 800146a:	690b      	ldr	r3, [r1, #16]
 800146c:	4605      	mov	r5, r0
 800146e:	460c      	mov	r4, r1
 8001470:	b913      	cbnz	r3, 8001478 <_fflush_r+0x10>
 8001472:	2500      	movs	r5, #0
 8001474:	4628      	mov	r0, r5
 8001476:	bd38      	pop	{r3, r4, r5, pc}
 8001478:	b118      	cbz	r0, 8001482 <_fflush_r+0x1a>
 800147a:	6983      	ldr	r3, [r0, #24]
 800147c:	b90b      	cbnz	r3, 8001482 <_fflush_r+0x1a>
 800147e:	f7ff fa1b 	bl	80008b8 <__sinit>
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <_fflush_r+0x6c>)
 8001484:	429c      	cmp	r4, r3
 8001486:	d11b      	bne.n	80014c0 <_fflush_r+0x58>
 8001488:	686c      	ldr	r4, [r5, #4]
 800148a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0ef      	beq.n	8001472 <_fflush_r+0xa>
 8001492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001494:	07d0      	lsls	r0, r2, #31
 8001496:	d404      	bmi.n	80014a2 <_fflush_r+0x3a>
 8001498:	0599      	lsls	r1, r3, #22
 800149a:	d402      	bmi.n	80014a2 <_fflush_r+0x3a>
 800149c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800149e:	f7ff faa9 	bl	80009f4 <__retarget_lock_acquire_recursive>
 80014a2:	4628      	mov	r0, r5
 80014a4:	4621      	mov	r1, r4
 80014a6:	f7ff ff5d 	bl	8001364 <__sflush_r>
 80014aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014ac:	07da      	lsls	r2, r3, #31
 80014ae:	4605      	mov	r5, r0
 80014b0:	d4e0      	bmi.n	8001474 <_fflush_r+0xc>
 80014b2:	89a3      	ldrh	r3, [r4, #12]
 80014b4:	059b      	lsls	r3, r3, #22
 80014b6:	d4dd      	bmi.n	8001474 <_fflush_r+0xc>
 80014b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014ba:	f7ff fa9c 	bl	80009f6 <__retarget_lock_release_recursive>
 80014be:	e7d9      	b.n	8001474 <_fflush_r+0xc>
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <_fflush_r+0x70>)
 80014c2:	429c      	cmp	r4, r3
 80014c4:	d101      	bne.n	80014ca <_fflush_r+0x62>
 80014c6:	68ac      	ldr	r4, [r5, #8]
 80014c8:	e7df      	b.n	800148a <_fflush_r+0x22>
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <_fflush_r+0x74>)
 80014cc:	429c      	cmp	r4, r3
 80014ce:	bf08      	it	eq
 80014d0:	68ec      	ldreq	r4, [r5, #12]
 80014d2:	e7da      	b.n	800148a <_fflush_r+0x22>
 80014d4:	08001728 	.word	0x08001728
 80014d8:	08001748 	.word	0x08001748
 80014dc:	08001708 	.word	0x08001708

080014e0 <_lseek_r>:
 80014e0:	b538      	push	{r3, r4, r5, lr}
 80014e2:	4d07      	ldr	r5, [pc, #28]	; (8001500 <_lseek_r+0x20>)
 80014e4:	4604      	mov	r4, r0
 80014e6:	4608      	mov	r0, r1
 80014e8:	4611      	mov	r1, r2
 80014ea:	2200      	movs	r2, #0
 80014ec:	602a      	str	r2, [r5, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	f7ff f8d3 	bl	800069a <_lseek>
 80014f4:	1c43      	adds	r3, r0, #1
 80014f6:	d102      	bne.n	80014fe <_lseek_r+0x1e>
 80014f8:	682b      	ldr	r3, [r5, #0]
 80014fa:	b103      	cbz	r3, 80014fe <_lseek_r+0x1e>
 80014fc:	6023      	str	r3, [r4, #0]
 80014fe:	bd38      	pop	{r3, r4, r5, pc}
 8001500:	20000098 	.word	0x20000098

08001504 <__swhatbuf_r>:
 8001504:	b570      	push	{r4, r5, r6, lr}
 8001506:	460e      	mov	r6, r1
 8001508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800150c:	2900      	cmp	r1, #0
 800150e:	b096      	sub	sp, #88	; 0x58
 8001510:	4614      	mov	r4, r2
 8001512:	461d      	mov	r5, r3
 8001514:	da08      	bge.n	8001528 <__swhatbuf_r+0x24>
 8001516:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	602a      	str	r2, [r5, #0]
 800151e:	061a      	lsls	r2, r3, #24
 8001520:	d410      	bmi.n	8001544 <__swhatbuf_r+0x40>
 8001522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001526:	e00e      	b.n	8001546 <__swhatbuf_r+0x42>
 8001528:	466a      	mov	r2, sp
 800152a:	f000 f8b9 	bl	80016a0 <_fstat_r>
 800152e:	2800      	cmp	r0, #0
 8001530:	dbf1      	blt.n	8001516 <__swhatbuf_r+0x12>
 8001532:	9a01      	ldr	r2, [sp, #4]
 8001534:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001538:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800153c:	425a      	negs	r2, r3
 800153e:	415a      	adcs	r2, r3
 8001540:	602a      	str	r2, [r5, #0]
 8001542:	e7ee      	b.n	8001522 <__swhatbuf_r+0x1e>
 8001544:	2340      	movs	r3, #64	; 0x40
 8001546:	2000      	movs	r0, #0
 8001548:	6023      	str	r3, [r4, #0]
 800154a:	b016      	add	sp, #88	; 0x58
 800154c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001550 <__smakebuf_r>:
 8001550:	898b      	ldrh	r3, [r1, #12]
 8001552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001554:	079d      	lsls	r5, r3, #30
 8001556:	4606      	mov	r6, r0
 8001558:	460c      	mov	r4, r1
 800155a:	d507      	bpl.n	800156c <__smakebuf_r+0x1c>
 800155c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001560:	6023      	str	r3, [r4, #0]
 8001562:	6123      	str	r3, [r4, #16]
 8001564:	2301      	movs	r3, #1
 8001566:	6163      	str	r3, [r4, #20]
 8001568:	b002      	add	sp, #8
 800156a:	bd70      	pop	{r4, r5, r6, pc}
 800156c:	ab01      	add	r3, sp, #4
 800156e:	466a      	mov	r2, sp
 8001570:	f7ff ffc8 	bl	8001504 <__swhatbuf_r>
 8001574:	9900      	ldr	r1, [sp, #0]
 8001576:	4605      	mov	r5, r0
 8001578:	4630      	mov	r0, r6
 800157a:	f7ff fa5d 	bl	8000a38 <_malloc_r>
 800157e:	b948      	cbnz	r0, 8001594 <__smakebuf_r+0x44>
 8001580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001584:	059a      	lsls	r2, r3, #22
 8001586:	d4ef      	bmi.n	8001568 <__smakebuf_r+0x18>
 8001588:	f023 0303 	bic.w	r3, r3, #3
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	81a3      	strh	r3, [r4, #12]
 8001592:	e7e3      	b.n	800155c <__smakebuf_r+0xc>
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <__smakebuf_r+0x7c>)
 8001596:	62b3      	str	r3, [r6, #40]	; 0x28
 8001598:	89a3      	ldrh	r3, [r4, #12]
 800159a:	6020      	str	r0, [r4, #0]
 800159c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a0:	81a3      	strh	r3, [r4, #12]
 80015a2:	9b00      	ldr	r3, [sp, #0]
 80015a4:	6163      	str	r3, [r4, #20]
 80015a6:	9b01      	ldr	r3, [sp, #4]
 80015a8:	6120      	str	r0, [r4, #16]
 80015aa:	b15b      	cbz	r3, 80015c4 <__smakebuf_r+0x74>
 80015ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015b0:	4630      	mov	r0, r6
 80015b2:	f000 f887 	bl	80016c4 <_isatty_r>
 80015b6:	b128      	cbz	r0, 80015c4 <__smakebuf_r+0x74>
 80015b8:	89a3      	ldrh	r3, [r4, #12]
 80015ba:	f023 0303 	bic.w	r3, r3, #3
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	81a3      	strh	r3, [r4, #12]
 80015c4:	89a0      	ldrh	r0, [r4, #12]
 80015c6:	4305      	orrs	r5, r0
 80015c8:	81a5      	strh	r5, [r4, #12]
 80015ca:	e7cd      	b.n	8001568 <__smakebuf_r+0x18>
 80015cc:	08000851 	.word	0x08000851

080015d0 <__malloc_lock>:
 80015d0:	4801      	ldr	r0, [pc, #4]	; (80015d8 <__malloc_lock+0x8>)
 80015d2:	f7ff ba0f 	b.w	80009f4 <__retarget_lock_acquire_recursive>
 80015d6:	bf00      	nop
 80015d8:	2000008c 	.word	0x2000008c

080015dc <__malloc_unlock>:
 80015dc:	4801      	ldr	r0, [pc, #4]	; (80015e4 <__malloc_unlock+0x8>)
 80015de:	f7ff ba0a 	b.w	80009f6 <__retarget_lock_release_recursive>
 80015e2:	bf00      	nop
 80015e4:	2000008c 	.word	0x2000008c

080015e8 <_free_r>:
 80015e8:	b538      	push	{r3, r4, r5, lr}
 80015ea:	4605      	mov	r5, r0
 80015ec:	2900      	cmp	r1, #0
 80015ee:	d041      	beq.n	8001674 <_free_r+0x8c>
 80015f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015f4:	1f0c      	subs	r4, r1, #4
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	bfb8      	it	lt
 80015fa:	18e4      	addlt	r4, r4, r3
 80015fc:	f7ff ffe8 	bl	80015d0 <__malloc_lock>
 8001600:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <_free_r+0x90>)
 8001602:	6813      	ldr	r3, [r2, #0]
 8001604:	b933      	cbnz	r3, 8001614 <_free_r+0x2c>
 8001606:	6063      	str	r3, [r4, #4]
 8001608:	6014      	str	r4, [r2, #0]
 800160a:	4628      	mov	r0, r5
 800160c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001610:	f7ff bfe4 	b.w	80015dc <__malloc_unlock>
 8001614:	42a3      	cmp	r3, r4
 8001616:	d908      	bls.n	800162a <_free_r+0x42>
 8001618:	6820      	ldr	r0, [r4, #0]
 800161a:	1821      	adds	r1, r4, r0
 800161c:	428b      	cmp	r3, r1
 800161e:	bf01      	itttt	eq
 8001620:	6819      	ldreq	r1, [r3, #0]
 8001622:	685b      	ldreq	r3, [r3, #4]
 8001624:	1809      	addeq	r1, r1, r0
 8001626:	6021      	streq	r1, [r4, #0]
 8001628:	e7ed      	b.n	8001606 <_free_r+0x1e>
 800162a:	461a      	mov	r2, r3
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	b10b      	cbz	r3, 8001634 <_free_r+0x4c>
 8001630:	42a3      	cmp	r3, r4
 8001632:	d9fa      	bls.n	800162a <_free_r+0x42>
 8001634:	6811      	ldr	r1, [r2, #0]
 8001636:	1850      	adds	r0, r2, r1
 8001638:	42a0      	cmp	r0, r4
 800163a:	d10b      	bne.n	8001654 <_free_r+0x6c>
 800163c:	6820      	ldr	r0, [r4, #0]
 800163e:	4401      	add	r1, r0
 8001640:	1850      	adds	r0, r2, r1
 8001642:	4283      	cmp	r3, r0
 8001644:	6011      	str	r1, [r2, #0]
 8001646:	d1e0      	bne.n	800160a <_free_r+0x22>
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	6053      	str	r3, [r2, #4]
 800164e:	4401      	add	r1, r0
 8001650:	6011      	str	r1, [r2, #0]
 8001652:	e7da      	b.n	800160a <_free_r+0x22>
 8001654:	d902      	bls.n	800165c <_free_r+0x74>
 8001656:	230c      	movs	r3, #12
 8001658:	602b      	str	r3, [r5, #0]
 800165a:	e7d6      	b.n	800160a <_free_r+0x22>
 800165c:	6820      	ldr	r0, [r4, #0]
 800165e:	1821      	adds	r1, r4, r0
 8001660:	428b      	cmp	r3, r1
 8001662:	bf04      	itt	eq
 8001664:	6819      	ldreq	r1, [r3, #0]
 8001666:	685b      	ldreq	r3, [r3, #4]
 8001668:	6063      	str	r3, [r4, #4]
 800166a:	bf04      	itt	eq
 800166c:	1809      	addeq	r1, r1, r0
 800166e:	6021      	streq	r1, [r4, #0]
 8001670:	6054      	str	r4, [r2, #4]
 8001672:	e7ca      	b.n	800160a <_free_r+0x22>
 8001674:	bd38      	pop	{r3, r4, r5, pc}
 8001676:	bf00      	nop
 8001678:	20000090 	.word	0x20000090

0800167c <_read_r>:
 800167c:	b538      	push	{r3, r4, r5, lr}
 800167e:	4d07      	ldr	r5, [pc, #28]	; (800169c <_read_r+0x20>)
 8001680:	4604      	mov	r4, r0
 8001682:	4608      	mov	r0, r1
 8001684:	4611      	mov	r1, r2
 8001686:	2200      	movs	r2, #0
 8001688:	602a      	str	r2, [r5, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	f7fe ffa8 	bl	80005e0 <_read>
 8001690:	1c43      	adds	r3, r0, #1
 8001692:	d102      	bne.n	800169a <_read_r+0x1e>
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	b103      	cbz	r3, 800169a <_read_r+0x1e>
 8001698:	6023      	str	r3, [r4, #0]
 800169a:	bd38      	pop	{r3, r4, r5, pc}
 800169c:	20000098 	.word	0x20000098

080016a0 <_fstat_r>:
 80016a0:	b538      	push	{r3, r4, r5, lr}
 80016a2:	4d07      	ldr	r5, [pc, #28]	; (80016c0 <_fstat_r+0x20>)
 80016a4:	2300      	movs	r3, #0
 80016a6:	4604      	mov	r4, r0
 80016a8:	4608      	mov	r0, r1
 80016aa:	4611      	mov	r1, r2
 80016ac:	602b      	str	r3, [r5, #0]
 80016ae:	f7fe ffdb 	bl	8000668 <_fstat>
 80016b2:	1c43      	adds	r3, r0, #1
 80016b4:	d102      	bne.n	80016bc <_fstat_r+0x1c>
 80016b6:	682b      	ldr	r3, [r5, #0]
 80016b8:	b103      	cbz	r3, 80016bc <_fstat_r+0x1c>
 80016ba:	6023      	str	r3, [r4, #0]
 80016bc:	bd38      	pop	{r3, r4, r5, pc}
 80016be:	bf00      	nop
 80016c0:	20000098 	.word	0x20000098

080016c4 <_isatty_r>:
 80016c4:	b538      	push	{r3, r4, r5, lr}
 80016c6:	4d06      	ldr	r5, [pc, #24]	; (80016e0 <_isatty_r+0x1c>)
 80016c8:	2300      	movs	r3, #0
 80016ca:	4604      	mov	r4, r0
 80016cc:	4608      	mov	r0, r1
 80016ce:	602b      	str	r3, [r5, #0]
 80016d0:	f7fe ffd9 	bl	8000686 <_isatty>
 80016d4:	1c43      	adds	r3, r0, #1
 80016d6:	d102      	bne.n	80016de <_isatty_r+0x1a>
 80016d8:	682b      	ldr	r3, [r5, #0]
 80016da:	b103      	cbz	r3, 80016de <_isatty_r+0x1a>
 80016dc:	6023      	str	r3, [r4, #0]
 80016de:	bd38      	pop	{r3, r4, r5, pc}
 80016e0:	20000098 	.word	0x20000098

080016e4 <_init>:
 80016e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e6:	bf00      	nop
 80016e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ea:	bc08      	pop	{r3}
 80016ec:	469e      	mov	lr, r3
 80016ee:	4770      	bx	lr

080016f0 <_fini>:
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f2:	bf00      	nop
 80016f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016f6:	bc08      	pop	{r3}
 80016f8:	469e      	mov	lr, r3
 80016fa:	4770      	bx	lr
