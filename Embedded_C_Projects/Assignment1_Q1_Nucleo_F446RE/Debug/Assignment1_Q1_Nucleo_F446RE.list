
Assignment1_Q1_Nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000498  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800065c  0800065c  0000165c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800069c  0800069c  000016a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800069c  0800069c  000016a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800069c  080006a4  000016a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800069c  0800069c  0000169c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006a0  080006a0  000016a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000016a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080006a4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080006a4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a27  00000000  00000000  000016ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000027f  00000000  00000000  000020f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00002378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000007d  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bbc8  00000000  00000000  000024ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ad1  00000000  00000000  0000e075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00041b69  00000000  00000000  0000eb46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000506af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000204  00000000  00000000  000506f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000508f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000644 	.word	0x08000644

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000644 	.word	0x08000644

08000204 <map_port_to_num>:


#include "gpiox_config.h"


uint32_t map_port_to_num(char GPIOx) {
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
	switch(GPIOx) {
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	3b41      	subs	r3, #65	@ 0x41
 8000212:	2b07      	cmp	r3, #7
 8000214:	d822      	bhi.n	800025c <map_port_to_num+0x58>
 8000216:	a201      	add	r2, pc, #4	@ (adr r2, 800021c <map_port_to_num+0x18>)
 8000218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021c:	0800023d 	.word	0x0800023d
 8000220:	08000241 	.word	0x08000241
 8000224:	08000245 	.word	0x08000245
 8000228:	08000249 	.word	0x08000249
 800022c:	0800024d 	.word	0x0800024d
 8000230:	08000251 	.word	0x08000251
 8000234:	08000255 	.word	0x08000255
 8000238:	08000259 	.word	0x08000259
	case 'A':
		return 0U;
 800023c:	2300      	movs	r3, #0
 800023e:	e00e      	b.n	800025e <map_port_to_num+0x5a>
	case 'B':
		return 1U;
 8000240:	2301      	movs	r3, #1
 8000242:	e00c      	b.n	800025e <map_port_to_num+0x5a>
	case 'C':
		return 2U;
 8000244:	2302      	movs	r3, #2
 8000246:	e00a      	b.n	800025e <map_port_to_num+0x5a>
	case 'D':
		return 3U;
 8000248:	2303      	movs	r3, #3
 800024a:	e008      	b.n	800025e <map_port_to_num+0x5a>
	case 'E':
		return 4U;
 800024c:	2304      	movs	r3, #4
 800024e:	e006      	b.n	800025e <map_port_to_num+0x5a>
	case 'F':
		return 5U;
 8000250:	2305      	movs	r3, #5
 8000252:	e004      	b.n	800025e <map_port_to_num+0x5a>
	case 'G':
		return 6U;
 8000254:	2306      	movs	r3, #6
 8000256:	e002      	b.n	800025e <map_port_to_num+0x5a>
	case 'H':
		return 6U;
 8000258:	2306      	movs	r3, #6
 800025a:	e000      	b.n	800025e <map_port_to_num+0x5a>
	}

	return 10U;
 800025c:	230a      	movs	r3, #10
}
 800025e:	4618      	mov	r0, r3
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr

08000268 <get_GPIOx_PORT>:

GPIO_TypeDef* get_GPIOx_PORT(char GPIOx) {
 8000268:	b5b0      	push	{r4, r5, r7, lr}
 800026a:	b08c      	sub	sp, #48	@ 0x30
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	71fb      	strb	r3, [r7, #7]
	uint32_t GPIOxn = map_port_to_num(GPIOx);
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	4618      	mov	r0, r3
 8000276:	f7ff ffc5 	bl	8000204 <map_port_to_num>
 800027a:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (GPIOxn > 6u) {
 800027c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800027e:	2b06      	cmp	r3, #6
 8000280:	d901      	bls.n	8000286 <get_GPIOx_PORT+0x1e>
		return NULL;
 8000282:	2300      	movs	r3, #0
 8000284:	e00f      	b.n	80002a6 <get_GPIOx_PORT+0x3e>
	}

	GPIO_TypeDef* GPIOx_PORTS[] = {
 8000286:	4b0a      	ldr	r3, [pc, #40]	@ (80002b0 <get_GPIOx_PORT+0x48>)
 8000288:	f107 040c 	add.w	r4, r7, #12
 800028c:	461d      	mov	r5, r3
 800028e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000292:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000296:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			GPIOF,
			GPIOG,
			GPIOH,
	};

	return GPIOx_PORTS[GPIOxn];
 800029a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	3330      	adds	r3, #48	@ 0x30
 80002a0:	443b      	add	r3, r7
 80002a2:	f853 3c24 	ldr.w	r3, [r3, #-36]
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3730      	adds	r7, #48	@ 0x30
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bdb0      	pop	{r4, r5, r7, pc}
 80002ae:	bf00      	nop
 80002b0:	0800065c 	.word	0x0800065c

080002b4 <get_GPIOx_PORT_Enabler>:

uint32_t get_GPIOx_PORT_Enabler(char GPIOx) {
 80002b4:	b5b0      	push	{r4, r5, r7, lr}
 80002b6:	b08c      	sub	sp, #48	@ 0x30
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	uint32_t PORT_Enablers[] = {
 80002be:	4b0f      	ldr	r3, [pc, #60]	@ (80002fc <get_GPIOx_PORT_Enabler+0x48>)
 80002c0:	f107 040c 	add.w	r4, r7, #12
 80002c4:	461d      	mov	r5, r3
 80002c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80002ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			RCC_AHB1ENR_GPIOEEN,
			RCC_AHB1ENR_GPIOFEN,
			RCC_AHB1ENR_GPIOGEN,
			RCC_AHB1ENR_GPIOHEN,
	};
	uint32_t GPIOxn = map_port_to_num(GPIOx);
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ff95 	bl	8000204 <map_port_to_num>
 80002da:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (GPIOxn > 6u) {
 80002dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002de:	2b06      	cmp	r3, #6
 80002e0:	d901      	bls.n	80002e6 <get_GPIOx_PORT_Enabler+0x32>
		return 0U;
 80002e2:	2300      	movs	r3, #0
 80002e4:	e005      	b.n	80002f2 <get_GPIOx_PORT_Enabler+0x3e>
	}
	return PORT_Enablers[GPIOxn];
 80002e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	3330      	adds	r3, #48	@ 0x30
 80002ec:	443b      	add	r3, r7
 80002ee:	f853 3c24 	ldr.w	r3, [r3, #-36]
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3730      	adds	r7, #48	@ 0x30
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bdb0      	pop	{r4, r5, r7, pc}
 80002fa:	bf00      	nop
 80002fc:	0800067c 	.word	0x0800067c

08000300 <GPIOx_init>:

void GPIOx_init(char GPIOx, const uint32_t pin_number, const uint32_t IO_type) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
 800030c:	73fb      	strb	r3, [r7, #15]
	// 0: input
	// 1: output

	GPIO_TypeDef *GPIOx_PORT = get_GPIOx_PORT(GPIOx);
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ffa9 	bl	8000268 <get_GPIOx_PORT>
 8000316:	6178      	str	r0, [r7, #20]
	uint32_t PORT_Enabler = get_GPIOx_PORT_Enabler(GPIOx);
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ffca 	bl	80002b4 <get_GPIOx_PORT_Enabler>
 8000320:	6138      	str	r0, [r7, #16]

	if (!GPIOx_PORT) {
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d053      	beq.n	80003d0 <GPIOx_init+0xd0>
		return;
	}
	if (PORT_Enabler == 0U) {
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d052      	beq.n	80003d4 <GPIOx_init+0xd4>
		return;
	}

	RCC->AHB1ENR |= PORT_Enabler;
 800032e:	4b2d      	ldr	r3, [pc, #180]	@ (80003e4 <GPIOx_init+0xe4>)
 8000330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000332:	492c      	ldr	r1, [pc, #176]	@ (80003e4 <GPIOx_init+0xe4>)
 8000334:	693b      	ldr	r3, [r7, #16]
 8000336:	4313      	orrs	r3, r2
 8000338:	630b      	str	r3, [r1, #48]	@ 0x30
	if ((GPIOx == 'A') && (pin_number == 5)) {
 800033a:	7bfb      	ldrb	r3, [r7, #15]
 800033c:	2b41      	cmp	r3, #65	@ 0x41
 800033e:	d105      	bne.n	800034c <GPIOx_init+0x4c>
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	2b05      	cmp	r3, #5
 8000344:	d102      	bne.n	800034c <GPIOx_init+0x4c>
		if (IO_type == 0) {
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d045      	beq.n	80003d8 <GPIOx_init+0xd8>
//			#error "Cannot turn GPIOA5 (PA5) to INPUT mode."
			return;
		}
	}
	if ((GPIOx == 'C') && (pin_number == 13)) {
 800034c:	7bfb      	ldrb	r3, [r7, #15]
 800034e:	2b43      	cmp	r3, #67	@ 0x43
 8000350:	d105      	bne.n	800035e <GPIOx_init+0x5e>
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	2b0d      	cmp	r3, #13
 8000356:	d102      	bne.n	800035e <GPIOx_init+0x5e>
		if (IO_type == 1) {
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d03e      	beq.n	80003dc <GPIOx_init+0xdc>
//			#error "Cannot turn GPIOC13 (PC13) to OUTPUT mode."
			return;
		}
	}

	GPIOx_PORT->OTYPER &= ~(1 << pin_number);
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	2101      	movs	r1, #1
 8000364:	68ba      	ldr	r2, [r7, #8]
 8000366:	fa01 f202 	lsl.w	r2, r1, r2
 800036a:	43d2      	mvns	r2, r2
 800036c:	401a      	ands	r2, r3
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	605a      	str	r2, [r3, #4]
	GPIOx_PORT->OSPEEDR |= (3 << (2 * pin_number));
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	68ba      	ldr	r2, [r7, #8]
 8000378:	0052      	lsls	r2, r2, #1
 800037a:	2103      	movs	r1, #3
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	431a      	orrs	r2, r3
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	609a      	str	r2, [r3, #8]
	GPIOx_PORT->PUPDR &= ~(2 << (2 * pin_number));
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	68ba      	ldr	r2, [r7, #8]
 800038c:	0052      	lsls	r2, r2, #1
 800038e:	2102      	movs	r1, #2
 8000390:	fa01 f202 	lsl.w	r2, r1, r2
 8000394:	43d2      	mvns	r2, r2
 8000396:	401a      	ands	r2, r3
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	60da      	str	r2, [r3, #12]

	if (IO_type == 0) {
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d10b      	bne.n	80003ba <GPIOx_init+0xba>
		GPIOx_PORT->MODER &= ~(1 << (2 * pin_number));
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	0052      	lsls	r2, r2, #1
 80003aa:	2101      	movs	r1, #1
 80003ac:	fa01 f202 	lsl.w	r2, r1, r2
 80003b0:	43d2      	mvns	r2, r2
 80003b2:	401a      	ands	r2, r3
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	601a      	str	r2, [r3, #0]

	} else {
		GPIOx_PORT->MODER |= (1 << (2 * pin_number));
	}

	return;
 80003b8:	e011      	b.n	80003de <GPIOx_init+0xde>
		GPIOx_PORT->MODER |= (1 << (2 * pin_number));
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	68ba      	ldr	r2, [r7, #8]
 80003c0:	0052      	lsls	r2, r2, #1
 80003c2:	2101      	movs	r1, #1
 80003c4:	fa01 f202 	lsl.w	r2, r1, r2
 80003c8:	431a      	orrs	r2, r3
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	601a      	str	r2, [r3, #0]
	return;
 80003ce:	e006      	b.n	80003de <GPIOx_init+0xde>
		return;
 80003d0:	bf00      	nop
 80003d2:	e004      	b.n	80003de <GPIOx_init+0xde>
		return;
 80003d4:	bf00      	nop
 80003d6:	e002      	b.n	80003de <GPIOx_init+0xde>
			return;
 80003d8:	bf00      	nop
 80003da:	e000      	b.n	80003de <GPIOx_init+0xde>
			return;
 80003dc:	bf00      	nop
}
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40023800 	.word	0x40023800

080003e8 <set_ODR_at_pin>:

	uint32_t result = ((GPIOx_PORT->ODR) & (1U << pin_number));
	return result > 0? 1: 0;
}

void set_ODR_at_pin(char GPIOx, uint32_t pin_number) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	6039      	str	r1, [r7, #0]
 80003f2:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *GPIOx_PORT = get_GPIOx_PORT(GPIOx);
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff36 	bl	8000268 <get_GPIOx_PORT>
 80003fc:	60f8      	str	r0, [r7, #12]
	GPIOx_PORT->ODR |= (1U << pin_number);
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	2101      	movs	r1, #1
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	fa01 f303 	lsl.w	r3, r1, r3
 800040a:	431a      	orrs	r2, r3
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	615a      	str	r2, [r3, #20]
}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <reset_ODR_at_pin>:

void reset_ODR_at_pin(char GPIOx, uint32_t pin_number) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	6039      	str	r1, [r7, #0]
 8000422:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *GPIOx_PORT = get_GPIOx_PORT(GPIOx);
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff ff1e 	bl	8000268 <get_GPIOx_PORT>
 800042c:	60f8      	str	r0, [r7, #12]
	GPIOx_PORT->ODR &= ~(1U << pin_number);
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	695a      	ldr	r2, [r3, #20]
 8000432:	2101      	movs	r1, #1
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	401a      	ands	r2, r3
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	615a      	str	r2, [r3, #20]
}
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <Timer2_init>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



void Timer2_init(void) {
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
	// Enable RCC APB1ENR for TIM
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000450:	4b0b      	ldr	r3, [pc, #44]	@ (8000480 <Timer2_init+0x34>)
 8000452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000454:	4a0a      	ldr	r2, [pc, #40]	@ (8000480 <Timer2_init+0x34>)
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM2->PSC = (16000 - 1);
 800045c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000460:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000464:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = (1000 - 1);
 8000466:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800046a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800046e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CNT = 0;
 8000470:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000474:	2200      	movs	r2, #0
 8000476:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	40023800 	.word	0x40023800

08000484 <Timer2_delay>:

void Timer2_delay(const uint32_t delay) {
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	uint32_t ARR_default = TIM2->ARR;
 800048c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000492:	60fb      	str	r3, [r7, #12]
	TIM2->ARR *= delay;
 8000494:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800049a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	fb02 f303 	mul.w	r3, r2, r3
 80004a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

	// start timer
	// when the CR1 is set, the timer begins
	TIM2->CR1 |= (1U << 0);
 80004a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6013      	str	r3, [r2, #0]
	while (!(TIM2->SR & (0X0001)));
 80004b6:	bf00      	nop
 80004b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004bc:	691b      	ldr	r3, [r3, #16]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f8      	beq.n	80004b8 <Timer2_delay+0x34>
	TIM2->SR &= ~(1 << 0);
 80004c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004ca:	691b      	ldr	r3, [r3, #16]
 80004cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004d0:	f023 0301 	bic.w	r3, r3, #1
 80004d4:	6113      	str	r3, [r2, #16]
	TIM2->CR1 &= ~(1U << 0); // not necessary. This happens by default
 80004d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004e0:	f023 0301 	bic.w	r3, r3, #1
 80004e4:	6013      	str	r3, [r2, #0]

	TIM2->ARR = ARR_default;
 80004e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <main>:


int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
	char GPIOx = 'A';
 80004fe:	2341      	movs	r3, #65	@ 0x41
 8000500:	71fb      	strb	r3, [r7, #7]
	uint8_t pin1 = 0, pin2 = 1;
 8000502:	2300      	movs	r3, #0
 8000504:	71bb      	strb	r3, [r7, #6]
 8000506:	2301      	movs	r3, #1
 8000508:	717b      	strb	r3, [r7, #5]

	GPIOx_init(GPIOx, pin1, OUTPUT);
 800050a:	79b9      	ldrb	r1, [r7, #6]
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	2201      	movs	r2, #1
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fef5 	bl	8000300 <GPIOx_init>
	GPIOx_init(GPIOx, pin2, OUTPUT);
 8000516:	7979      	ldrb	r1, [r7, #5]
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	2201      	movs	r2, #1
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff feef 	bl	8000300 <GPIOx_init>
	Timer2_init();
 8000522:	f7ff ff93 	bl	800044c <Timer2_init>


	uint32_t delay = 1U;
 8000526:	2301      	movs	r3, #1
 8000528:	603b      	str	r3, [r7, #0]

    /* Loop forever */
	for(;;) {
		// pattern 1
		set_ODR_at_pin(GPIOx, pin1);
 800052a:	79ba      	ldrb	r2, [r7, #6]
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	4611      	mov	r1, r2
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ff59 	bl	80003e8 <set_ODR_at_pin>
		reset_ODR_at_pin(GPIOx, pin2);
 8000536:	797a      	ldrb	r2, [r7, #5]
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	4611      	mov	r1, r2
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ff6b 	bl	8000418 <reset_ODR_at_pin>
		Timer2_delay(delay);
 8000542:	6838      	ldr	r0, [r7, #0]
 8000544:	f7ff ff9e 	bl	8000484 <Timer2_delay>

		// pattern 2
		set_ODR_at_pin(GPIOx, pin1);
 8000548:	79ba      	ldrb	r2, [r7, #6]
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4611      	mov	r1, r2
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ff4a 	bl	80003e8 <set_ODR_at_pin>
		set_ODR_at_pin(GPIOx, pin2);
 8000554:	797a      	ldrb	r2, [r7, #5]
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4611      	mov	r1, r2
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ff44 	bl	80003e8 <set_ODR_at_pin>
		Timer2_delay(delay);
 8000560:	6838      	ldr	r0, [r7, #0]
 8000562:	f7ff ff8f 	bl	8000484 <Timer2_delay>

		// pattern 3
		reset_ODR_at_pin(GPIOx, pin1);
 8000566:	79ba      	ldrb	r2, [r7, #6]
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4611      	mov	r1, r2
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff53 	bl	8000418 <reset_ODR_at_pin>
		set_ODR_at_pin(GPIOx, pin2);
 8000572:	797a      	ldrb	r2, [r7, #5]
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	4611      	mov	r1, r2
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff ff35 	bl	80003e8 <set_ODR_at_pin>
		Timer2_delay(delay);
 800057e:	6838      	ldr	r0, [r7, #0]
 8000580:	f7ff ff80 	bl	8000484 <Timer2_delay>

		// pattern 4
		reset_ODR_at_pin(GPIOx, pin1);
 8000584:	79ba      	ldrb	r2, [r7, #6]
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4611      	mov	r1, r2
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ff44 	bl	8000418 <reset_ODR_at_pin>
		reset_ODR_at_pin(GPIOx, pin2);
 8000590:	797a      	ldrb	r2, [r7, #5]
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4611      	mov	r1, r2
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ff3e 	bl	8000418 <reset_ODR_at_pin>
		Timer2_delay(delay);
 800059c:	6838      	ldr	r0, [r7, #0]
 800059e:	f7ff ff71 	bl	8000484 <Timer2_delay>
		set_ODR_at_pin(GPIOx, pin1);
 80005a2:	bf00      	nop
 80005a4:	e7c1      	b.n	800052a <main+0x32>
	...

080005a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a8:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b2:	490d      	ldr	r1, [pc, #52]	@ (80005e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b4:	4a0d      	ldr	r2, [pc, #52]	@ (80005ec <LoopForever+0xe>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a0a      	ldr	r2, [pc, #40]	@ (80005f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c8:	4c0a      	ldr	r4, [pc, #40]	@ (80005f4 <LoopForever+0x16>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005d6:	f000 f811 	bl	80005fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005da:	f7ff ff8d 	bl	80004f8 <main>

080005de <LoopForever>:

LoopForever:
  b LoopForever
 80005de:	e7fe      	b.n	80005de <LoopForever>
  ldr   r0, =_estack
 80005e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005ec:	080006a4 	.word	0x080006a4
  ldr r2, =_sbss
 80005f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005f4:	2000001c 	.word	0x2000001c

080005f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f8:	e7fe      	b.n	80005f8 <ADC_IRQHandler>
	...

080005fc <__libc_init_array>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000634 <__libc_init_array+0x38>)
 8000600:	4c0d      	ldr	r4, [pc, #52]	@ (8000638 <__libc_init_array+0x3c>)
 8000602:	1b64      	subs	r4, r4, r5
 8000604:	10a4      	asrs	r4, r4, #2
 8000606:	2600      	movs	r6, #0
 8000608:	42a6      	cmp	r6, r4
 800060a:	d109      	bne.n	8000620 <__libc_init_array+0x24>
 800060c:	4d0b      	ldr	r5, [pc, #44]	@ (800063c <__libc_init_array+0x40>)
 800060e:	4c0c      	ldr	r4, [pc, #48]	@ (8000640 <__libc_init_array+0x44>)
 8000610:	f000 f818 	bl	8000644 <_init>
 8000614:	1b64      	subs	r4, r4, r5
 8000616:	10a4      	asrs	r4, r4, #2
 8000618:	2600      	movs	r6, #0
 800061a:	42a6      	cmp	r6, r4
 800061c:	d105      	bne.n	800062a <__libc_init_array+0x2e>
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f855 3b04 	ldr.w	r3, [r5], #4
 8000624:	4798      	blx	r3
 8000626:	3601      	adds	r6, #1
 8000628:	e7ee      	b.n	8000608 <__libc_init_array+0xc>
 800062a:	f855 3b04 	ldr.w	r3, [r5], #4
 800062e:	4798      	blx	r3
 8000630:	3601      	adds	r6, #1
 8000632:	e7f2      	b.n	800061a <__libc_init_array+0x1e>
 8000634:	0800069c 	.word	0x0800069c
 8000638:	0800069c 	.word	0x0800069c
 800063c:	0800069c 	.word	0x0800069c
 8000640:	080006a0 	.word	0x080006a0

08000644 <_init>:
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000646:	bf00      	nop
 8000648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064a:	bc08      	pop	{r3}
 800064c:	469e      	mov	lr, r3
 800064e:	4770      	bx	lr

08000650 <_fini>:
 8000650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000652:	bf00      	nop
 8000654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000656:	bc08      	pop	{r3}
 8000658:	469e      	mov	lr, r3
 800065a:	4770      	bx	lr
