
class3_Binary_Num_LED_Display_Nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c94  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000e58  08000e58  00001e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e60  08000e60  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e60  08000e60  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e60  08000e60  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e60  08000e60  00001e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e64  08000e64  00001e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000e68  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000ec4  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000ec4  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a01  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000037a  00000000  00000000  00002a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00002e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000c5  00000000  00000000  00002f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ce6  00000000  00000000  00002fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001282  00000000  00000000  00005cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000987e  00000000  00000000  00006f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000107d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009fc  00000000  00000000  00010818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00011214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e40 	.word	0x08000e40

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08000e40 	.word	0x08000e40

08000204 <delay>:

#define GPIOA_BASE				(0x40020000)
#define GPIOA					((GPIO_TypeDef *)GPIOA_BASE)


void delay() {
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a04      	ldr	r2, [pc, #16]	@ (800022c <delay+0x28>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d9f8      	bls.n	8000210 <delay+0xc>
}
 800021e:	bf00      	nop
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	0007a11f 	.word	0x0007a11f

08000230 <main>:

int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0

	(*RCC) |= (1 << 0);
 8000236:	4b33      	ldr	r3, [pc, #204]	@ (8000304 <main+0xd4>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a32      	ldr	r2, [pc, #200]	@ (8000304 <main+0xd4>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6013      	str	r3, [r2, #0]

	/* Bulb A*/
	GPIOA->MODER |= (1 << 0);
 8000242:	4b31      	ldr	r3, [pc, #196]	@ (8000308 <main+0xd8>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a30      	ldr	r2, [pc, #192]	@ (8000308 <main+0xd8>)
 8000248:	f043 0301 	orr.w	r3, r3, #1
 800024c:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1 << 0);
 800024e:	4b2e      	ldr	r3, [pc, #184]	@ (8000308 <main+0xd8>)
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	4a2d      	ldr	r2, [pc, #180]	@ (8000308 <main+0xd8>)
 8000254:	f023 0301 	bic.w	r3, r3, #1
 8000258:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= (1 << 0);
 800025a:	4b2b      	ldr	r3, [pc, #172]	@ (8000308 <main+0xd8>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	4a2a      	ldr	r2, [pc, #168]	@ (8000308 <main+0xd8>)
 8000260:	f043 0301 	orr.w	r3, r3, #1
 8000264:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(3 << 0);
 8000266:	4b28      	ldr	r3, [pc, #160]	@ (8000308 <main+0xd8>)
 8000268:	68db      	ldr	r3, [r3, #12]
 800026a:	4a27      	ldr	r2, [pc, #156]	@ (8000308 <main+0xd8>)
 800026c:	f023 0303 	bic.w	r3, r3, #3
 8000270:	60d3      	str	r3, [r2, #12]
	/* Bulb B*/
	GPIOA->MODER |= (1 << 2);
 8000272:	4b25      	ldr	r3, [pc, #148]	@ (8000308 <main+0xd8>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a24      	ldr	r2, [pc, #144]	@ (8000308 <main+0xd8>)
 8000278:	f043 0304 	orr.w	r3, r3, #4
 800027c:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1 << 1);
 800027e:	4b22      	ldr	r3, [pc, #136]	@ (8000308 <main+0xd8>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	4a21      	ldr	r2, [pc, #132]	@ (8000308 <main+0xd8>)
 8000284:	f023 0302 	bic.w	r3, r3, #2
 8000288:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= (1 << 2);
 800028a:	4b1f      	ldr	r3, [pc, #124]	@ (8000308 <main+0xd8>)
 800028c:	689b      	ldr	r3, [r3, #8]
 800028e:	4a1e      	ldr	r2, [pc, #120]	@ (8000308 <main+0xd8>)
 8000290:	f043 0304 	orr.w	r3, r3, #4
 8000294:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(3 << 2);
 8000296:	4b1c      	ldr	r3, [pc, #112]	@ (8000308 <main+0xd8>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	4a1b      	ldr	r2, [pc, #108]	@ (8000308 <main+0xd8>)
 800029c:	f023 030c 	bic.w	r3, r3, #12
 80002a0:	60d3      	str	r3, [r2, #12]


	uint32_t number, temp = 25;
 80002a2:	2319      	movs	r3, #25
 80002a4:	603b      	str	r3, [r7, #0]
	GPIOA->ODR &= ~(3 << 0);
 80002a6:	4b18      	ldr	r3, [pc, #96]	@ (8000308 <main+0xd8>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	4a17      	ldr	r2, [pc, #92]	@ (8000308 <main+0xd8>)
 80002ac:	f023 0303 	bic.w	r3, r3, #3
 80002b0:	6153      	str	r3, [r2, #20]

    /* Loop forever */
	for(;;) {
		number = temp;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	607b      	str	r3, [r7, #4]
		while(number) {
 80002b6:	e01e      	b.n	80002f6 <main+0xc6>
			if (number & 1) {
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <main+0xa0>
				GPIOA->ODR |= (1 << 0);
 80002c2:	4b11      	ldr	r3, [pc, #68]	@ (8000308 <main+0xd8>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a10      	ldr	r2, [pc, #64]	@ (8000308 <main+0xd8>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6153      	str	r3, [r2, #20]
 80002ce:	e005      	b.n	80002dc <main+0xac>
			} else {
				GPIOA->ODR |= (1 << 1);
 80002d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000308 <main+0xd8>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000308 <main+0xd8>)
 80002d6:	f043 0302 	orr.w	r3, r3, #2
 80002da:	6153      	str	r3, [r2, #20]
			}
			number = number >> 1;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	085b      	lsrs	r3, r3, #1
 80002e0:	607b      	str	r3, [r7, #4]
			delay();
 80002e2:	f7ff ff8f 	bl	8000204 <delay>
			GPIOA->ODR &= ~(3 << 0);
 80002e6:	4b08      	ldr	r3, [pc, #32]	@ (8000308 <main+0xd8>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	4a07      	ldr	r2, [pc, #28]	@ (8000308 <main+0xd8>)
 80002ec:	f023 0303 	bic.w	r3, r3, #3
 80002f0:	6153      	str	r3, [r2, #20]
			delay();
 80002f2:	f7ff ff87 	bl	8000204 <delay>
		while(number) {
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d1dd      	bne.n	80002b8 <main+0x88>
		}
		printf("Done\n");
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <main+0xdc>)
 80002fe:	f000 fa0f 	bl	8000720 <puts>
		number = temp;
 8000302:	e7d6      	b.n	80002b2 <main+0x82>
 8000304:	40023830 	.word	0x40023830
 8000308:	40020000 	.word	0x40020000
 800030c:	08000e58 	.word	0x08000e58

08000310 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800031a:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <ITM_SendChar+0x44>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <ITM_SendChar+0x44>)
 8000320:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000324:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000326:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <ITM_SendChar+0x48>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a0b      	ldr	r2, [pc, #44]	@ (8000358 <ITM_SendChar+0x48>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000332:	bf00      	nop
 8000334:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0f8      	beq.n	8000334 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000342:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	6013      	str	r3, [r2, #0]
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	e000edfc 	.word	0xe000edfc
 8000358:	e0000e00 	.word	0xe0000e00

0800035c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	e00a      	b.n	8000384 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800036e:	f3af 8000 	nop.w
 8000372:	4601      	mov	r1, r0
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	60ba      	str	r2, [r7, #8]
 800037a:	b2ca      	uxtb	r2, r1
 800037c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	3301      	adds	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	429a      	cmp	r2, r3
 800038a:	dbf0      	blt.n	800036e <_read+0x12>
	}

return len;
 800038c:	687b      	ldr	r3, [r7, #4]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b086      	sub	sp, #24
 800039a:	af00      	add	r7, sp, #0
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
 80003a6:	e009      	b.n	80003bc <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	1c5a      	adds	r2, r3, #1
 80003ac:	60ba      	str	r2, [r7, #8]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ffad 	bl	8000310 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	3301      	adds	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	697a      	ldr	r2, [r7, #20]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	429a      	cmp	r2, r3
 80003c2:	dbf1      	blt.n	80003a8 <_write+0x12>
	}
	return len;
 80003c4:	687b      	ldr	r3, [r7, #4]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <_close>:

int _close(int file)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
	return -1;
 80003d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80003da:	4618      	mov	r0, r3
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr

080003e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003f4:	605a      	str	r2, [r3, #4]
	return 0;
 80003f6:	2300      	movs	r3, #0
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <_isatty>:

int _isatty(int file)
{
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
	return 1;
 800040a:	2301      	movs	r3, #1
}
 800040c:	4618      	mov	r0, r3
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr

08000416 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000416:	b480      	push	{r7}
 8000418:	b085      	sub	sp, #20
 800041a:	af00      	add	r7, sp, #0
 800041c:	60f8      	str	r0, [r7, #12]
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	607a      	str	r2, [r7, #4]
	return 0;
 8000422:	2300      	movs	r3, #0
}
 8000424:	4618      	mov	r0, r3
 8000426:	3714      	adds	r7, #20
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
	...

08000430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000438:	4a14      	ldr	r2, [pc, #80]	@ (800048c <_sbrk+0x5c>)
 800043a:	4b15      	ldr	r3, [pc, #84]	@ (8000490 <_sbrk+0x60>)
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000444:	4b13      	ldr	r3, [pc, #76]	@ (8000494 <_sbrk+0x64>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d102      	bne.n	8000452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800044c:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <_sbrk+0x64>)
 800044e:	4a12      	ldr	r2, [pc, #72]	@ (8000498 <_sbrk+0x68>)
 8000450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000452:	4b10      	ldr	r3, [pc, #64]	@ (8000494 <_sbrk+0x64>)
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4413      	add	r3, r2
 800045a:	693a      	ldr	r2, [r7, #16]
 800045c:	429a      	cmp	r2, r3
 800045e:	d207      	bcs.n	8000470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000460:	f000 fa8c 	bl	800097c <__errno>
 8000464:	4603      	mov	r3, r0
 8000466:	220c      	movs	r2, #12
 8000468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800046a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800046e:	e009      	b.n	8000484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000470:	4b08      	ldr	r3, [pc, #32]	@ (8000494 <_sbrk+0x64>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000476:	4b07      	ldr	r3, [pc, #28]	@ (8000494 <_sbrk+0x64>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4413      	add	r3, r2
 800047e:	4a05      	ldr	r2, [pc, #20]	@ (8000494 <_sbrk+0x64>)
 8000480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000482:	68fb      	ldr	r3, [r7, #12]
}
 8000484:	4618      	mov	r0, r3
 8000486:	3718      	adds	r7, #24
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20020000 	.word	0x20020000
 8000490:	00000400 	.word	0x00000400
 8000494:	20000078 	.word	0x20000078
 8000498:	200001c8 	.word	0x200001c8

0800049c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800049c:	480d      	ldr	r0, [pc, #52]	@ (80004d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a4:	480c      	ldr	r0, [pc, #48]	@ (80004d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a6:	490d      	ldr	r1, [pc, #52]	@ (80004dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a8:	4a0d      	ldr	r2, [pc, #52]	@ (80004e0 <LoopForever+0xe>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ac:	e002      	b.n	80004b4 <LoopCopyDataInit>

080004ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b2:	3304      	adds	r3, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b8:	d3f9      	bcc.n	80004ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ba:	4a0a      	ldr	r2, [pc, #40]	@ (80004e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004bc:	4c0a      	ldr	r4, [pc, #40]	@ (80004e8 <LoopForever+0x16>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c0:	e001      	b.n	80004c6 <LoopFillZerobss>

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c4:	3204      	adds	r2, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ca:	f000 fa5d 	bl	8000988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ce:	f7ff feaf 	bl	8000230 <main>

080004d2 <LoopForever>:

LoopForever:
  b LoopForever
 80004d2:	e7fe      	b.n	80004d2 <LoopForever>
  ldr   r0, =_estack
 80004d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80004e0:	08000e68 	.word	0x08000e68
  ldr r2, =_sbss
 80004e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80004e8:	200001c8 	.word	0x200001c8

080004ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC_IRQHandler>
	...

080004f0 <std>:
 80004f0:	2300      	movs	r3, #0
 80004f2:	b510      	push	{r4, lr}
 80004f4:	4604      	mov	r4, r0
 80004f6:	e9c0 3300 	strd	r3, r3, [r0]
 80004fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80004fe:	6083      	str	r3, [r0, #8]
 8000500:	8181      	strh	r1, [r0, #12]
 8000502:	6643      	str	r3, [r0, #100]	@ 0x64
 8000504:	81c2      	strh	r2, [r0, #14]
 8000506:	6183      	str	r3, [r0, #24]
 8000508:	4619      	mov	r1, r3
 800050a:	2208      	movs	r2, #8
 800050c:	305c      	adds	r0, #92	@ 0x5c
 800050e:	f000 f9e7 	bl	80008e0 <memset>
 8000512:	4b0d      	ldr	r3, [pc, #52]	@ (8000548 <std+0x58>)
 8000514:	6263      	str	r3, [r4, #36]	@ 0x24
 8000516:	4b0d      	ldr	r3, [pc, #52]	@ (800054c <std+0x5c>)
 8000518:	62a3      	str	r3, [r4, #40]	@ 0x28
 800051a:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <std+0x60>)
 800051c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800051e:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <std+0x64>)
 8000520:	6323      	str	r3, [r4, #48]	@ 0x30
 8000522:	4b0d      	ldr	r3, [pc, #52]	@ (8000558 <std+0x68>)
 8000524:	6224      	str	r4, [r4, #32]
 8000526:	429c      	cmp	r4, r3
 8000528:	d006      	beq.n	8000538 <std+0x48>
 800052a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800052e:	4294      	cmp	r4, r2
 8000530:	d002      	beq.n	8000538 <std+0x48>
 8000532:	33d0      	adds	r3, #208	@ 0xd0
 8000534:	429c      	cmp	r4, r3
 8000536:	d105      	bne.n	8000544 <std+0x54>
 8000538:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800053c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000540:	f000 ba46 	b.w	80009d0 <__retarget_lock_init_recursive>
 8000544:	bd10      	pop	{r4, pc}
 8000546:	bf00      	nop
 8000548:	08000731 	.word	0x08000731
 800054c:	08000753 	.word	0x08000753
 8000550:	0800078b 	.word	0x0800078b
 8000554:	080007af 	.word	0x080007af
 8000558:	2000007c 	.word	0x2000007c

0800055c <stdio_exit_handler>:
 800055c:	4a02      	ldr	r2, [pc, #8]	@ (8000568 <stdio_exit_handler+0xc>)
 800055e:	4903      	ldr	r1, [pc, #12]	@ (800056c <stdio_exit_handler+0x10>)
 8000560:	4803      	ldr	r0, [pc, #12]	@ (8000570 <stdio_exit_handler+0x14>)
 8000562:	f000 b869 	b.w	8000638 <_fwalk_sglue>
 8000566:	bf00      	nop
 8000568:	20000000 	.word	0x20000000
 800056c:	08000cc9 	.word	0x08000cc9
 8000570:	20000010 	.word	0x20000010

08000574 <cleanup_stdio>:
 8000574:	6841      	ldr	r1, [r0, #4]
 8000576:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <cleanup_stdio+0x34>)
 8000578:	4299      	cmp	r1, r3
 800057a:	b510      	push	{r4, lr}
 800057c:	4604      	mov	r4, r0
 800057e:	d001      	beq.n	8000584 <cleanup_stdio+0x10>
 8000580:	f000 fba2 	bl	8000cc8 <_fflush_r>
 8000584:	68a1      	ldr	r1, [r4, #8]
 8000586:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <cleanup_stdio+0x38>)
 8000588:	4299      	cmp	r1, r3
 800058a:	d002      	beq.n	8000592 <cleanup_stdio+0x1e>
 800058c:	4620      	mov	r0, r4
 800058e:	f000 fb9b 	bl	8000cc8 <_fflush_r>
 8000592:	68e1      	ldr	r1, [r4, #12]
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <cleanup_stdio+0x3c>)
 8000596:	4299      	cmp	r1, r3
 8000598:	d004      	beq.n	80005a4 <cleanup_stdio+0x30>
 800059a:	4620      	mov	r0, r4
 800059c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005a0:	f000 bb92 	b.w	8000cc8 <_fflush_r>
 80005a4:	bd10      	pop	{r4, pc}
 80005a6:	bf00      	nop
 80005a8:	2000007c 	.word	0x2000007c
 80005ac:	200000e4 	.word	0x200000e4
 80005b0:	2000014c 	.word	0x2000014c

080005b4 <global_stdio_init.part.0>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <global_stdio_init.part.0+0x30>)
 80005b8:	4c0b      	ldr	r4, [pc, #44]	@ (80005e8 <global_stdio_init.part.0+0x34>)
 80005ba:	4a0c      	ldr	r2, [pc, #48]	@ (80005ec <global_stdio_init.part.0+0x38>)
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	4620      	mov	r0, r4
 80005c0:	2200      	movs	r2, #0
 80005c2:	2104      	movs	r1, #4
 80005c4:	f7ff ff94 	bl	80004f0 <std>
 80005c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80005cc:	2201      	movs	r2, #1
 80005ce:	2109      	movs	r1, #9
 80005d0:	f7ff ff8e 	bl	80004f0 <std>
 80005d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80005d8:	2202      	movs	r2, #2
 80005da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005de:	2112      	movs	r1, #18
 80005e0:	f7ff bf86 	b.w	80004f0 <std>
 80005e4:	200001b4 	.word	0x200001b4
 80005e8:	2000007c 	.word	0x2000007c
 80005ec:	0800055d 	.word	0x0800055d

080005f0 <__sfp_lock_acquire>:
 80005f0:	4801      	ldr	r0, [pc, #4]	@ (80005f8 <__sfp_lock_acquire+0x8>)
 80005f2:	f000 b9ee 	b.w	80009d2 <__retarget_lock_acquire_recursive>
 80005f6:	bf00      	nop
 80005f8:	200001bd 	.word	0x200001bd

080005fc <__sfp_lock_release>:
 80005fc:	4801      	ldr	r0, [pc, #4]	@ (8000604 <__sfp_lock_release+0x8>)
 80005fe:	f000 b9e9 	b.w	80009d4 <__retarget_lock_release_recursive>
 8000602:	bf00      	nop
 8000604:	200001bd 	.word	0x200001bd

08000608 <__sinit>:
 8000608:	b510      	push	{r4, lr}
 800060a:	4604      	mov	r4, r0
 800060c:	f7ff fff0 	bl	80005f0 <__sfp_lock_acquire>
 8000610:	6a23      	ldr	r3, [r4, #32]
 8000612:	b11b      	cbz	r3, 800061c <__sinit+0x14>
 8000614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000618:	f7ff bff0 	b.w	80005fc <__sfp_lock_release>
 800061c:	4b04      	ldr	r3, [pc, #16]	@ (8000630 <__sinit+0x28>)
 800061e:	6223      	str	r3, [r4, #32]
 8000620:	4b04      	ldr	r3, [pc, #16]	@ (8000634 <__sinit+0x2c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1f5      	bne.n	8000614 <__sinit+0xc>
 8000628:	f7ff ffc4 	bl	80005b4 <global_stdio_init.part.0>
 800062c:	e7f2      	b.n	8000614 <__sinit+0xc>
 800062e:	bf00      	nop
 8000630:	08000575 	.word	0x08000575
 8000634:	200001b4 	.word	0x200001b4

08000638 <_fwalk_sglue>:
 8000638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800063c:	4607      	mov	r7, r0
 800063e:	4688      	mov	r8, r1
 8000640:	4614      	mov	r4, r2
 8000642:	2600      	movs	r6, #0
 8000644:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000648:	f1b9 0901 	subs.w	r9, r9, #1
 800064c:	d505      	bpl.n	800065a <_fwalk_sglue+0x22>
 800064e:	6824      	ldr	r4, [r4, #0]
 8000650:	2c00      	cmp	r4, #0
 8000652:	d1f7      	bne.n	8000644 <_fwalk_sglue+0xc>
 8000654:	4630      	mov	r0, r6
 8000656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800065a:	89ab      	ldrh	r3, [r5, #12]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d907      	bls.n	8000670 <_fwalk_sglue+0x38>
 8000660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000664:	3301      	adds	r3, #1
 8000666:	d003      	beq.n	8000670 <_fwalk_sglue+0x38>
 8000668:	4629      	mov	r1, r5
 800066a:	4638      	mov	r0, r7
 800066c:	47c0      	blx	r8
 800066e:	4306      	orrs	r6, r0
 8000670:	3568      	adds	r5, #104	@ 0x68
 8000672:	e7e9      	b.n	8000648 <_fwalk_sglue+0x10>

08000674 <_puts_r>:
 8000674:	6a03      	ldr	r3, [r0, #32]
 8000676:	b570      	push	{r4, r5, r6, lr}
 8000678:	6884      	ldr	r4, [r0, #8]
 800067a:	4605      	mov	r5, r0
 800067c:	460e      	mov	r6, r1
 800067e:	b90b      	cbnz	r3, 8000684 <_puts_r+0x10>
 8000680:	f7ff ffc2 	bl	8000608 <__sinit>
 8000684:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000686:	07db      	lsls	r3, r3, #31
 8000688:	d405      	bmi.n	8000696 <_puts_r+0x22>
 800068a:	89a3      	ldrh	r3, [r4, #12]
 800068c:	0598      	lsls	r0, r3, #22
 800068e:	d402      	bmi.n	8000696 <_puts_r+0x22>
 8000690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000692:	f000 f99e 	bl	80009d2 <__retarget_lock_acquire_recursive>
 8000696:	89a3      	ldrh	r3, [r4, #12]
 8000698:	0719      	lsls	r1, r3, #28
 800069a:	d502      	bpl.n	80006a2 <_puts_r+0x2e>
 800069c:	6923      	ldr	r3, [r4, #16]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d135      	bne.n	800070e <_puts_r+0x9a>
 80006a2:	4621      	mov	r1, r4
 80006a4:	4628      	mov	r0, r5
 80006a6:	f000 f8c5 	bl	8000834 <__swsetup_r>
 80006aa:	b380      	cbz	r0, 800070e <_puts_r+0x9a>
 80006ac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80006b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006b2:	07da      	lsls	r2, r3, #31
 80006b4:	d405      	bmi.n	80006c2 <_puts_r+0x4e>
 80006b6:	89a3      	ldrh	r3, [r4, #12]
 80006b8:	059b      	lsls	r3, r3, #22
 80006ba:	d402      	bmi.n	80006c2 <_puts_r+0x4e>
 80006bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80006be:	f000 f989 	bl	80009d4 <__retarget_lock_release_recursive>
 80006c2:	4628      	mov	r0, r5
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	da04      	bge.n	80006d4 <_puts_r+0x60>
 80006ca:	69a2      	ldr	r2, [r4, #24]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dc17      	bgt.n	8000700 <_puts_r+0x8c>
 80006d0:	290a      	cmp	r1, #10
 80006d2:	d015      	beq.n	8000700 <_puts_r+0x8c>
 80006d4:	6823      	ldr	r3, [r4, #0]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	6022      	str	r2, [r4, #0]
 80006da:	7019      	strb	r1, [r3, #0]
 80006dc:	68a3      	ldr	r3, [r4, #8]
 80006de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006e2:	3b01      	subs	r3, #1
 80006e4:	60a3      	str	r3, [r4, #8]
 80006e6:	2900      	cmp	r1, #0
 80006e8:	d1ed      	bne.n	80006c6 <_puts_r+0x52>
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	da11      	bge.n	8000712 <_puts_r+0x9e>
 80006ee:	4622      	mov	r2, r4
 80006f0:	210a      	movs	r1, #10
 80006f2:	4628      	mov	r0, r5
 80006f4:	f000 f85f 	bl	80007b6 <__swbuf_r>
 80006f8:	3001      	adds	r0, #1
 80006fa:	d0d7      	beq.n	80006ac <_puts_r+0x38>
 80006fc:	250a      	movs	r5, #10
 80006fe:	e7d7      	b.n	80006b0 <_puts_r+0x3c>
 8000700:	4622      	mov	r2, r4
 8000702:	4628      	mov	r0, r5
 8000704:	f000 f857 	bl	80007b6 <__swbuf_r>
 8000708:	3001      	adds	r0, #1
 800070a:	d1e7      	bne.n	80006dc <_puts_r+0x68>
 800070c:	e7ce      	b.n	80006ac <_puts_r+0x38>
 800070e:	3e01      	subs	r6, #1
 8000710:	e7e4      	b.n	80006dc <_puts_r+0x68>
 8000712:	6823      	ldr	r3, [r4, #0]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	6022      	str	r2, [r4, #0]
 8000718:	220a      	movs	r2, #10
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	e7ee      	b.n	80006fc <_puts_r+0x88>
	...

08000720 <puts>:
 8000720:	4b02      	ldr	r3, [pc, #8]	@ (800072c <puts+0xc>)
 8000722:	4601      	mov	r1, r0
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	f7ff bfa5 	b.w	8000674 <_puts_r>
 800072a:	bf00      	nop
 800072c:	2000000c 	.word	0x2000000c

08000730 <__sread>:
 8000730:	b510      	push	{r4, lr}
 8000732:	460c      	mov	r4, r1
 8000734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000738:	f000 f8fc 	bl	8000934 <_read_r>
 800073c:	2800      	cmp	r0, #0
 800073e:	bfab      	itete	ge
 8000740:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000742:	89a3      	ldrhlt	r3, [r4, #12]
 8000744:	181b      	addge	r3, r3, r0
 8000746:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800074a:	bfac      	ite	ge
 800074c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800074e:	81a3      	strhlt	r3, [r4, #12]
 8000750:	bd10      	pop	{r4, pc}

08000752 <__swrite>:
 8000752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000756:	461f      	mov	r7, r3
 8000758:	898b      	ldrh	r3, [r1, #12]
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	4605      	mov	r5, r0
 800075e:	460c      	mov	r4, r1
 8000760:	4616      	mov	r6, r2
 8000762:	d505      	bpl.n	8000770 <__swrite+0x1e>
 8000764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000768:	2302      	movs	r3, #2
 800076a:	2200      	movs	r2, #0
 800076c:	f000 f8d0 	bl	8000910 <_lseek_r>
 8000770:	89a3      	ldrh	r3, [r4, #12]
 8000772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000776:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800077a:	81a3      	strh	r3, [r4, #12]
 800077c:	4632      	mov	r2, r6
 800077e:	463b      	mov	r3, r7
 8000780:	4628      	mov	r0, r5
 8000782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000786:	f000 b8e7 	b.w	8000958 <_write_r>

0800078a <__sseek>:
 800078a:	b510      	push	{r4, lr}
 800078c:	460c      	mov	r4, r1
 800078e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000792:	f000 f8bd 	bl	8000910 <_lseek_r>
 8000796:	1c43      	adds	r3, r0, #1
 8000798:	89a3      	ldrh	r3, [r4, #12]
 800079a:	bf15      	itete	ne
 800079c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800079e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80007a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80007a6:	81a3      	strheq	r3, [r4, #12]
 80007a8:	bf18      	it	ne
 80007aa:	81a3      	strhne	r3, [r4, #12]
 80007ac:	bd10      	pop	{r4, pc}

080007ae <__sclose>:
 80007ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007b2:	f000 b89d 	b.w	80008f0 <_close_r>

080007b6 <__swbuf_r>:
 80007b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b8:	460e      	mov	r6, r1
 80007ba:	4614      	mov	r4, r2
 80007bc:	4605      	mov	r5, r0
 80007be:	b118      	cbz	r0, 80007c8 <__swbuf_r+0x12>
 80007c0:	6a03      	ldr	r3, [r0, #32]
 80007c2:	b90b      	cbnz	r3, 80007c8 <__swbuf_r+0x12>
 80007c4:	f7ff ff20 	bl	8000608 <__sinit>
 80007c8:	69a3      	ldr	r3, [r4, #24]
 80007ca:	60a3      	str	r3, [r4, #8]
 80007cc:	89a3      	ldrh	r3, [r4, #12]
 80007ce:	071a      	lsls	r2, r3, #28
 80007d0:	d501      	bpl.n	80007d6 <__swbuf_r+0x20>
 80007d2:	6923      	ldr	r3, [r4, #16]
 80007d4:	b943      	cbnz	r3, 80007e8 <__swbuf_r+0x32>
 80007d6:	4621      	mov	r1, r4
 80007d8:	4628      	mov	r0, r5
 80007da:	f000 f82b 	bl	8000834 <__swsetup_r>
 80007de:	b118      	cbz	r0, 80007e8 <__swbuf_r+0x32>
 80007e0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80007e4:	4638      	mov	r0, r7
 80007e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007e8:	6823      	ldr	r3, [r4, #0]
 80007ea:	6922      	ldr	r2, [r4, #16]
 80007ec:	1a98      	subs	r0, r3, r2
 80007ee:	6963      	ldr	r3, [r4, #20]
 80007f0:	b2f6      	uxtb	r6, r6
 80007f2:	4283      	cmp	r3, r0
 80007f4:	4637      	mov	r7, r6
 80007f6:	dc05      	bgt.n	8000804 <__swbuf_r+0x4e>
 80007f8:	4621      	mov	r1, r4
 80007fa:	4628      	mov	r0, r5
 80007fc:	f000 fa64 	bl	8000cc8 <_fflush_r>
 8000800:	2800      	cmp	r0, #0
 8000802:	d1ed      	bne.n	80007e0 <__swbuf_r+0x2a>
 8000804:	68a3      	ldr	r3, [r4, #8]
 8000806:	3b01      	subs	r3, #1
 8000808:	60a3      	str	r3, [r4, #8]
 800080a:	6823      	ldr	r3, [r4, #0]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	6022      	str	r2, [r4, #0]
 8000810:	701e      	strb	r6, [r3, #0]
 8000812:	6962      	ldr	r2, [r4, #20]
 8000814:	1c43      	adds	r3, r0, #1
 8000816:	429a      	cmp	r2, r3
 8000818:	d004      	beq.n	8000824 <__swbuf_r+0x6e>
 800081a:	89a3      	ldrh	r3, [r4, #12]
 800081c:	07db      	lsls	r3, r3, #31
 800081e:	d5e1      	bpl.n	80007e4 <__swbuf_r+0x2e>
 8000820:	2e0a      	cmp	r6, #10
 8000822:	d1df      	bne.n	80007e4 <__swbuf_r+0x2e>
 8000824:	4621      	mov	r1, r4
 8000826:	4628      	mov	r0, r5
 8000828:	f000 fa4e 	bl	8000cc8 <_fflush_r>
 800082c:	2800      	cmp	r0, #0
 800082e:	d0d9      	beq.n	80007e4 <__swbuf_r+0x2e>
 8000830:	e7d6      	b.n	80007e0 <__swbuf_r+0x2a>
	...

08000834 <__swsetup_r>:
 8000834:	b538      	push	{r3, r4, r5, lr}
 8000836:	4b29      	ldr	r3, [pc, #164]	@ (80008dc <__swsetup_r+0xa8>)
 8000838:	4605      	mov	r5, r0
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	460c      	mov	r4, r1
 800083e:	b118      	cbz	r0, 8000848 <__swsetup_r+0x14>
 8000840:	6a03      	ldr	r3, [r0, #32]
 8000842:	b90b      	cbnz	r3, 8000848 <__swsetup_r+0x14>
 8000844:	f7ff fee0 	bl	8000608 <__sinit>
 8000848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800084c:	0719      	lsls	r1, r3, #28
 800084e:	d422      	bmi.n	8000896 <__swsetup_r+0x62>
 8000850:	06da      	lsls	r2, r3, #27
 8000852:	d407      	bmi.n	8000864 <__swsetup_r+0x30>
 8000854:	2209      	movs	r2, #9
 8000856:	602a      	str	r2, [r5, #0]
 8000858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800085c:	81a3      	strh	r3, [r4, #12]
 800085e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000862:	e033      	b.n	80008cc <__swsetup_r+0x98>
 8000864:	0758      	lsls	r0, r3, #29
 8000866:	d512      	bpl.n	800088e <__swsetup_r+0x5a>
 8000868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800086a:	b141      	cbz	r1, 800087e <__swsetup_r+0x4a>
 800086c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000870:	4299      	cmp	r1, r3
 8000872:	d002      	beq.n	800087a <__swsetup_r+0x46>
 8000874:	4628      	mov	r0, r5
 8000876:	f000 f8af 	bl	80009d8 <_free_r>
 800087a:	2300      	movs	r3, #0
 800087c:	6363      	str	r3, [r4, #52]	@ 0x34
 800087e:	89a3      	ldrh	r3, [r4, #12]
 8000880:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000884:	81a3      	strh	r3, [r4, #12]
 8000886:	2300      	movs	r3, #0
 8000888:	6063      	str	r3, [r4, #4]
 800088a:	6923      	ldr	r3, [r4, #16]
 800088c:	6023      	str	r3, [r4, #0]
 800088e:	89a3      	ldrh	r3, [r4, #12]
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	81a3      	strh	r3, [r4, #12]
 8000896:	6923      	ldr	r3, [r4, #16]
 8000898:	b94b      	cbnz	r3, 80008ae <__swsetup_r+0x7a>
 800089a:	89a3      	ldrh	r3, [r4, #12]
 800089c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80008a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008a4:	d003      	beq.n	80008ae <__swsetup_r+0x7a>
 80008a6:	4621      	mov	r1, r4
 80008a8:	4628      	mov	r0, r5
 80008aa:	f000 fa5b 	bl	8000d64 <__smakebuf_r>
 80008ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008b2:	f013 0201 	ands.w	r2, r3, #1
 80008b6:	d00a      	beq.n	80008ce <__swsetup_r+0x9a>
 80008b8:	2200      	movs	r2, #0
 80008ba:	60a2      	str	r2, [r4, #8]
 80008bc:	6962      	ldr	r2, [r4, #20]
 80008be:	4252      	negs	r2, r2
 80008c0:	61a2      	str	r2, [r4, #24]
 80008c2:	6922      	ldr	r2, [r4, #16]
 80008c4:	b942      	cbnz	r2, 80008d8 <__swsetup_r+0xa4>
 80008c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80008ca:	d1c5      	bne.n	8000858 <__swsetup_r+0x24>
 80008cc:	bd38      	pop	{r3, r4, r5, pc}
 80008ce:	0799      	lsls	r1, r3, #30
 80008d0:	bf58      	it	pl
 80008d2:	6962      	ldrpl	r2, [r4, #20]
 80008d4:	60a2      	str	r2, [r4, #8]
 80008d6:	e7f4      	b.n	80008c2 <__swsetup_r+0x8e>
 80008d8:	2000      	movs	r0, #0
 80008da:	e7f7      	b.n	80008cc <__swsetup_r+0x98>
 80008dc:	2000000c 	.word	0x2000000c

080008e0 <memset>:
 80008e0:	4402      	add	r2, r0
 80008e2:	4603      	mov	r3, r0
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d100      	bne.n	80008ea <memset+0xa>
 80008e8:	4770      	bx	lr
 80008ea:	f803 1b01 	strb.w	r1, [r3], #1
 80008ee:	e7f9      	b.n	80008e4 <memset+0x4>

080008f0 <_close_r>:
 80008f0:	b538      	push	{r3, r4, r5, lr}
 80008f2:	4d06      	ldr	r5, [pc, #24]	@ (800090c <_close_r+0x1c>)
 80008f4:	2300      	movs	r3, #0
 80008f6:	4604      	mov	r4, r0
 80008f8:	4608      	mov	r0, r1
 80008fa:	602b      	str	r3, [r5, #0]
 80008fc:	f7ff fd67 	bl	80003ce <_close>
 8000900:	1c43      	adds	r3, r0, #1
 8000902:	d102      	bne.n	800090a <_close_r+0x1a>
 8000904:	682b      	ldr	r3, [r5, #0]
 8000906:	b103      	cbz	r3, 800090a <_close_r+0x1a>
 8000908:	6023      	str	r3, [r4, #0]
 800090a:	bd38      	pop	{r3, r4, r5, pc}
 800090c:	200001b8 	.word	0x200001b8

08000910 <_lseek_r>:
 8000910:	b538      	push	{r3, r4, r5, lr}
 8000912:	4d07      	ldr	r5, [pc, #28]	@ (8000930 <_lseek_r+0x20>)
 8000914:	4604      	mov	r4, r0
 8000916:	4608      	mov	r0, r1
 8000918:	4611      	mov	r1, r2
 800091a:	2200      	movs	r2, #0
 800091c:	602a      	str	r2, [r5, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	f7ff fd79 	bl	8000416 <_lseek>
 8000924:	1c43      	adds	r3, r0, #1
 8000926:	d102      	bne.n	800092e <_lseek_r+0x1e>
 8000928:	682b      	ldr	r3, [r5, #0]
 800092a:	b103      	cbz	r3, 800092e <_lseek_r+0x1e>
 800092c:	6023      	str	r3, [r4, #0]
 800092e:	bd38      	pop	{r3, r4, r5, pc}
 8000930:	200001b8 	.word	0x200001b8

08000934 <_read_r>:
 8000934:	b538      	push	{r3, r4, r5, lr}
 8000936:	4d07      	ldr	r5, [pc, #28]	@ (8000954 <_read_r+0x20>)
 8000938:	4604      	mov	r4, r0
 800093a:	4608      	mov	r0, r1
 800093c:	4611      	mov	r1, r2
 800093e:	2200      	movs	r2, #0
 8000940:	602a      	str	r2, [r5, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	f7ff fd0a 	bl	800035c <_read>
 8000948:	1c43      	adds	r3, r0, #1
 800094a:	d102      	bne.n	8000952 <_read_r+0x1e>
 800094c:	682b      	ldr	r3, [r5, #0]
 800094e:	b103      	cbz	r3, 8000952 <_read_r+0x1e>
 8000950:	6023      	str	r3, [r4, #0]
 8000952:	bd38      	pop	{r3, r4, r5, pc}
 8000954:	200001b8 	.word	0x200001b8

08000958 <_write_r>:
 8000958:	b538      	push	{r3, r4, r5, lr}
 800095a:	4d07      	ldr	r5, [pc, #28]	@ (8000978 <_write_r+0x20>)
 800095c:	4604      	mov	r4, r0
 800095e:	4608      	mov	r0, r1
 8000960:	4611      	mov	r1, r2
 8000962:	2200      	movs	r2, #0
 8000964:	602a      	str	r2, [r5, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	f7ff fd15 	bl	8000396 <_write>
 800096c:	1c43      	adds	r3, r0, #1
 800096e:	d102      	bne.n	8000976 <_write_r+0x1e>
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	b103      	cbz	r3, 8000976 <_write_r+0x1e>
 8000974:	6023      	str	r3, [r4, #0]
 8000976:	bd38      	pop	{r3, r4, r5, pc}
 8000978:	200001b8 	.word	0x200001b8

0800097c <__errno>:
 800097c:	4b01      	ldr	r3, [pc, #4]	@ (8000984 <__errno+0x8>)
 800097e:	6818      	ldr	r0, [r3, #0]
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	2000000c 	.word	0x2000000c

08000988 <__libc_init_array>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	4d0d      	ldr	r5, [pc, #52]	@ (80009c0 <__libc_init_array+0x38>)
 800098c:	4c0d      	ldr	r4, [pc, #52]	@ (80009c4 <__libc_init_array+0x3c>)
 800098e:	1b64      	subs	r4, r4, r5
 8000990:	10a4      	asrs	r4, r4, #2
 8000992:	2600      	movs	r6, #0
 8000994:	42a6      	cmp	r6, r4
 8000996:	d109      	bne.n	80009ac <__libc_init_array+0x24>
 8000998:	4d0b      	ldr	r5, [pc, #44]	@ (80009c8 <__libc_init_array+0x40>)
 800099a:	4c0c      	ldr	r4, [pc, #48]	@ (80009cc <__libc_init_array+0x44>)
 800099c:	f000 fa50 	bl	8000e40 <_init>
 80009a0:	1b64      	subs	r4, r4, r5
 80009a2:	10a4      	asrs	r4, r4, #2
 80009a4:	2600      	movs	r6, #0
 80009a6:	42a6      	cmp	r6, r4
 80009a8:	d105      	bne.n	80009b6 <__libc_init_array+0x2e>
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80009b0:	4798      	blx	r3
 80009b2:	3601      	adds	r6, #1
 80009b4:	e7ee      	b.n	8000994 <__libc_init_array+0xc>
 80009b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ba:	4798      	blx	r3
 80009bc:	3601      	adds	r6, #1
 80009be:	e7f2      	b.n	80009a6 <__libc_init_array+0x1e>
 80009c0:	08000e60 	.word	0x08000e60
 80009c4:	08000e60 	.word	0x08000e60
 80009c8:	08000e60 	.word	0x08000e60
 80009cc:	08000e64 	.word	0x08000e64

080009d0 <__retarget_lock_init_recursive>:
 80009d0:	4770      	bx	lr

080009d2 <__retarget_lock_acquire_recursive>:
 80009d2:	4770      	bx	lr

080009d4 <__retarget_lock_release_recursive>:
 80009d4:	4770      	bx	lr
	...

080009d8 <_free_r>:
 80009d8:	b538      	push	{r3, r4, r5, lr}
 80009da:	4605      	mov	r5, r0
 80009dc:	2900      	cmp	r1, #0
 80009de:	d041      	beq.n	8000a64 <_free_r+0x8c>
 80009e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009e4:	1f0c      	subs	r4, r1, #4
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	bfb8      	it	lt
 80009ea:	18e4      	addlt	r4, r4, r3
 80009ec:	f000 f8e0 	bl	8000bb0 <__malloc_lock>
 80009f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a68 <_free_r+0x90>)
 80009f2:	6813      	ldr	r3, [r2, #0]
 80009f4:	b933      	cbnz	r3, 8000a04 <_free_r+0x2c>
 80009f6:	6063      	str	r3, [r4, #4]
 80009f8:	6014      	str	r4, [r2, #0]
 80009fa:	4628      	mov	r0, r5
 80009fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a00:	f000 b8dc 	b.w	8000bbc <__malloc_unlock>
 8000a04:	42a3      	cmp	r3, r4
 8000a06:	d908      	bls.n	8000a1a <_free_r+0x42>
 8000a08:	6820      	ldr	r0, [r4, #0]
 8000a0a:	1821      	adds	r1, r4, r0
 8000a0c:	428b      	cmp	r3, r1
 8000a0e:	bf01      	itttt	eq
 8000a10:	6819      	ldreq	r1, [r3, #0]
 8000a12:	685b      	ldreq	r3, [r3, #4]
 8000a14:	1809      	addeq	r1, r1, r0
 8000a16:	6021      	streq	r1, [r4, #0]
 8000a18:	e7ed      	b.n	80009f6 <_free_r+0x1e>
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	b10b      	cbz	r3, 8000a24 <_free_r+0x4c>
 8000a20:	42a3      	cmp	r3, r4
 8000a22:	d9fa      	bls.n	8000a1a <_free_r+0x42>
 8000a24:	6811      	ldr	r1, [r2, #0]
 8000a26:	1850      	adds	r0, r2, r1
 8000a28:	42a0      	cmp	r0, r4
 8000a2a:	d10b      	bne.n	8000a44 <_free_r+0x6c>
 8000a2c:	6820      	ldr	r0, [r4, #0]
 8000a2e:	4401      	add	r1, r0
 8000a30:	1850      	adds	r0, r2, r1
 8000a32:	4283      	cmp	r3, r0
 8000a34:	6011      	str	r1, [r2, #0]
 8000a36:	d1e0      	bne.n	80009fa <_free_r+0x22>
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	6053      	str	r3, [r2, #4]
 8000a3e:	4408      	add	r0, r1
 8000a40:	6010      	str	r0, [r2, #0]
 8000a42:	e7da      	b.n	80009fa <_free_r+0x22>
 8000a44:	d902      	bls.n	8000a4c <_free_r+0x74>
 8000a46:	230c      	movs	r3, #12
 8000a48:	602b      	str	r3, [r5, #0]
 8000a4a:	e7d6      	b.n	80009fa <_free_r+0x22>
 8000a4c:	6820      	ldr	r0, [r4, #0]
 8000a4e:	1821      	adds	r1, r4, r0
 8000a50:	428b      	cmp	r3, r1
 8000a52:	bf04      	itt	eq
 8000a54:	6819      	ldreq	r1, [r3, #0]
 8000a56:	685b      	ldreq	r3, [r3, #4]
 8000a58:	6063      	str	r3, [r4, #4]
 8000a5a:	bf04      	itt	eq
 8000a5c:	1809      	addeq	r1, r1, r0
 8000a5e:	6021      	streq	r1, [r4, #0]
 8000a60:	6054      	str	r4, [r2, #4]
 8000a62:	e7ca      	b.n	80009fa <_free_r+0x22>
 8000a64:	bd38      	pop	{r3, r4, r5, pc}
 8000a66:	bf00      	nop
 8000a68:	200001c4 	.word	0x200001c4

08000a6c <sbrk_aligned>:
 8000a6c:	b570      	push	{r4, r5, r6, lr}
 8000a6e:	4e0f      	ldr	r6, [pc, #60]	@ (8000aac <sbrk_aligned+0x40>)
 8000a70:	460c      	mov	r4, r1
 8000a72:	6831      	ldr	r1, [r6, #0]
 8000a74:	4605      	mov	r5, r0
 8000a76:	b911      	cbnz	r1, 8000a7e <sbrk_aligned+0x12>
 8000a78:	f000 f9d2 	bl	8000e20 <_sbrk_r>
 8000a7c:	6030      	str	r0, [r6, #0]
 8000a7e:	4621      	mov	r1, r4
 8000a80:	4628      	mov	r0, r5
 8000a82:	f000 f9cd 	bl	8000e20 <_sbrk_r>
 8000a86:	1c43      	adds	r3, r0, #1
 8000a88:	d103      	bne.n	8000a92 <sbrk_aligned+0x26>
 8000a8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000a8e:	4620      	mov	r0, r4
 8000a90:	bd70      	pop	{r4, r5, r6, pc}
 8000a92:	1cc4      	adds	r4, r0, #3
 8000a94:	f024 0403 	bic.w	r4, r4, #3
 8000a98:	42a0      	cmp	r0, r4
 8000a9a:	d0f8      	beq.n	8000a8e <sbrk_aligned+0x22>
 8000a9c:	1a21      	subs	r1, r4, r0
 8000a9e:	4628      	mov	r0, r5
 8000aa0:	f000 f9be 	bl	8000e20 <_sbrk_r>
 8000aa4:	3001      	adds	r0, #1
 8000aa6:	d1f2      	bne.n	8000a8e <sbrk_aligned+0x22>
 8000aa8:	e7ef      	b.n	8000a8a <sbrk_aligned+0x1e>
 8000aaa:	bf00      	nop
 8000aac:	200001c0 	.word	0x200001c0

08000ab0 <_malloc_r>:
 8000ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ab4:	1ccd      	adds	r5, r1, #3
 8000ab6:	f025 0503 	bic.w	r5, r5, #3
 8000aba:	3508      	adds	r5, #8
 8000abc:	2d0c      	cmp	r5, #12
 8000abe:	bf38      	it	cc
 8000ac0:	250c      	movcc	r5, #12
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	4606      	mov	r6, r0
 8000ac6:	db01      	blt.n	8000acc <_malloc_r+0x1c>
 8000ac8:	42a9      	cmp	r1, r5
 8000aca:	d904      	bls.n	8000ad6 <_malloc_r+0x26>
 8000acc:	230c      	movs	r3, #12
 8000ace:	6033      	str	r3, [r6, #0]
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ad6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bac <_malloc_r+0xfc>
 8000ada:	f000 f869 	bl	8000bb0 <__malloc_lock>
 8000ade:	f8d8 3000 	ldr.w	r3, [r8]
 8000ae2:	461c      	mov	r4, r3
 8000ae4:	bb44      	cbnz	r4, 8000b38 <_malloc_r+0x88>
 8000ae6:	4629      	mov	r1, r5
 8000ae8:	4630      	mov	r0, r6
 8000aea:	f7ff ffbf 	bl	8000a6c <sbrk_aligned>
 8000aee:	1c43      	adds	r3, r0, #1
 8000af0:	4604      	mov	r4, r0
 8000af2:	d158      	bne.n	8000ba6 <_malloc_r+0xf6>
 8000af4:	f8d8 4000 	ldr.w	r4, [r8]
 8000af8:	4627      	mov	r7, r4
 8000afa:	2f00      	cmp	r7, #0
 8000afc:	d143      	bne.n	8000b86 <_malloc_r+0xd6>
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d04b      	beq.n	8000b9a <_malloc_r+0xea>
 8000b02:	6823      	ldr	r3, [r4, #0]
 8000b04:	4639      	mov	r1, r7
 8000b06:	4630      	mov	r0, r6
 8000b08:	eb04 0903 	add.w	r9, r4, r3
 8000b0c:	f000 f988 	bl	8000e20 <_sbrk_r>
 8000b10:	4581      	cmp	r9, r0
 8000b12:	d142      	bne.n	8000b9a <_malloc_r+0xea>
 8000b14:	6821      	ldr	r1, [r4, #0]
 8000b16:	1a6d      	subs	r5, r5, r1
 8000b18:	4629      	mov	r1, r5
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	f7ff ffa6 	bl	8000a6c <sbrk_aligned>
 8000b20:	3001      	adds	r0, #1
 8000b22:	d03a      	beq.n	8000b9a <_malloc_r+0xea>
 8000b24:	6823      	ldr	r3, [r4, #0]
 8000b26:	442b      	add	r3, r5
 8000b28:	6023      	str	r3, [r4, #0]
 8000b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b2e:	685a      	ldr	r2, [r3, #4]
 8000b30:	bb62      	cbnz	r2, 8000b8c <_malloc_r+0xdc>
 8000b32:	f8c8 7000 	str.w	r7, [r8]
 8000b36:	e00f      	b.n	8000b58 <_malloc_r+0xa8>
 8000b38:	6822      	ldr	r2, [r4, #0]
 8000b3a:	1b52      	subs	r2, r2, r5
 8000b3c:	d420      	bmi.n	8000b80 <_malloc_r+0xd0>
 8000b3e:	2a0b      	cmp	r2, #11
 8000b40:	d917      	bls.n	8000b72 <_malloc_r+0xc2>
 8000b42:	1961      	adds	r1, r4, r5
 8000b44:	42a3      	cmp	r3, r4
 8000b46:	6025      	str	r5, [r4, #0]
 8000b48:	bf18      	it	ne
 8000b4a:	6059      	strne	r1, [r3, #4]
 8000b4c:	6863      	ldr	r3, [r4, #4]
 8000b4e:	bf08      	it	eq
 8000b50:	f8c8 1000 	streq.w	r1, [r8]
 8000b54:	5162      	str	r2, [r4, r5]
 8000b56:	604b      	str	r3, [r1, #4]
 8000b58:	4630      	mov	r0, r6
 8000b5a:	f000 f82f 	bl	8000bbc <__malloc_unlock>
 8000b5e:	f104 000b 	add.w	r0, r4, #11
 8000b62:	1d23      	adds	r3, r4, #4
 8000b64:	f020 0007 	bic.w	r0, r0, #7
 8000b68:	1ac2      	subs	r2, r0, r3
 8000b6a:	bf1c      	itt	ne
 8000b6c:	1a1b      	subne	r3, r3, r0
 8000b6e:	50a3      	strne	r3, [r4, r2]
 8000b70:	e7af      	b.n	8000ad2 <_malloc_r+0x22>
 8000b72:	6862      	ldr	r2, [r4, #4]
 8000b74:	42a3      	cmp	r3, r4
 8000b76:	bf0c      	ite	eq
 8000b78:	f8c8 2000 	streq.w	r2, [r8]
 8000b7c:	605a      	strne	r2, [r3, #4]
 8000b7e:	e7eb      	b.n	8000b58 <_malloc_r+0xa8>
 8000b80:	4623      	mov	r3, r4
 8000b82:	6864      	ldr	r4, [r4, #4]
 8000b84:	e7ae      	b.n	8000ae4 <_malloc_r+0x34>
 8000b86:	463c      	mov	r4, r7
 8000b88:	687f      	ldr	r7, [r7, #4]
 8000b8a:	e7b6      	b.n	8000afa <_malloc_r+0x4a>
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	42a3      	cmp	r3, r4
 8000b92:	d1fb      	bne.n	8000b8c <_malloc_r+0xdc>
 8000b94:	2300      	movs	r3, #0
 8000b96:	6053      	str	r3, [r2, #4]
 8000b98:	e7de      	b.n	8000b58 <_malloc_r+0xa8>
 8000b9a:	230c      	movs	r3, #12
 8000b9c:	6033      	str	r3, [r6, #0]
 8000b9e:	4630      	mov	r0, r6
 8000ba0:	f000 f80c 	bl	8000bbc <__malloc_unlock>
 8000ba4:	e794      	b.n	8000ad0 <_malloc_r+0x20>
 8000ba6:	6005      	str	r5, [r0, #0]
 8000ba8:	e7d6      	b.n	8000b58 <_malloc_r+0xa8>
 8000baa:	bf00      	nop
 8000bac:	200001c4 	.word	0x200001c4

08000bb0 <__malloc_lock>:
 8000bb0:	4801      	ldr	r0, [pc, #4]	@ (8000bb8 <__malloc_lock+0x8>)
 8000bb2:	f7ff bf0e 	b.w	80009d2 <__retarget_lock_acquire_recursive>
 8000bb6:	bf00      	nop
 8000bb8:	200001bc 	.word	0x200001bc

08000bbc <__malloc_unlock>:
 8000bbc:	4801      	ldr	r0, [pc, #4]	@ (8000bc4 <__malloc_unlock+0x8>)
 8000bbe:	f7ff bf09 	b.w	80009d4 <__retarget_lock_release_recursive>
 8000bc2:	bf00      	nop
 8000bc4:	200001bc 	.word	0x200001bc

08000bc8 <__sflush_r>:
 8000bc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bce:	0716      	lsls	r6, r2, #28
 8000bd0:	4605      	mov	r5, r0
 8000bd2:	460c      	mov	r4, r1
 8000bd4:	d454      	bmi.n	8000c80 <__sflush_r+0xb8>
 8000bd6:	684b      	ldr	r3, [r1, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	dc02      	bgt.n	8000be2 <__sflush_r+0x1a>
 8000bdc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	dd48      	ble.n	8000c74 <__sflush_r+0xac>
 8000be2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d045      	beq.n	8000c74 <__sflush_r+0xac>
 8000be8:	2300      	movs	r3, #0
 8000bea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000bee:	682f      	ldr	r7, [r5, #0]
 8000bf0:	6a21      	ldr	r1, [r4, #32]
 8000bf2:	602b      	str	r3, [r5, #0]
 8000bf4:	d030      	beq.n	8000c58 <__sflush_r+0x90>
 8000bf6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000bf8:	89a3      	ldrh	r3, [r4, #12]
 8000bfa:	0759      	lsls	r1, r3, #29
 8000bfc:	d505      	bpl.n	8000c0a <__sflush_r+0x42>
 8000bfe:	6863      	ldr	r3, [r4, #4]
 8000c00:	1ad2      	subs	r2, r2, r3
 8000c02:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000c04:	b10b      	cbz	r3, 8000c0a <__sflush_r+0x42>
 8000c06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000c08:	1ad2      	subs	r2, r2, r3
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c0e:	6a21      	ldr	r1, [r4, #32]
 8000c10:	4628      	mov	r0, r5
 8000c12:	47b0      	blx	r6
 8000c14:	1c43      	adds	r3, r0, #1
 8000c16:	89a3      	ldrh	r3, [r4, #12]
 8000c18:	d106      	bne.n	8000c28 <__sflush_r+0x60>
 8000c1a:	6829      	ldr	r1, [r5, #0]
 8000c1c:	291d      	cmp	r1, #29
 8000c1e:	d82b      	bhi.n	8000c78 <__sflush_r+0xb0>
 8000c20:	4a28      	ldr	r2, [pc, #160]	@ (8000cc4 <__sflush_r+0xfc>)
 8000c22:	410a      	asrs	r2, r1
 8000c24:	07d6      	lsls	r6, r2, #31
 8000c26:	d427      	bmi.n	8000c78 <__sflush_r+0xb0>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6062      	str	r2, [r4, #4]
 8000c2c:	04d9      	lsls	r1, r3, #19
 8000c2e:	6922      	ldr	r2, [r4, #16]
 8000c30:	6022      	str	r2, [r4, #0]
 8000c32:	d504      	bpl.n	8000c3e <__sflush_r+0x76>
 8000c34:	1c42      	adds	r2, r0, #1
 8000c36:	d101      	bne.n	8000c3c <__sflush_r+0x74>
 8000c38:	682b      	ldr	r3, [r5, #0]
 8000c3a:	b903      	cbnz	r3, 8000c3e <__sflush_r+0x76>
 8000c3c:	6560      	str	r0, [r4, #84]	@ 0x54
 8000c3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000c40:	602f      	str	r7, [r5, #0]
 8000c42:	b1b9      	cbz	r1, 8000c74 <__sflush_r+0xac>
 8000c44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	d002      	beq.n	8000c52 <__sflush_r+0x8a>
 8000c4c:	4628      	mov	r0, r5
 8000c4e:	f7ff fec3 	bl	80009d8 <_free_r>
 8000c52:	2300      	movs	r3, #0
 8000c54:	6363      	str	r3, [r4, #52]	@ 0x34
 8000c56:	e00d      	b.n	8000c74 <__sflush_r+0xac>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	4628      	mov	r0, r5
 8000c5c:	47b0      	blx	r6
 8000c5e:	4602      	mov	r2, r0
 8000c60:	1c50      	adds	r0, r2, #1
 8000c62:	d1c9      	bne.n	8000bf8 <__sflush_r+0x30>
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0c6      	beq.n	8000bf8 <__sflush_r+0x30>
 8000c6a:	2b1d      	cmp	r3, #29
 8000c6c:	d001      	beq.n	8000c72 <__sflush_r+0xaa>
 8000c6e:	2b16      	cmp	r3, #22
 8000c70:	d11d      	bne.n	8000cae <__sflush_r+0xe6>
 8000c72:	602f      	str	r7, [r5, #0]
 8000c74:	2000      	movs	r0, #0
 8000c76:	e021      	b.n	8000cbc <__sflush_r+0xf4>
 8000c78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	e01a      	b.n	8000cb6 <__sflush_r+0xee>
 8000c80:	690f      	ldr	r7, [r1, #16]
 8000c82:	2f00      	cmp	r7, #0
 8000c84:	d0f6      	beq.n	8000c74 <__sflush_r+0xac>
 8000c86:	0793      	lsls	r3, r2, #30
 8000c88:	680e      	ldr	r6, [r1, #0]
 8000c8a:	bf08      	it	eq
 8000c8c:	694b      	ldreq	r3, [r1, #20]
 8000c8e:	600f      	str	r7, [r1, #0]
 8000c90:	bf18      	it	ne
 8000c92:	2300      	movne	r3, #0
 8000c94:	1bf6      	subs	r6, r6, r7
 8000c96:	608b      	str	r3, [r1, #8]
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	ddeb      	ble.n	8000c74 <__sflush_r+0xac>
 8000c9c:	6a21      	ldr	r1, [r4, #32]
 8000c9e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000ca2:	4633      	mov	r3, r6
 8000ca4:	463a      	mov	r2, r7
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	47e0      	blx	ip
 8000caa:	2800      	cmp	r0, #0
 8000cac:	dc07      	bgt.n	8000cbe <__sflush_r+0xf6>
 8000cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cb6:	81a3      	strh	r3, [r4, #12]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cbe:	4407      	add	r7, r0
 8000cc0:	1a36      	subs	r6, r6, r0
 8000cc2:	e7e9      	b.n	8000c98 <__sflush_r+0xd0>
 8000cc4:	dfbffffe 	.word	0xdfbffffe

08000cc8 <_fflush_r>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	690b      	ldr	r3, [r1, #16]
 8000ccc:	4605      	mov	r5, r0
 8000cce:	460c      	mov	r4, r1
 8000cd0:	b913      	cbnz	r3, 8000cd8 <_fflush_r+0x10>
 8000cd2:	2500      	movs	r5, #0
 8000cd4:	4628      	mov	r0, r5
 8000cd6:	bd38      	pop	{r3, r4, r5, pc}
 8000cd8:	b118      	cbz	r0, 8000ce2 <_fflush_r+0x1a>
 8000cda:	6a03      	ldr	r3, [r0, #32]
 8000cdc:	b90b      	cbnz	r3, 8000ce2 <_fflush_r+0x1a>
 8000cde:	f7ff fc93 	bl	8000608 <__sinit>
 8000ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0f3      	beq.n	8000cd2 <_fflush_r+0xa>
 8000cea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000cec:	07d0      	lsls	r0, r2, #31
 8000cee:	d404      	bmi.n	8000cfa <_fflush_r+0x32>
 8000cf0:	0599      	lsls	r1, r3, #22
 8000cf2:	d402      	bmi.n	8000cfa <_fflush_r+0x32>
 8000cf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000cf6:	f7ff fe6c 	bl	80009d2 <__retarget_lock_acquire_recursive>
 8000cfa:	4628      	mov	r0, r5
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	f7ff ff63 	bl	8000bc8 <__sflush_r>
 8000d02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d04:	07da      	lsls	r2, r3, #31
 8000d06:	4605      	mov	r5, r0
 8000d08:	d4e4      	bmi.n	8000cd4 <_fflush_r+0xc>
 8000d0a:	89a3      	ldrh	r3, [r4, #12]
 8000d0c:	059b      	lsls	r3, r3, #22
 8000d0e:	d4e1      	bmi.n	8000cd4 <_fflush_r+0xc>
 8000d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d12:	f7ff fe5f 	bl	80009d4 <__retarget_lock_release_recursive>
 8000d16:	e7dd      	b.n	8000cd4 <_fflush_r+0xc>

08000d18 <__swhatbuf_r>:
 8000d18:	b570      	push	{r4, r5, r6, lr}
 8000d1a:	460c      	mov	r4, r1
 8000d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d20:	2900      	cmp	r1, #0
 8000d22:	b096      	sub	sp, #88	@ 0x58
 8000d24:	4615      	mov	r5, r2
 8000d26:	461e      	mov	r6, r3
 8000d28:	da0d      	bge.n	8000d46 <__swhatbuf_r+0x2e>
 8000d2a:	89a3      	ldrh	r3, [r4, #12]
 8000d2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000d30:	f04f 0100 	mov.w	r1, #0
 8000d34:	bf14      	ite	ne
 8000d36:	2340      	movne	r3, #64	@ 0x40
 8000d38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	6031      	str	r1, [r6, #0]
 8000d40:	602b      	str	r3, [r5, #0]
 8000d42:	b016      	add	sp, #88	@ 0x58
 8000d44:	bd70      	pop	{r4, r5, r6, pc}
 8000d46:	466a      	mov	r2, sp
 8000d48:	f000 f848 	bl	8000ddc <_fstat_r>
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	dbec      	blt.n	8000d2a <__swhatbuf_r+0x12>
 8000d50:	9901      	ldr	r1, [sp, #4]
 8000d52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000d56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000d5a:	4259      	negs	r1, r3
 8000d5c:	4159      	adcs	r1, r3
 8000d5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d62:	e7eb      	b.n	8000d3c <__swhatbuf_r+0x24>

08000d64 <__smakebuf_r>:
 8000d64:	898b      	ldrh	r3, [r1, #12]
 8000d66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d68:	079d      	lsls	r5, r3, #30
 8000d6a:	4606      	mov	r6, r0
 8000d6c:	460c      	mov	r4, r1
 8000d6e:	d507      	bpl.n	8000d80 <__smakebuf_r+0x1c>
 8000d70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000d74:	6023      	str	r3, [r4, #0]
 8000d76:	6123      	str	r3, [r4, #16]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	6163      	str	r3, [r4, #20]
 8000d7c:	b003      	add	sp, #12
 8000d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d80:	ab01      	add	r3, sp, #4
 8000d82:	466a      	mov	r2, sp
 8000d84:	f7ff ffc8 	bl	8000d18 <__swhatbuf_r>
 8000d88:	9f00      	ldr	r7, [sp, #0]
 8000d8a:	4605      	mov	r5, r0
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	4630      	mov	r0, r6
 8000d90:	f7ff fe8e 	bl	8000ab0 <_malloc_r>
 8000d94:	b948      	cbnz	r0, 8000daa <__smakebuf_r+0x46>
 8000d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d9a:	059a      	lsls	r2, r3, #22
 8000d9c:	d4ee      	bmi.n	8000d7c <__smakebuf_r+0x18>
 8000d9e:	f023 0303 	bic.w	r3, r3, #3
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	81a3      	strh	r3, [r4, #12]
 8000da8:	e7e2      	b.n	8000d70 <__smakebuf_r+0xc>
 8000daa:	89a3      	ldrh	r3, [r4, #12]
 8000dac:	6020      	str	r0, [r4, #0]
 8000dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db2:	81a3      	strh	r3, [r4, #12]
 8000db4:	9b01      	ldr	r3, [sp, #4]
 8000db6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000dba:	b15b      	cbz	r3, 8000dd4 <__smakebuf_r+0x70>
 8000dbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	f000 f81d 	bl	8000e00 <_isatty_r>
 8000dc6:	b128      	cbz	r0, 8000dd4 <__smakebuf_r+0x70>
 8000dc8:	89a3      	ldrh	r3, [r4, #12]
 8000dca:	f023 0303 	bic.w	r3, r3, #3
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	81a3      	strh	r3, [r4, #12]
 8000dd4:	89a3      	ldrh	r3, [r4, #12]
 8000dd6:	431d      	orrs	r5, r3
 8000dd8:	81a5      	strh	r5, [r4, #12]
 8000dda:	e7cf      	b.n	8000d7c <__smakebuf_r+0x18>

08000ddc <_fstat_r>:
 8000ddc:	b538      	push	{r3, r4, r5, lr}
 8000dde:	4d07      	ldr	r5, [pc, #28]	@ (8000dfc <_fstat_r+0x20>)
 8000de0:	2300      	movs	r3, #0
 8000de2:	4604      	mov	r4, r0
 8000de4:	4608      	mov	r0, r1
 8000de6:	4611      	mov	r1, r2
 8000de8:	602b      	str	r3, [r5, #0]
 8000dea:	f7ff fafb 	bl	80003e4 <_fstat>
 8000dee:	1c43      	adds	r3, r0, #1
 8000df0:	d102      	bne.n	8000df8 <_fstat_r+0x1c>
 8000df2:	682b      	ldr	r3, [r5, #0]
 8000df4:	b103      	cbz	r3, 8000df8 <_fstat_r+0x1c>
 8000df6:	6023      	str	r3, [r4, #0]
 8000df8:	bd38      	pop	{r3, r4, r5, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200001b8 	.word	0x200001b8

08000e00 <_isatty_r>:
 8000e00:	b538      	push	{r3, r4, r5, lr}
 8000e02:	4d06      	ldr	r5, [pc, #24]	@ (8000e1c <_isatty_r+0x1c>)
 8000e04:	2300      	movs	r3, #0
 8000e06:	4604      	mov	r4, r0
 8000e08:	4608      	mov	r0, r1
 8000e0a:	602b      	str	r3, [r5, #0]
 8000e0c:	f7ff faf9 	bl	8000402 <_isatty>
 8000e10:	1c43      	adds	r3, r0, #1
 8000e12:	d102      	bne.n	8000e1a <_isatty_r+0x1a>
 8000e14:	682b      	ldr	r3, [r5, #0]
 8000e16:	b103      	cbz	r3, 8000e1a <_isatty_r+0x1a>
 8000e18:	6023      	str	r3, [r4, #0]
 8000e1a:	bd38      	pop	{r3, r4, r5, pc}
 8000e1c:	200001b8 	.word	0x200001b8

08000e20 <_sbrk_r>:
 8000e20:	b538      	push	{r3, r4, r5, lr}
 8000e22:	4d06      	ldr	r5, [pc, #24]	@ (8000e3c <_sbrk_r+0x1c>)
 8000e24:	2300      	movs	r3, #0
 8000e26:	4604      	mov	r4, r0
 8000e28:	4608      	mov	r0, r1
 8000e2a:	602b      	str	r3, [r5, #0]
 8000e2c:	f7ff fb00 	bl	8000430 <_sbrk>
 8000e30:	1c43      	adds	r3, r0, #1
 8000e32:	d102      	bne.n	8000e3a <_sbrk_r+0x1a>
 8000e34:	682b      	ldr	r3, [r5, #0]
 8000e36:	b103      	cbz	r3, 8000e3a <_sbrk_r+0x1a>
 8000e38:	6023      	str	r3, [r4, #0]
 8000e3a:	bd38      	pop	{r3, r4, r5, pc}
 8000e3c:	200001b8 	.word	0x200001b8

08000e40 <_init>:
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	bf00      	nop
 8000e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e46:	bc08      	pop	{r3}
 8000e48:	469e      	mov	lr, r3
 8000e4a:	4770      	bx	lr

08000e4c <_fini>:
 8000e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4e:	bf00      	nop
 8000e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e52:	bc08      	pop	{r3}
 8000e54:	469e      	mov	lr, r3
 8000e56:	4770      	bx	lr
