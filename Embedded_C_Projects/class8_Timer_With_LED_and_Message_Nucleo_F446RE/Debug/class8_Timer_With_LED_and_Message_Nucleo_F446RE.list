
class8_Timer_With_LED_and_Message_Nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d04  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000ec8  08000ec8  00001ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ee4  08000ee4  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ee4  08000ee4  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ee4  08000ee4  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ee4  08000ee4  00001ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ee8  08000ee8  00001ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000eec  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000f48  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000f48  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001126  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000455  00000000  00000000  000031ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  00003608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000dc  00000000  00000000  00003748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d696  00000000  00000000  00003824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000136f  00000000  00000000  00010eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004788e  00000000  00000000  00012229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00059ab7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a80  00000000  00000000  00059afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0005a57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000eb0 	.word	0x08000eb0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08000eb0 	.word	0x08000eb0

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4906      	ldr	r1, [pc, #24]	@ (8000238 <__NVIC_EnableIRQ+0x34>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	e000e100 	.word	0xe000e100

0800023c <Timer2_Init>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


void Timer2_Init(uint32_t delay) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000244:	4b12      	ldr	r3, [pc, #72]	@ (8000290 <Timer2_Init+0x54>)
 8000246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000248:	4a11      	ldr	r2, [pc, #68]	@ (8000290 <Timer2_Init+0x54>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM2->PSC = 160000 - 1;
 8000250:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000254:	4a0f      	ldr	r2, [pc, #60]	@ (8000294 <Timer2_Init+0x58>)
 8000256:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = (100  - 1) * delay;
 8000258:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	4613      	mov	r3, r2
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	4413      	add	r3, r2
 8000264:	015a      	lsls	r2, r3, #5
 8000266:	4413      	add	r3, r2
 8000268:	62cb      	str	r3, [r1, #44]	@ 0x2c
	TIM2->CNT = 0;
 800026a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800026e:	2200      	movs	r2, #0
 8000270:	625a      	str	r2, [r3, #36]	@ 0x24

	TIM2->DIER |= TIM_DIER_UIE;
 8000272:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM2_IRQn);
 8000282:	201c      	movs	r0, #28
 8000284:	f7ff ffbe 	bl	8000204 <__NVIC_EnableIRQ>
}
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40023800 	.word	0x40023800
 8000294:	000270ff 	.word	0x000270ff

08000298 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 800029c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a0:	691b      	ldr	r3, [r3, #16]
 80002a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a6:	f023 0301 	bic.w	r3, r3, #1
 80002aa:	6113      	str	r3, [r2, #16]
	printf("Tim2_IRQHandler\n");
 80002ac:	4805      	ldr	r0, [pc, #20]	@ (80002c4 <TIM2_IRQHandler+0x2c>)
 80002ae:	f000 fa6f 	bl	8000790 <puts>
	GPIOA->ODR ^= (1U << 0);
 80002b2:	4b05      	ldr	r3, [pc, #20]	@ (80002c8 <TIM2_IRQHandler+0x30>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	4a04      	ldr	r2, [pc, #16]	@ (80002c8 <TIM2_IRQHandler+0x30>)
 80002b8:	f083 0301 	eor.w	r3, r3, #1
 80002bc:	6153      	str	r3, [r2, #20]
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	08000ec8 	.word	0x08000ec8
 80002c8:	40020000 	.word	0x40020000

080002cc <start_Timer2>:

void start_Timer2() {
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	TIM2->CR1 |= TIM_CR1_CEN;
 80002d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6013      	str	r3, [r2, #0]
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr

080002e8 <GPIOA_Init>:

void GPIOA_Init(uint32_t pin) {
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002f0:	4b19      	ldr	r3, [pc, #100]	@ (8000358 <GPIOA_Init+0x70>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f4:	4a18      	ldr	r2, [pc, #96]	@ (8000358 <GPIOA_Init+0x70>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER |= (1U << (2 * pin));
 80002fc:	4b17      	ldr	r3, [pc, #92]	@ (800035c <GPIOA_Init+0x74>)
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	2101      	movs	r1, #1
 8000306:	fa01 f303 	lsl.w	r3, r1, r3
 800030a:	4914      	ldr	r1, [pc, #80]	@ (800035c <GPIOA_Init+0x74>)
 800030c:	4313      	orrs	r3, r2
 800030e:	600b      	str	r3, [r1, #0]
	GPIOA->OTYPER &= ~(1U << pin);
 8000310:	4b12      	ldr	r3, [pc, #72]	@ (800035c <GPIOA_Init+0x74>)
 8000312:	685a      	ldr	r2, [r3, #4]
 8000314:	2101      	movs	r1, #1
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	fa01 f303 	lsl.w	r3, r1, r3
 800031c:	43db      	mvns	r3, r3
 800031e:	490f      	ldr	r1, [pc, #60]	@ (800035c <GPIOA_Init+0x74>)
 8000320:	4013      	ands	r3, r2
 8000322:	604b      	str	r3, [r1, #4]
	GPIOA->OSPEEDR |= (3U << (2 * pin));
 8000324:	4b0d      	ldr	r3, [pc, #52]	@ (800035c <GPIOA_Init+0x74>)
 8000326:	689a      	ldr	r2, [r3, #8]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	2103      	movs	r1, #3
 800032e:	fa01 f303 	lsl.w	r3, r1, r3
 8000332:	490a      	ldr	r1, [pc, #40]	@ (800035c <GPIOA_Init+0x74>)
 8000334:	4313      	orrs	r3, r2
 8000336:	608b      	str	r3, [r1, #8]
	GPIOA->PUPDR |= (1U << (2 * pin));
 8000338:	4b08      	ldr	r3, [pc, #32]	@ (800035c <GPIOA_Init+0x74>)
 800033a:	68da      	ldr	r2, [r3, #12]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	2101      	movs	r1, #1
 8000342:	fa01 f303 	lsl.w	r3, r1, r3
 8000346:	4905      	ldr	r1, [pc, #20]	@ (800035c <GPIOA_Init+0x74>)
 8000348:	4313      	orrs	r3, r2
 800034a:	60cb      	str	r3, [r1, #12]
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800
 800035c:	40020000 	.word	0x40020000

08000360 <main>:

int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	GPIOA_Init(0u);
 8000364:	2000      	movs	r0, #0
 8000366:	f7ff ffbf 	bl	80002e8 <GPIOA_Init>
	Timer2_Init(1U);
 800036a:	2001      	movs	r0, #1
 800036c:	f7ff ff66 	bl	800023c <Timer2_Init>

	start_Timer2();
 8000370:	f7ff ffac 	bl	80002cc <start_Timer2>
    /* Loop forever */
	for(;;) {
		printf("main-for\n");
 8000374:	4801      	ldr	r0, [pc, #4]	@ (800037c <main+0x1c>)
 8000376:	f000 fa0b 	bl	8000790 <puts>
 800037a:	e7fb      	b.n	8000374 <main+0x14>
 800037c:	08000ed8 	.word	0x08000ed8

08000380 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800038a:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <ITM_SendChar+0x44>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a0d      	ldr	r2, [pc, #52]	@ (80003c4 <ITM_SendChar+0x44>)
 8000390:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000394:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000396:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <ITM_SendChar+0x48>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a0b      	ldr	r2, [pc, #44]	@ (80003c8 <ITM_SendChar+0x48>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80003a2:	bf00      	nop
 80003a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0f8      	beq.n	80003a4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80003b2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	6013      	str	r3, [r2, #0]
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	e000edfc 	.word	0xe000edfc
 80003c8:	e0000e00 	.word	0xe0000e00

080003cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	e00a      	b.n	80003f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003de:	f3af 8000 	nop.w
 80003e2:	4601      	mov	r1, r0
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	1c5a      	adds	r2, r3, #1
 80003e8:	60ba      	str	r2, [r7, #8]
 80003ea:	b2ca      	uxtb	r2, r1
 80003ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	3301      	adds	r3, #1
 80003f2:	617b      	str	r3, [r7, #20]
 80003f4:	697a      	ldr	r2, [r7, #20]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	dbf0      	blt.n	80003de <_read+0x12>
	}

return len;
 80003fc:	687b      	ldr	r3, [r7, #4]
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b086      	sub	sp, #24
 800040a:	af00      	add	r7, sp, #0
 800040c:	60f8      	str	r0, [r7, #12]
 800040e:	60b9      	str	r1, [r7, #8]
 8000410:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]
 8000416:	e009      	b.n	800042c <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	1c5a      	adds	r2, r3, #1
 800041c:	60ba      	str	r2, [r7, #8]
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ffad 	bl	8000380 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	3301      	adds	r3, #1
 800042a:	617b      	str	r3, [r7, #20]
 800042c:	697a      	ldr	r2, [r7, #20]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	429a      	cmp	r2, r3
 8000432:	dbf1      	blt.n	8000418 <_write+0x12>
	}
	return len;
 8000434:	687b      	ldr	r3, [r7, #4]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <_close>:

int _close(int file)
{
 800043e:	b480      	push	{r7}
 8000440:	b083      	sub	sp, #12
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
	return -1;
 8000446:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800044a:	4618      	mov	r0, r3
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr

08000454 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000464:	605a      	str	r2, [r3, #4]
	return 0;
 8000466:	2300      	movs	r3, #0
}
 8000468:	4618      	mov	r0, r3
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr

08000472 <_isatty>:

int _isatty(int file)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
	return 1;
 800047a:	2301      	movs	r3, #1
}
 800047c:	4618      	mov	r0, r3
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr

08000486 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000486:	b480      	push	{r7}
 8000488:	b085      	sub	sp, #20
 800048a:	af00      	add	r7, sp, #0
 800048c:	60f8      	str	r0, [r7, #12]
 800048e:	60b9      	str	r1, [r7, #8]
 8000490:	607a      	str	r2, [r7, #4]
	return 0;
 8000492:	2300      	movs	r3, #0
}
 8000494:	4618      	mov	r0, r3
 8000496:	3714      	adds	r7, #20
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
	...

080004a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a8:	4a14      	ldr	r2, [pc, #80]	@ (80004fc <_sbrk+0x5c>)
 80004aa:	4b15      	ldr	r3, [pc, #84]	@ (8000500 <_sbrk+0x60>)
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004b4:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <_sbrk+0x64>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d102      	bne.n	80004c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004bc:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <_sbrk+0x64>)
 80004be:	4a12      	ldr	r2, [pc, #72]	@ (8000508 <_sbrk+0x68>)
 80004c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004c2:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <_sbrk+0x64>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	693a      	ldr	r2, [r7, #16]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d207      	bcs.n	80004e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004d0:	f000 fa8c 	bl	80009ec <__errno>
 80004d4:	4603      	mov	r3, r0
 80004d6:	220c      	movs	r2, #12
 80004d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004de:	e009      	b.n	80004f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004e0:	4b08      	ldr	r3, [pc, #32]	@ (8000504 <_sbrk+0x64>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004e6:	4b07      	ldr	r3, [pc, #28]	@ (8000504 <_sbrk+0x64>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	4a05      	ldr	r2, [pc, #20]	@ (8000504 <_sbrk+0x64>)
 80004f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004f2:	68fb      	ldr	r3, [r7, #12]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3718      	adds	r7, #24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20020000 	.word	0x20020000
 8000500:	00000400 	.word	0x00000400
 8000504:	20000078 	.word	0x20000078
 8000508:	200001c8 	.word	0x200001c8

0800050c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800050c:	480d      	ldr	r0, [pc, #52]	@ (8000544 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000510:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480c      	ldr	r0, [pc, #48]	@ (8000548 <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490d      	ldr	r1, [pc, #52]	@ (800054c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0d      	ldr	r2, [pc, #52]	@ (8000550 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0a      	ldr	r2, [pc, #40]	@ (8000554 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0a      	ldr	r4, [pc, #40]	@ (8000558 <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800053a:	f000 fa5d 	bl	80009f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053e:	f7ff ff0f 	bl	8000360 <main>

08000542 <LoopForever>:

LoopForever:
  b LoopForever
 8000542:	e7fe      	b.n	8000542 <LoopForever>
  ldr   r0, =_estack
 8000544:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800054c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000550:	08000eec 	.word	0x08000eec
  ldr r2, =_sbss
 8000554:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000558:	200001c8 	.word	0x200001c8

0800055c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800055c:	e7fe      	b.n	800055c <ADC_IRQHandler>
	...

08000560 <std>:
 8000560:	2300      	movs	r3, #0
 8000562:	b510      	push	{r4, lr}
 8000564:	4604      	mov	r4, r0
 8000566:	e9c0 3300 	strd	r3, r3, [r0]
 800056a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800056e:	6083      	str	r3, [r0, #8]
 8000570:	8181      	strh	r1, [r0, #12]
 8000572:	6643      	str	r3, [r0, #100]	@ 0x64
 8000574:	81c2      	strh	r2, [r0, #14]
 8000576:	6183      	str	r3, [r0, #24]
 8000578:	4619      	mov	r1, r3
 800057a:	2208      	movs	r2, #8
 800057c:	305c      	adds	r0, #92	@ 0x5c
 800057e:	f000 f9e7 	bl	8000950 <memset>
 8000582:	4b0d      	ldr	r3, [pc, #52]	@ (80005b8 <std+0x58>)
 8000584:	6263      	str	r3, [r4, #36]	@ 0x24
 8000586:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <std+0x5c>)
 8000588:	62a3      	str	r3, [r4, #40]	@ 0x28
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <std+0x60>)
 800058c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800058e:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <std+0x64>)
 8000590:	6323      	str	r3, [r4, #48]	@ 0x30
 8000592:	4b0d      	ldr	r3, [pc, #52]	@ (80005c8 <std+0x68>)
 8000594:	6224      	str	r4, [r4, #32]
 8000596:	429c      	cmp	r4, r3
 8000598:	d006      	beq.n	80005a8 <std+0x48>
 800059a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800059e:	4294      	cmp	r4, r2
 80005a0:	d002      	beq.n	80005a8 <std+0x48>
 80005a2:	33d0      	adds	r3, #208	@ 0xd0
 80005a4:	429c      	cmp	r4, r3
 80005a6:	d105      	bne.n	80005b4 <std+0x54>
 80005a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80005ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005b0:	f000 ba46 	b.w	8000a40 <__retarget_lock_init_recursive>
 80005b4:	bd10      	pop	{r4, pc}
 80005b6:	bf00      	nop
 80005b8:	080007a1 	.word	0x080007a1
 80005bc:	080007c3 	.word	0x080007c3
 80005c0:	080007fb 	.word	0x080007fb
 80005c4:	0800081f 	.word	0x0800081f
 80005c8:	2000007c 	.word	0x2000007c

080005cc <stdio_exit_handler>:
 80005cc:	4a02      	ldr	r2, [pc, #8]	@ (80005d8 <stdio_exit_handler+0xc>)
 80005ce:	4903      	ldr	r1, [pc, #12]	@ (80005dc <stdio_exit_handler+0x10>)
 80005d0:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <stdio_exit_handler+0x14>)
 80005d2:	f000 b869 	b.w	80006a8 <_fwalk_sglue>
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000
 80005dc:	08000d39 	.word	0x08000d39
 80005e0:	20000010 	.word	0x20000010

080005e4 <cleanup_stdio>:
 80005e4:	6841      	ldr	r1, [r0, #4]
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <cleanup_stdio+0x34>)
 80005e8:	4299      	cmp	r1, r3
 80005ea:	b510      	push	{r4, lr}
 80005ec:	4604      	mov	r4, r0
 80005ee:	d001      	beq.n	80005f4 <cleanup_stdio+0x10>
 80005f0:	f000 fba2 	bl	8000d38 <_fflush_r>
 80005f4:	68a1      	ldr	r1, [r4, #8]
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <cleanup_stdio+0x38>)
 80005f8:	4299      	cmp	r1, r3
 80005fa:	d002      	beq.n	8000602 <cleanup_stdio+0x1e>
 80005fc:	4620      	mov	r0, r4
 80005fe:	f000 fb9b 	bl	8000d38 <_fflush_r>
 8000602:	68e1      	ldr	r1, [r4, #12]
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <cleanup_stdio+0x3c>)
 8000606:	4299      	cmp	r1, r3
 8000608:	d004      	beq.n	8000614 <cleanup_stdio+0x30>
 800060a:	4620      	mov	r0, r4
 800060c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000610:	f000 bb92 	b.w	8000d38 <_fflush_r>
 8000614:	bd10      	pop	{r4, pc}
 8000616:	bf00      	nop
 8000618:	2000007c 	.word	0x2000007c
 800061c:	200000e4 	.word	0x200000e4
 8000620:	2000014c 	.word	0x2000014c

08000624 <global_stdio_init.part.0>:
 8000624:	b510      	push	{r4, lr}
 8000626:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <global_stdio_init.part.0+0x30>)
 8000628:	4c0b      	ldr	r4, [pc, #44]	@ (8000658 <global_stdio_init.part.0+0x34>)
 800062a:	4a0c      	ldr	r2, [pc, #48]	@ (800065c <global_stdio_init.part.0+0x38>)
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	4620      	mov	r0, r4
 8000630:	2200      	movs	r2, #0
 8000632:	2104      	movs	r1, #4
 8000634:	f7ff ff94 	bl	8000560 <std>
 8000638:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800063c:	2201      	movs	r2, #1
 800063e:	2109      	movs	r1, #9
 8000640:	f7ff ff8e 	bl	8000560 <std>
 8000644:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000648:	2202      	movs	r2, #2
 800064a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800064e:	2112      	movs	r1, #18
 8000650:	f7ff bf86 	b.w	8000560 <std>
 8000654:	200001b4 	.word	0x200001b4
 8000658:	2000007c 	.word	0x2000007c
 800065c:	080005cd 	.word	0x080005cd

08000660 <__sfp_lock_acquire>:
 8000660:	4801      	ldr	r0, [pc, #4]	@ (8000668 <__sfp_lock_acquire+0x8>)
 8000662:	f000 b9ee 	b.w	8000a42 <__retarget_lock_acquire_recursive>
 8000666:	bf00      	nop
 8000668:	200001bd 	.word	0x200001bd

0800066c <__sfp_lock_release>:
 800066c:	4801      	ldr	r0, [pc, #4]	@ (8000674 <__sfp_lock_release+0x8>)
 800066e:	f000 b9e9 	b.w	8000a44 <__retarget_lock_release_recursive>
 8000672:	bf00      	nop
 8000674:	200001bd 	.word	0x200001bd

08000678 <__sinit>:
 8000678:	b510      	push	{r4, lr}
 800067a:	4604      	mov	r4, r0
 800067c:	f7ff fff0 	bl	8000660 <__sfp_lock_acquire>
 8000680:	6a23      	ldr	r3, [r4, #32]
 8000682:	b11b      	cbz	r3, 800068c <__sinit+0x14>
 8000684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000688:	f7ff bff0 	b.w	800066c <__sfp_lock_release>
 800068c:	4b04      	ldr	r3, [pc, #16]	@ (80006a0 <__sinit+0x28>)
 800068e:	6223      	str	r3, [r4, #32]
 8000690:	4b04      	ldr	r3, [pc, #16]	@ (80006a4 <__sinit+0x2c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1f5      	bne.n	8000684 <__sinit+0xc>
 8000698:	f7ff ffc4 	bl	8000624 <global_stdio_init.part.0>
 800069c:	e7f2      	b.n	8000684 <__sinit+0xc>
 800069e:	bf00      	nop
 80006a0:	080005e5 	.word	0x080005e5
 80006a4:	200001b4 	.word	0x200001b4

080006a8 <_fwalk_sglue>:
 80006a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006ac:	4607      	mov	r7, r0
 80006ae:	4688      	mov	r8, r1
 80006b0:	4614      	mov	r4, r2
 80006b2:	2600      	movs	r6, #0
 80006b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006b8:	f1b9 0901 	subs.w	r9, r9, #1
 80006bc:	d505      	bpl.n	80006ca <_fwalk_sglue+0x22>
 80006be:	6824      	ldr	r4, [r4, #0]
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	d1f7      	bne.n	80006b4 <_fwalk_sglue+0xc>
 80006c4:	4630      	mov	r0, r6
 80006c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006ca:	89ab      	ldrh	r3, [r5, #12]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d907      	bls.n	80006e0 <_fwalk_sglue+0x38>
 80006d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006d4:	3301      	adds	r3, #1
 80006d6:	d003      	beq.n	80006e0 <_fwalk_sglue+0x38>
 80006d8:	4629      	mov	r1, r5
 80006da:	4638      	mov	r0, r7
 80006dc:	47c0      	blx	r8
 80006de:	4306      	orrs	r6, r0
 80006e0:	3568      	adds	r5, #104	@ 0x68
 80006e2:	e7e9      	b.n	80006b8 <_fwalk_sglue+0x10>

080006e4 <_puts_r>:
 80006e4:	6a03      	ldr	r3, [r0, #32]
 80006e6:	b570      	push	{r4, r5, r6, lr}
 80006e8:	6884      	ldr	r4, [r0, #8]
 80006ea:	4605      	mov	r5, r0
 80006ec:	460e      	mov	r6, r1
 80006ee:	b90b      	cbnz	r3, 80006f4 <_puts_r+0x10>
 80006f0:	f7ff ffc2 	bl	8000678 <__sinit>
 80006f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006f6:	07db      	lsls	r3, r3, #31
 80006f8:	d405      	bmi.n	8000706 <_puts_r+0x22>
 80006fa:	89a3      	ldrh	r3, [r4, #12]
 80006fc:	0598      	lsls	r0, r3, #22
 80006fe:	d402      	bmi.n	8000706 <_puts_r+0x22>
 8000700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000702:	f000 f99e 	bl	8000a42 <__retarget_lock_acquire_recursive>
 8000706:	89a3      	ldrh	r3, [r4, #12]
 8000708:	0719      	lsls	r1, r3, #28
 800070a:	d502      	bpl.n	8000712 <_puts_r+0x2e>
 800070c:	6923      	ldr	r3, [r4, #16]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d135      	bne.n	800077e <_puts_r+0x9a>
 8000712:	4621      	mov	r1, r4
 8000714:	4628      	mov	r0, r5
 8000716:	f000 f8c5 	bl	80008a4 <__swsetup_r>
 800071a:	b380      	cbz	r0, 800077e <_puts_r+0x9a>
 800071c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000720:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000722:	07da      	lsls	r2, r3, #31
 8000724:	d405      	bmi.n	8000732 <_puts_r+0x4e>
 8000726:	89a3      	ldrh	r3, [r4, #12]
 8000728:	059b      	lsls	r3, r3, #22
 800072a:	d402      	bmi.n	8000732 <_puts_r+0x4e>
 800072c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800072e:	f000 f989 	bl	8000a44 <__retarget_lock_release_recursive>
 8000732:	4628      	mov	r0, r5
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	2b00      	cmp	r3, #0
 8000738:	da04      	bge.n	8000744 <_puts_r+0x60>
 800073a:	69a2      	ldr	r2, [r4, #24]
 800073c:	429a      	cmp	r2, r3
 800073e:	dc17      	bgt.n	8000770 <_puts_r+0x8c>
 8000740:	290a      	cmp	r1, #10
 8000742:	d015      	beq.n	8000770 <_puts_r+0x8c>
 8000744:	6823      	ldr	r3, [r4, #0]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	6022      	str	r2, [r4, #0]
 800074a:	7019      	strb	r1, [r3, #0]
 800074c:	68a3      	ldr	r3, [r4, #8]
 800074e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000752:	3b01      	subs	r3, #1
 8000754:	60a3      	str	r3, [r4, #8]
 8000756:	2900      	cmp	r1, #0
 8000758:	d1ed      	bne.n	8000736 <_puts_r+0x52>
 800075a:	2b00      	cmp	r3, #0
 800075c:	da11      	bge.n	8000782 <_puts_r+0x9e>
 800075e:	4622      	mov	r2, r4
 8000760:	210a      	movs	r1, #10
 8000762:	4628      	mov	r0, r5
 8000764:	f000 f85f 	bl	8000826 <__swbuf_r>
 8000768:	3001      	adds	r0, #1
 800076a:	d0d7      	beq.n	800071c <_puts_r+0x38>
 800076c:	250a      	movs	r5, #10
 800076e:	e7d7      	b.n	8000720 <_puts_r+0x3c>
 8000770:	4622      	mov	r2, r4
 8000772:	4628      	mov	r0, r5
 8000774:	f000 f857 	bl	8000826 <__swbuf_r>
 8000778:	3001      	adds	r0, #1
 800077a:	d1e7      	bne.n	800074c <_puts_r+0x68>
 800077c:	e7ce      	b.n	800071c <_puts_r+0x38>
 800077e:	3e01      	subs	r6, #1
 8000780:	e7e4      	b.n	800074c <_puts_r+0x68>
 8000782:	6823      	ldr	r3, [r4, #0]
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	6022      	str	r2, [r4, #0]
 8000788:	220a      	movs	r2, #10
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	e7ee      	b.n	800076c <_puts_r+0x88>
	...

08000790 <puts>:
 8000790:	4b02      	ldr	r3, [pc, #8]	@ (800079c <puts+0xc>)
 8000792:	4601      	mov	r1, r0
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	f7ff bfa5 	b.w	80006e4 <_puts_r>
 800079a:	bf00      	nop
 800079c:	2000000c 	.word	0x2000000c

080007a0 <__sread>:
 80007a0:	b510      	push	{r4, lr}
 80007a2:	460c      	mov	r4, r1
 80007a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007a8:	f000 f8fc 	bl	80009a4 <_read_r>
 80007ac:	2800      	cmp	r0, #0
 80007ae:	bfab      	itete	ge
 80007b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80007b2:	89a3      	ldrhlt	r3, [r4, #12]
 80007b4:	181b      	addge	r3, r3, r0
 80007b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80007ba:	bfac      	ite	ge
 80007bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80007be:	81a3      	strhlt	r3, [r4, #12]
 80007c0:	bd10      	pop	{r4, pc}

080007c2 <__swrite>:
 80007c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007c6:	461f      	mov	r7, r3
 80007c8:	898b      	ldrh	r3, [r1, #12]
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	4605      	mov	r5, r0
 80007ce:	460c      	mov	r4, r1
 80007d0:	4616      	mov	r6, r2
 80007d2:	d505      	bpl.n	80007e0 <__swrite+0x1e>
 80007d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007d8:	2302      	movs	r3, #2
 80007da:	2200      	movs	r2, #0
 80007dc:	f000 f8d0 	bl	8000980 <_lseek_r>
 80007e0:	89a3      	ldrh	r3, [r4, #12]
 80007e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007ea:	81a3      	strh	r3, [r4, #12]
 80007ec:	4632      	mov	r2, r6
 80007ee:	463b      	mov	r3, r7
 80007f0:	4628      	mov	r0, r5
 80007f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80007f6:	f000 b8e7 	b.w	80009c8 <_write_r>

080007fa <__sseek>:
 80007fa:	b510      	push	{r4, lr}
 80007fc:	460c      	mov	r4, r1
 80007fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000802:	f000 f8bd 	bl	8000980 <_lseek_r>
 8000806:	1c43      	adds	r3, r0, #1
 8000808:	89a3      	ldrh	r3, [r4, #12]
 800080a:	bf15      	itete	ne
 800080c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800080e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000812:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000816:	81a3      	strheq	r3, [r4, #12]
 8000818:	bf18      	it	ne
 800081a:	81a3      	strhne	r3, [r4, #12]
 800081c:	bd10      	pop	{r4, pc}

0800081e <__sclose>:
 800081e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000822:	f000 b89d 	b.w	8000960 <_close_r>

08000826 <__swbuf_r>:
 8000826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000828:	460e      	mov	r6, r1
 800082a:	4614      	mov	r4, r2
 800082c:	4605      	mov	r5, r0
 800082e:	b118      	cbz	r0, 8000838 <__swbuf_r+0x12>
 8000830:	6a03      	ldr	r3, [r0, #32]
 8000832:	b90b      	cbnz	r3, 8000838 <__swbuf_r+0x12>
 8000834:	f7ff ff20 	bl	8000678 <__sinit>
 8000838:	69a3      	ldr	r3, [r4, #24]
 800083a:	60a3      	str	r3, [r4, #8]
 800083c:	89a3      	ldrh	r3, [r4, #12]
 800083e:	071a      	lsls	r2, r3, #28
 8000840:	d501      	bpl.n	8000846 <__swbuf_r+0x20>
 8000842:	6923      	ldr	r3, [r4, #16]
 8000844:	b943      	cbnz	r3, 8000858 <__swbuf_r+0x32>
 8000846:	4621      	mov	r1, r4
 8000848:	4628      	mov	r0, r5
 800084a:	f000 f82b 	bl	80008a4 <__swsetup_r>
 800084e:	b118      	cbz	r0, 8000858 <__swbuf_r+0x32>
 8000850:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000854:	4638      	mov	r0, r7
 8000856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	6922      	ldr	r2, [r4, #16]
 800085c:	1a98      	subs	r0, r3, r2
 800085e:	6963      	ldr	r3, [r4, #20]
 8000860:	b2f6      	uxtb	r6, r6
 8000862:	4283      	cmp	r3, r0
 8000864:	4637      	mov	r7, r6
 8000866:	dc05      	bgt.n	8000874 <__swbuf_r+0x4e>
 8000868:	4621      	mov	r1, r4
 800086a:	4628      	mov	r0, r5
 800086c:	f000 fa64 	bl	8000d38 <_fflush_r>
 8000870:	2800      	cmp	r0, #0
 8000872:	d1ed      	bne.n	8000850 <__swbuf_r+0x2a>
 8000874:	68a3      	ldr	r3, [r4, #8]
 8000876:	3b01      	subs	r3, #1
 8000878:	60a3      	str	r3, [r4, #8]
 800087a:	6823      	ldr	r3, [r4, #0]
 800087c:	1c5a      	adds	r2, r3, #1
 800087e:	6022      	str	r2, [r4, #0]
 8000880:	701e      	strb	r6, [r3, #0]
 8000882:	6962      	ldr	r2, [r4, #20]
 8000884:	1c43      	adds	r3, r0, #1
 8000886:	429a      	cmp	r2, r3
 8000888:	d004      	beq.n	8000894 <__swbuf_r+0x6e>
 800088a:	89a3      	ldrh	r3, [r4, #12]
 800088c:	07db      	lsls	r3, r3, #31
 800088e:	d5e1      	bpl.n	8000854 <__swbuf_r+0x2e>
 8000890:	2e0a      	cmp	r6, #10
 8000892:	d1df      	bne.n	8000854 <__swbuf_r+0x2e>
 8000894:	4621      	mov	r1, r4
 8000896:	4628      	mov	r0, r5
 8000898:	f000 fa4e 	bl	8000d38 <_fflush_r>
 800089c:	2800      	cmp	r0, #0
 800089e:	d0d9      	beq.n	8000854 <__swbuf_r+0x2e>
 80008a0:	e7d6      	b.n	8000850 <__swbuf_r+0x2a>
	...

080008a4 <__swsetup_r>:
 80008a4:	b538      	push	{r3, r4, r5, lr}
 80008a6:	4b29      	ldr	r3, [pc, #164]	@ (800094c <__swsetup_r+0xa8>)
 80008a8:	4605      	mov	r5, r0
 80008aa:	6818      	ldr	r0, [r3, #0]
 80008ac:	460c      	mov	r4, r1
 80008ae:	b118      	cbz	r0, 80008b8 <__swsetup_r+0x14>
 80008b0:	6a03      	ldr	r3, [r0, #32]
 80008b2:	b90b      	cbnz	r3, 80008b8 <__swsetup_r+0x14>
 80008b4:	f7ff fee0 	bl	8000678 <__sinit>
 80008b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008bc:	0719      	lsls	r1, r3, #28
 80008be:	d422      	bmi.n	8000906 <__swsetup_r+0x62>
 80008c0:	06da      	lsls	r2, r3, #27
 80008c2:	d407      	bmi.n	80008d4 <__swsetup_r+0x30>
 80008c4:	2209      	movs	r2, #9
 80008c6:	602a      	str	r2, [r5, #0]
 80008c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008cc:	81a3      	strh	r3, [r4, #12]
 80008ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008d2:	e033      	b.n	800093c <__swsetup_r+0x98>
 80008d4:	0758      	lsls	r0, r3, #29
 80008d6:	d512      	bpl.n	80008fe <__swsetup_r+0x5a>
 80008d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80008da:	b141      	cbz	r1, 80008ee <__swsetup_r+0x4a>
 80008dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80008e0:	4299      	cmp	r1, r3
 80008e2:	d002      	beq.n	80008ea <__swsetup_r+0x46>
 80008e4:	4628      	mov	r0, r5
 80008e6:	f000 f8af 	bl	8000a48 <_free_r>
 80008ea:	2300      	movs	r3, #0
 80008ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80008ee:	89a3      	ldrh	r3, [r4, #12]
 80008f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80008f4:	81a3      	strh	r3, [r4, #12]
 80008f6:	2300      	movs	r3, #0
 80008f8:	6063      	str	r3, [r4, #4]
 80008fa:	6923      	ldr	r3, [r4, #16]
 80008fc:	6023      	str	r3, [r4, #0]
 80008fe:	89a3      	ldrh	r3, [r4, #12]
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	81a3      	strh	r3, [r4, #12]
 8000906:	6923      	ldr	r3, [r4, #16]
 8000908:	b94b      	cbnz	r3, 800091e <__swsetup_r+0x7a>
 800090a:	89a3      	ldrh	r3, [r4, #12]
 800090c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000914:	d003      	beq.n	800091e <__swsetup_r+0x7a>
 8000916:	4621      	mov	r1, r4
 8000918:	4628      	mov	r0, r5
 800091a:	f000 fa5b 	bl	8000dd4 <__smakebuf_r>
 800091e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000922:	f013 0201 	ands.w	r2, r3, #1
 8000926:	d00a      	beq.n	800093e <__swsetup_r+0x9a>
 8000928:	2200      	movs	r2, #0
 800092a:	60a2      	str	r2, [r4, #8]
 800092c:	6962      	ldr	r2, [r4, #20]
 800092e:	4252      	negs	r2, r2
 8000930:	61a2      	str	r2, [r4, #24]
 8000932:	6922      	ldr	r2, [r4, #16]
 8000934:	b942      	cbnz	r2, 8000948 <__swsetup_r+0xa4>
 8000936:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800093a:	d1c5      	bne.n	80008c8 <__swsetup_r+0x24>
 800093c:	bd38      	pop	{r3, r4, r5, pc}
 800093e:	0799      	lsls	r1, r3, #30
 8000940:	bf58      	it	pl
 8000942:	6962      	ldrpl	r2, [r4, #20]
 8000944:	60a2      	str	r2, [r4, #8]
 8000946:	e7f4      	b.n	8000932 <__swsetup_r+0x8e>
 8000948:	2000      	movs	r0, #0
 800094a:	e7f7      	b.n	800093c <__swsetup_r+0x98>
 800094c:	2000000c 	.word	0x2000000c

08000950 <memset>:
 8000950:	4402      	add	r2, r0
 8000952:	4603      	mov	r3, r0
 8000954:	4293      	cmp	r3, r2
 8000956:	d100      	bne.n	800095a <memset+0xa>
 8000958:	4770      	bx	lr
 800095a:	f803 1b01 	strb.w	r1, [r3], #1
 800095e:	e7f9      	b.n	8000954 <memset+0x4>

08000960 <_close_r>:
 8000960:	b538      	push	{r3, r4, r5, lr}
 8000962:	4d06      	ldr	r5, [pc, #24]	@ (800097c <_close_r+0x1c>)
 8000964:	2300      	movs	r3, #0
 8000966:	4604      	mov	r4, r0
 8000968:	4608      	mov	r0, r1
 800096a:	602b      	str	r3, [r5, #0]
 800096c:	f7ff fd67 	bl	800043e <_close>
 8000970:	1c43      	adds	r3, r0, #1
 8000972:	d102      	bne.n	800097a <_close_r+0x1a>
 8000974:	682b      	ldr	r3, [r5, #0]
 8000976:	b103      	cbz	r3, 800097a <_close_r+0x1a>
 8000978:	6023      	str	r3, [r4, #0]
 800097a:	bd38      	pop	{r3, r4, r5, pc}
 800097c:	200001b8 	.word	0x200001b8

08000980 <_lseek_r>:
 8000980:	b538      	push	{r3, r4, r5, lr}
 8000982:	4d07      	ldr	r5, [pc, #28]	@ (80009a0 <_lseek_r+0x20>)
 8000984:	4604      	mov	r4, r0
 8000986:	4608      	mov	r0, r1
 8000988:	4611      	mov	r1, r2
 800098a:	2200      	movs	r2, #0
 800098c:	602a      	str	r2, [r5, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	f7ff fd79 	bl	8000486 <_lseek>
 8000994:	1c43      	adds	r3, r0, #1
 8000996:	d102      	bne.n	800099e <_lseek_r+0x1e>
 8000998:	682b      	ldr	r3, [r5, #0]
 800099a:	b103      	cbz	r3, 800099e <_lseek_r+0x1e>
 800099c:	6023      	str	r3, [r4, #0]
 800099e:	bd38      	pop	{r3, r4, r5, pc}
 80009a0:	200001b8 	.word	0x200001b8

080009a4 <_read_r>:
 80009a4:	b538      	push	{r3, r4, r5, lr}
 80009a6:	4d07      	ldr	r5, [pc, #28]	@ (80009c4 <_read_r+0x20>)
 80009a8:	4604      	mov	r4, r0
 80009aa:	4608      	mov	r0, r1
 80009ac:	4611      	mov	r1, r2
 80009ae:	2200      	movs	r2, #0
 80009b0:	602a      	str	r2, [r5, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	f7ff fd0a 	bl	80003cc <_read>
 80009b8:	1c43      	adds	r3, r0, #1
 80009ba:	d102      	bne.n	80009c2 <_read_r+0x1e>
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	b103      	cbz	r3, 80009c2 <_read_r+0x1e>
 80009c0:	6023      	str	r3, [r4, #0]
 80009c2:	bd38      	pop	{r3, r4, r5, pc}
 80009c4:	200001b8 	.word	0x200001b8

080009c8 <_write_r>:
 80009c8:	b538      	push	{r3, r4, r5, lr}
 80009ca:	4d07      	ldr	r5, [pc, #28]	@ (80009e8 <_write_r+0x20>)
 80009cc:	4604      	mov	r4, r0
 80009ce:	4608      	mov	r0, r1
 80009d0:	4611      	mov	r1, r2
 80009d2:	2200      	movs	r2, #0
 80009d4:	602a      	str	r2, [r5, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	f7ff fd15 	bl	8000406 <_write>
 80009dc:	1c43      	adds	r3, r0, #1
 80009de:	d102      	bne.n	80009e6 <_write_r+0x1e>
 80009e0:	682b      	ldr	r3, [r5, #0]
 80009e2:	b103      	cbz	r3, 80009e6 <_write_r+0x1e>
 80009e4:	6023      	str	r3, [r4, #0]
 80009e6:	bd38      	pop	{r3, r4, r5, pc}
 80009e8:	200001b8 	.word	0x200001b8

080009ec <__errno>:
 80009ec:	4b01      	ldr	r3, [pc, #4]	@ (80009f4 <__errno+0x8>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	2000000c 	.word	0x2000000c

080009f8 <__libc_init_array>:
 80009f8:	b570      	push	{r4, r5, r6, lr}
 80009fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000a30 <__libc_init_array+0x38>)
 80009fc:	4c0d      	ldr	r4, [pc, #52]	@ (8000a34 <__libc_init_array+0x3c>)
 80009fe:	1b64      	subs	r4, r4, r5
 8000a00:	10a4      	asrs	r4, r4, #2
 8000a02:	2600      	movs	r6, #0
 8000a04:	42a6      	cmp	r6, r4
 8000a06:	d109      	bne.n	8000a1c <__libc_init_array+0x24>
 8000a08:	4d0b      	ldr	r5, [pc, #44]	@ (8000a38 <__libc_init_array+0x40>)
 8000a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8000a3c <__libc_init_array+0x44>)
 8000a0c:	f000 fa50 	bl	8000eb0 <_init>
 8000a10:	1b64      	subs	r4, r4, r5
 8000a12:	10a4      	asrs	r4, r4, #2
 8000a14:	2600      	movs	r6, #0
 8000a16:	42a6      	cmp	r6, r4
 8000a18:	d105      	bne.n	8000a26 <__libc_init_array+0x2e>
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a20:	4798      	blx	r3
 8000a22:	3601      	adds	r6, #1
 8000a24:	e7ee      	b.n	8000a04 <__libc_init_array+0xc>
 8000a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2a:	4798      	blx	r3
 8000a2c:	3601      	adds	r6, #1
 8000a2e:	e7f2      	b.n	8000a16 <__libc_init_array+0x1e>
 8000a30:	08000ee4 	.word	0x08000ee4
 8000a34:	08000ee4 	.word	0x08000ee4
 8000a38:	08000ee4 	.word	0x08000ee4
 8000a3c:	08000ee8 	.word	0x08000ee8

08000a40 <__retarget_lock_init_recursive>:
 8000a40:	4770      	bx	lr

08000a42 <__retarget_lock_acquire_recursive>:
 8000a42:	4770      	bx	lr

08000a44 <__retarget_lock_release_recursive>:
 8000a44:	4770      	bx	lr
	...

08000a48 <_free_r>:
 8000a48:	b538      	push	{r3, r4, r5, lr}
 8000a4a:	4605      	mov	r5, r0
 8000a4c:	2900      	cmp	r1, #0
 8000a4e:	d041      	beq.n	8000ad4 <_free_r+0x8c>
 8000a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a54:	1f0c      	subs	r4, r1, #4
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	bfb8      	it	lt
 8000a5a:	18e4      	addlt	r4, r4, r3
 8000a5c:	f000 f8e0 	bl	8000c20 <__malloc_lock>
 8000a60:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad8 <_free_r+0x90>)
 8000a62:	6813      	ldr	r3, [r2, #0]
 8000a64:	b933      	cbnz	r3, 8000a74 <_free_r+0x2c>
 8000a66:	6063      	str	r3, [r4, #4]
 8000a68:	6014      	str	r4, [r2, #0]
 8000a6a:	4628      	mov	r0, r5
 8000a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a70:	f000 b8dc 	b.w	8000c2c <__malloc_unlock>
 8000a74:	42a3      	cmp	r3, r4
 8000a76:	d908      	bls.n	8000a8a <_free_r+0x42>
 8000a78:	6820      	ldr	r0, [r4, #0]
 8000a7a:	1821      	adds	r1, r4, r0
 8000a7c:	428b      	cmp	r3, r1
 8000a7e:	bf01      	itttt	eq
 8000a80:	6819      	ldreq	r1, [r3, #0]
 8000a82:	685b      	ldreq	r3, [r3, #4]
 8000a84:	1809      	addeq	r1, r1, r0
 8000a86:	6021      	streq	r1, [r4, #0]
 8000a88:	e7ed      	b.n	8000a66 <_free_r+0x1e>
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	b10b      	cbz	r3, 8000a94 <_free_r+0x4c>
 8000a90:	42a3      	cmp	r3, r4
 8000a92:	d9fa      	bls.n	8000a8a <_free_r+0x42>
 8000a94:	6811      	ldr	r1, [r2, #0]
 8000a96:	1850      	adds	r0, r2, r1
 8000a98:	42a0      	cmp	r0, r4
 8000a9a:	d10b      	bne.n	8000ab4 <_free_r+0x6c>
 8000a9c:	6820      	ldr	r0, [r4, #0]
 8000a9e:	4401      	add	r1, r0
 8000aa0:	1850      	adds	r0, r2, r1
 8000aa2:	4283      	cmp	r3, r0
 8000aa4:	6011      	str	r1, [r2, #0]
 8000aa6:	d1e0      	bne.n	8000a6a <_free_r+0x22>
 8000aa8:	6818      	ldr	r0, [r3, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	6053      	str	r3, [r2, #4]
 8000aae:	4408      	add	r0, r1
 8000ab0:	6010      	str	r0, [r2, #0]
 8000ab2:	e7da      	b.n	8000a6a <_free_r+0x22>
 8000ab4:	d902      	bls.n	8000abc <_free_r+0x74>
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	602b      	str	r3, [r5, #0]
 8000aba:	e7d6      	b.n	8000a6a <_free_r+0x22>
 8000abc:	6820      	ldr	r0, [r4, #0]
 8000abe:	1821      	adds	r1, r4, r0
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	bf04      	itt	eq
 8000ac4:	6819      	ldreq	r1, [r3, #0]
 8000ac6:	685b      	ldreq	r3, [r3, #4]
 8000ac8:	6063      	str	r3, [r4, #4]
 8000aca:	bf04      	itt	eq
 8000acc:	1809      	addeq	r1, r1, r0
 8000ace:	6021      	streq	r1, [r4, #0]
 8000ad0:	6054      	str	r4, [r2, #4]
 8000ad2:	e7ca      	b.n	8000a6a <_free_r+0x22>
 8000ad4:	bd38      	pop	{r3, r4, r5, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200001c4 	.word	0x200001c4

08000adc <sbrk_aligned>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	4e0f      	ldr	r6, [pc, #60]	@ (8000b1c <sbrk_aligned+0x40>)
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	6831      	ldr	r1, [r6, #0]
 8000ae4:	4605      	mov	r5, r0
 8000ae6:	b911      	cbnz	r1, 8000aee <sbrk_aligned+0x12>
 8000ae8:	f000 f9d2 	bl	8000e90 <_sbrk_r>
 8000aec:	6030      	str	r0, [r6, #0]
 8000aee:	4621      	mov	r1, r4
 8000af0:	4628      	mov	r0, r5
 8000af2:	f000 f9cd 	bl	8000e90 <_sbrk_r>
 8000af6:	1c43      	adds	r3, r0, #1
 8000af8:	d103      	bne.n	8000b02 <sbrk_aligned+0x26>
 8000afa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000afe:	4620      	mov	r0, r4
 8000b00:	bd70      	pop	{r4, r5, r6, pc}
 8000b02:	1cc4      	adds	r4, r0, #3
 8000b04:	f024 0403 	bic.w	r4, r4, #3
 8000b08:	42a0      	cmp	r0, r4
 8000b0a:	d0f8      	beq.n	8000afe <sbrk_aligned+0x22>
 8000b0c:	1a21      	subs	r1, r4, r0
 8000b0e:	4628      	mov	r0, r5
 8000b10:	f000 f9be 	bl	8000e90 <_sbrk_r>
 8000b14:	3001      	adds	r0, #1
 8000b16:	d1f2      	bne.n	8000afe <sbrk_aligned+0x22>
 8000b18:	e7ef      	b.n	8000afa <sbrk_aligned+0x1e>
 8000b1a:	bf00      	nop
 8000b1c:	200001c0 	.word	0x200001c0

08000b20 <_malloc_r>:
 8000b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b24:	1ccd      	adds	r5, r1, #3
 8000b26:	f025 0503 	bic.w	r5, r5, #3
 8000b2a:	3508      	adds	r5, #8
 8000b2c:	2d0c      	cmp	r5, #12
 8000b2e:	bf38      	it	cc
 8000b30:	250c      	movcc	r5, #12
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	4606      	mov	r6, r0
 8000b36:	db01      	blt.n	8000b3c <_malloc_r+0x1c>
 8000b38:	42a9      	cmp	r1, r5
 8000b3a:	d904      	bls.n	8000b46 <_malloc_r+0x26>
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	6033      	str	r3, [r6, #0]
 8000b40:	2000      	movs	r0, #0
 8000b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c1c <_malloc_r+0xfc>
 8000b4a:	f000 f869 	bl	8000c20 <__malloc_lock>
 8000b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b52:	461c      	mov	r4, r3
 8000b54:	bb44      	cbnz	r4, 8000ba8 <_malloc_r+0x88>
 8000b56:	4629      	mov	r1, r5
 8000b58:	4630      	mov	r0, r6
 8000b5a:	f7ff ffbf 	bl	8000adc <sbrk_aligned>
 8000b5e:	1c43      	adds	r3, r0, #1
 8000b60:	4604      	mov	r4, r0
 8000b62:	d158      	bne.n	8000c16 <_malloc_r+0xf6>
 8000b64:	f8d8 4000 	ldr.w	r4, [r8]
 8000b68:	4627      	mov	r7, r4
 8000b6a:	2f00      	cmp	r7, #0
 8000b6c:	d143      	bne.n	8000bf6 <_malloc_r+0xd6>
 8000b6e:	2c00      	cmp	r4, #0
 8000b70:	d04b      	beq.n	8000c0a <_malloc_r+0xea>
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	4639      	mov	r1, r7
 8000b76:	4630      	mov	r0, r6
 8000b78:	eb04 0903 	add.w	r9, r4, r3
 8000b7c:	f000 f988 	bl	8000e90 <_sbrk_r>
 8000b80:	4581      	cmp	r9, r0
 8000b82:	d142      	bne.n	8000c0a <_malloc_r+0xea>
 8000b84:	6821      	ldr	r1, [r4, #0]
 8000b86:	1a6d      	subs	r5, r5, r1
 8000b88:	4629      	mov	r1, r5
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f7ff ffa6 	bl	8000adc <sbrk_aligned>
 8000b90:	3001      	adds	r0, #1
 8000b92:	d03a      	beq.n	8000c0a <_malloc_r+0xea>
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	442b      	add	r3, r5
 8000b98:	6023      	str	r3, [r4, #0]
 8000b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	bb62      	cbnz	r2, 8000bfc <_malloc_r+0xdc>
 8000ba2:	f8c8 7000 	str.w	r7, [r8]
 8000ba6:	e00f      	b.n	8000bc8 <_malloc_r+0xa8>
 8000ba8:	6822      	ldr	r2, [r4, #0]
 8000baa:	1b52      	subs	r2, r2, r5
 8000bac:	d420      	bmi.n	8000bf0 <_malloc_r+0xd0>
 8000bae:	2a0b      	cmp	r2, #11
 8000bb0:	d917      	bls.n	8000be2 <_malloc_r+0xc2>
 8000bb2:	1961      	adds	r1, r4, r5
 8000bb4:	42a3      	cmp	r3, r4
 8000bb6:	6025      	str	r5, [r4, #0]
 8000bb8:	bf18      	it	ne
 8000bba:	6059      	strne	r1, [r3, #4]
 8000bbc:	6863      	ldr	r3, [r4, #4]
 8000bbe:	bf08      	it	eq
 8000bc0:	f8c8 1000 	streq.w	r1, [r8]
 8000bc4:	5162      	str	r2, [r4, r5]
 8000bc6:	604b      	str	r3, [r1, #4]
 8000bc8:	4630      	mov	r0, r6
 8000bca:	f000 f82f 	bl	8000c2c <__malloc_unlock>
 8000bce:	f104 000b 	add.w	r0, r4, #11
 8000bd2:	1d23      	adds	r3, r4, #4
 8000bd4:	f020 0007 	bic.w	r0, r0, #7
 8000bd8:	1ac2      	subs	r2, r0, r3
 8000bda:	bf1c      	itt	ne
 8000bdc:	1a1b      	subne	r3, r3, r0
 8000bde:	50a3      	strne	r3, [r4, r2]
 8000be0:	e7af      	b.n	8000b42 <_malloc_r+0x22>
 8000be2:	6862      	ldr	r2, [r4, #4]
 8000be4:	42a3      	cmp	r3, r4
 8000be6:	bf0c      	ite	eq
 8000be8:	f8c8 2000 	streq.w	r2, [r8]
 8000bec:	605a      	strne	r2, [r3, #4]
 8000bee:	e7eb      	b.n	8000bc8 <_malloc_r+0xa8>
 8000bf0:	4623      	mov	r3, r4
 8000bf2:	6864      	ldr	r4, [r4, #4]
 8000bf4:	e7ae      	b.n	8000b54 <_malloc_r+0x34>
 8000bf6:	463c      	mov	r4, r7
 8000bf8:	687f      	ldr	r7, [r7, #4]
 8000bfa:	e7b6      	b.n	8000b6a <_malloc_r+0x4a>
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	42a3      	cmp	r3, r4
 8000c02:	d1fb      	bne.n	8000bfc <_malloc_r+0xdc>
 8000c04:	2300      	movs	r3, #0
 8000c06:	6053      	str	r3, [r2, #4]
 8000c08:	e7de      	b.n	8000bc8 <_malloc_r+0xa8>
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	6033      	str	r3, [r6, #0]
 8000c0e:	4630      	mov	r0, r6
 8000c10:	f000 f80c 	bl	8000c2c <__malloc_unlock>
 8000c14:	e794      	b.n	8000b40 <_malloc_r+0x20>
 8000c16:	6005      	str	r5, [r0, #0]
 8000c18:	e7d6      	b.n	8000bc8 <_malloc_r+0xa8>
 8000c1a:	bf00      	nop
 8000c1c:	200001c4 	.word	0x200001c4

08000c20 <__malloc_lock>:
 8000c20:	4801      	ldr	r0, [pc, #4]	@ (8000c28 <__malloc_lock+0x8>)
 8000c22:	f7ff bf0e 	b.w	8000a42 <__retarget_lock_acquire_recursive>
 8000c26:	bf00      	nop
 8000c28:	200001bc 	.word	0x200001bc

08000c2c <__malloc_unlock>:
 8000c2c:	4801      	ldr	r0, [pc, #4]	@ (8000c34 <__malloc_unlock+0x8>)
 8000c2e:	f7ff bf09 	b.w	8000a44 <__retarget_lock_release_recursive>
 8000c32:	bf00      	nop
 8000c34:	200001bc 	.word	0x200001bc

08000c38 <__sflush_r>:
 8000c38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3e:	0716      	lsls	r6, r2, #28
 8000c40:	4605      	mov	r5, r0
 8000c42:	460c      	mov	r4, r1
 8000c44:	d454      	bmi.n	8000cf0 <__sflush_r+0xb8>
 8000c46:	684b      	ldr	r3, [r1, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	dc02      	bgt.n	8000c52 <__sflush_r+0x1a>
 8000c4c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	dd48      	ble.n	8000ce4 <__sflush_r+0xac>
 8000c52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c54:	2e00      	cmp	r6, #0
 8000c56:	d045      	beq.n	8000ce4 <__sflush_r+0xac>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000c5e:	682f      	ldr	r7, [r5, #0]
 8000c60:	6a21      	ldr	r1, [r4, #32]
 8000c62:	602b      	str	r3, [r5, #0]
 8000c64:	d030      	beq.n	8000cc8 <__sflush_r+0x90>
 8000c66:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000c68:	89a3      	ldrh	r3, [r4, #12]
 8000c6a:	0759      	lsls	r1, r3, #29
 8000c6c:	d505      	bpl.n	8000c7a <__sflush_r+0x42>
 8000c6e:	6863      	ldr	r3, [r4, #4]
 8000c70:	1ad2      	subs	r2, r2, r3
 8000c72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000c74:	b10b      	cbz	r3, 8000c7a <__sflush_r+0x42>
 8000c76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000c78:	1ad2      	subs	r2, r2, r3
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c7e:	6a21      	ldr	r1, [r4, #32]
 8000c80:	4628      	mov	r0, r5
 8000c82:	47b0      	blx	r6
 8000c84:	1c43      	adds	r3, r0, #1
 8000c86:	89a3      	ldrh	r3, [r4, #12]
 8000c88:	d106      	bne.n	8000c98 <__sflush_r+0x60>
 8000c8a:	6829      	ldr	r1, [r5, #0]
 8000c8c:	291d      	cmp	r1, #29
 8000c8e:	d82b      	bhi.n	8000ce8 <__sflush_r+0xb0>
 8000c90:	4a28      	ldr	r2, [pc, #160]	@ (8000d34 <__sflush_r+0xfc>)
 8000c92:	410a      	asrs	r2, r1
 8000c94:	07d6      	lsls	r6, r2, #31
 8000c96:	d427      	bmi.n	8000ce8 <__sflush_r+0xb0>
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6062      	str	r2, [r4, #4]
 8000c9c:	04d9      	lsls	r1, r3, #19
 8000c9e:	6922      	ldr	r2, [r4, #16]
 8000ca0:	6022      	str	r2, [r4, #0]
 8000ca2:	d504      	bpl.n	8000cae <__sflush_r+0x76>
 8000ca4:	1c42      	adds	r2, r0, #1
 8000ca6:	d101      	bne.n	8000cac <__sflush_r+0x74>
 8000ca8:	682b      	ldr	r3, [r5, #0]
 8000caa:	b903      	cbnz	r3, 8000cae <__sflush_r+0x76>
 8000cac:	6560      	str	r0, [r4, #84]	@ 0x54
 8000cae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000cb0:	602f      	str	r7, [r5, #0]
 8000cb2:	b1b9      	cbz	r1, 8000ce4 <__sflush_r+0xac>
 8000cb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d002      	beq.n	8000cc2 <__sflush_r+0x8a>
 8000cbc:	4628      	mov	r0, r5
 8000cbe:	f7ff fec3 	bl	8000a48 <_free_r>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8000cc6:	e00d      	b.n	8000ce4 <__sflush_r+0xac>
 8000cc8:	2301      	movs	r3, #1
 8000cca:	4628      	mov	r0, r5
 8000ccc:	47b0      	blx	r6
 8000cce:	4602      	mov	r2, r0
 8000cd0:	1c50      	adds	r0, r2, #1
 8000cd2:	d1c9      	bne.n	8000c68 <__sflush_r+0x30>
 8000cd4:	682b      	ldr	r3, [r5, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0c6      	beq.n	8000c68 <__sflush_r+0x30>
 8000cda:	2b1d      	cmp	r3, #29
 8000cdc:	d001      	beq.n	8000ce2 <__sflush_r+0xaa>
 8000cde:	2b16      	cmp	r3, #22
 8000ce0:	d11d      	bne.n	8000d1e <__sflush_r+0xe6>
 8000ce2:	602f      	str	r7, [r5, #0]
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	e021      	b.n	8000d2c <__sflush_r+0xf4>
 8000ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	e01a      	b.n	8000d26 <__sflush_r+0xee>
 8000cf0:	690f      	ldr	r7, [r1, #16]
 8000cf2:	2f00      	cmp	r7, #0
 8000cf4:	d0f6      	beq.n	8000ce4 <__sflush_r+0xac>
 8000cf6:	0793      	lsls	r3, r2, #30
 8000cf8:	680e      	ldr	r6, [r1, #0]
 8000cfa:	bf08      	it	eq
 8000cfc:	694b      	ldreq	r3, [r1, #20]
 8000cfe:	600f      	str	r7, [r1, #0]
 8000d00:	bf18      	it	ne
 8000d02:	2300      	movne	r3, #0
 8000d04:	1bf6      	subs	r6, r6, r7
 8000d06:	608b      	str	r3, [r1, #8]
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	ddeb      	ble.n	8000ce4 <__sflush_r+0xac>
 8000d0c:	6a21      	ldr	r1, [r4, #32]
 8000d0e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000d12:	4633      	mov	r3, r6
 8000d14:	463a      	mov	r2, r7
 8000d16:	4628      	mov	r0, r5
 8000d18:	47e0      	blx	ip
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	dc07      	bgt.n	8000d2e <__sflush_r+0xf6>
 8000d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d26:	81a3      	strh	r3, [r4, #12]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d2e:	4407      	add	r7, r0
 8000d30:	1a36      	subs	r6, r6, r0
 8000d32:	e7e9      	b.n	8000d08 <__sflush_r+0xd0>
 8000d34:	dfbffffe 	.word	0xdfbffffe

08000d38 <_fflush_r>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	690b      	ldr	r3, [r1, #16]
 8000d3c:	4605      	mov	r5, r0
 8000d3e:	460c      	mov	r4, r1
 8000d40:	b913      	cbnz	r3, 8000d48 <_fflush_r+0x10>
 8000d42:	2500      	movs	r5, #0
 8000d44:	4628      	mov	r0, r5
 8000d46:	bd38      	pop	{r3, r4, r5, pc}
 8000d48:	b118      	cbz	r0, 8000d52 <_fflush_r+0x1a>
 8000d4a:	6a03      	ldr	r3, [r0, #32]
 8000d4c:	b90b      	cbnz	r3, 8000d52 <_fflush_r+0x1a>
 8000d4e:	f7ff fc93 	bl	8000678 <__sinit>
 8000d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f3      	beq.n	8000d42 <_fflush_r+0xa>
 8000d5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000d5c:	07d0      	lsls	r0, r2, #31
 8000d5e:	d404      	bmi.n	8000d6a <_fflush_r+0x32>
 8000d60:	0599      	lsls	r1, r3, #22
 8000d62:	d402      	bmi.n	8000d6a <_fflush_r+0x32>
 8000d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d66:	f7ff fe6c 	bl	8000a42 <__retarget_lock_acquire_recursive>
 8000d6a:	4628      	mov	r0, r5
 8000d6c:	4621      	mov	r1, r4
 8000d6e:	f7ff ff63 	bl	8000c38 <__sflush_r>
 8000d72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d74:	07da      	lsls	r2, r3, #31
 8000d76:	4605      	mov	r5, r0
 8000d78:	d4e4      	bmi.n	8000d44 <_fflush_r+0xc>
 8000d7a:	89a3      	ldrh	r3, [r4, #12]
 8000d7c:	059b      	lsls	r3, r3, #22
 8000d7e:	d4e1      	bmi.n	8000d44 <_fflush_r+0xc>
 8000d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d82:	f7ff fe5f 	bl	8000a44 <__retarget_lock_release_recursive>
 8000d86:	e7dd      	b.n	8000d44 <_fflush_r+0xc>

08000d88 <__swhatbuf_r>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d90:	2900      	cmp	r1, #0
 8000d92:	b096      	sub	sp, #88	@ 0x58
 8000d94:	4615      	mov	r5, r2
 8000d96:	461e      	mov	r6, r3
 8000d98:	da0d      	bge.n	8000db6 <__swhatbuf_r+0x2e>
 8000d9a:	89a3      	ldrh	r3, [r4, #12]
 8000d9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000da0:	f04f 0100 	mov.w	r1, #0
 8000da4:	bf14      	ite	ne
 8000da6:	2340      	movne	r3, #64	@ 0x40
 8000da8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000dac:	2000      	movs	r0, #0
 8000dae:	6031      	str	r1, [r6, #0]
 8000db0:	602b      	str	r3, [r5, #0]
 8000db2:	b016      	add	sp, #88	@ 0x58
 8000db4:	bd70      	pop	{r4, r5, r6, pc}
 8000db6:	466a      	mov	r2, sp
 8000db8:	f000 f848 	bl	8000e4c <_fstat_r>
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	dbec      	blt.n	8000d9a <__swhatbuf_r+0x12>
 8000dc0:	9901      	ldr	r1, [sp, #4]
 8000dc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000dc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000dca:	4259      	negs	r1, r3
 8000dcc:	4159      	adcs	r1, r3
 8000dce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dd2:	e7eb      	b.n	8000dac <__swhatbuf_r+0x24>

08000dd4 <__smakebuf_r>:
 8000dd4:	898b      	ldrh	r3, [r1, #12]
 8000dd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000dd8:	079d      	lsls	r5, r3, #30
 8000dda:	4606      	mov	r6, r0
 8000ddc:	460c      	mov	r4, r1
 8000dde:	d507      	bpl.n	8000df0 <__smakebuf_r+0x1c>
 8000de0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000de4:	6023      	str	r3, [r4, #0]
 8000de6:	6123      	str	r3, [r4, #16]
 8000de8:	2301      	movs	r3, #1
 8000dea:	6163      	str	r3, [r4, #20]
 8000dec:	b003      	add	sp, #12
 8000dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df0:	ab01      	add	r3, sp, #4
 8000df2:	466a      	mov	r2, sp
 8000df4:	f7ff ffc8 	bl	8000d88 <__swhatbuf_r>
 8000df8:	9f00      	ldr	r7, [sp, #0]
 8000dfa:	4605      	mov	r5, r0
 8000dfc:	4639      	mov	r1, r7
 8000dfe:	4630      	mov	r0, r6
 8000e00:	f7ff fe8e 	bl	8000b20 <_malloc_r>
 8000e04:	b948      	cbnz	r0, 8000e1a <__smakebuf_r+0x46>
 8000e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e0a:	059a      	lsls	r2, r3, #22
 8000e0c:	d4ee      	bmi.n	8000dec <__smakebuf_r+0x18>
 8000e0e:	f023 0303 	bic.w	r3, r3, #3
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	81a3      	strh	r3, [r4, #12]
 8000e18:	e7e2      	b.n	8000de0 <__smakebuf_r+0xc>
 8000e1a:	89a3      	ldrh	r3, [r4, #12]
 8000e1c:	6020      	str	r0, [r4, #0]
 8000e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e22:	81a3      	strh	r3, [r4, #12]
 8000e24:	9b01      	ldr	r3, [sp, #4]
 8000e26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000e2a:	b15b      	cbz	r3, 8000e44 <__smakebuf_r+0x70>
 8000e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e30:	4630      	mov	r0, r6
 8000e32:	f000 f81d 	bl	8000e70 <_isatty_r>
 8000e36:	b128      	cbz	r0, 8000e44 <__smakebuf_r+0x70>
 8000e38:	89a3      	ldrh	r3, [r4, #12]
 8000e3a:	f023 0303 	bic.w	r3, r3, #3
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	81a3      	strh	r3, [r4, #12]
 8000e44:	89a3      	ldrh	r3, [r4, #12]
 8000e46:	431d      	orrs	r5, r3
 8000e48:	81a5      	strh	r5, [r4, #12]
 8000e4a:	e7cf      	b.n	8000dec <__smakebuf_r+0x18>

08000e4c <_fstat_r>:
 8000e4c:	b538      	push	{r3, r4, r5, lr}
 8000e4e:	4d07      	ldr	r5, [pc, #28]	@ (8000e6c <_fstat_r+0x20>)
 8000e50:	2300      	movs	r3, #0
 8000e52:	4604      	mov	r4, r0
 8000e54:	4608      	mov	r0, r1
 8000e56:	4611      	mov	r1, r2
 8000e58:	602b      	str	r3, [r5, #0]
 8000e5a:	f7ff fafb 	bl	8000454 <_fstat>
 8000e5e:	1c43      	adds	r3, r0, #1
 8000e60:	d102      	bne.n	8000e68 <_fstat_r+0x1c>
 8000e62:	682b      	ldr	r3, [r5, #0]
 8000e64:	b103      	cbz	r3, 8000e68 <_fstat_r+0x1c>
 8000e66:	6023      	str	r3, [r4, #0]
 8000e68:	bd38      	pop	{r3, r4, r5, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200001b8 	.word	0x200001b8

08000e70 <_isatty_r>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	4d06      	ldr	r5, [pc, #24]	@ (8000e8c <_isatty_r+0x1c>)
 8000e74:	2300      	movs	r3, #0
 8000e76:	4604      	mov	r4, r0
 8000e78:	4608      	mov	r0, r1
 8000e7a:	602b      	str	r3, [r5, #0]
 8000e7c:	f7ff faf9 	bl	8000472 <_isatty>
 8000e80:	1c43      	adds	r3, r0, #1
 8000e82:	d102      	bne.n	8000e8a <_isatty_r+0x1a>
 8000e84:	682b      	ldr	r3, [r5, #0]
 8000e86:	b103      	cbz	r3, 8000e8a <_isatty_r+0x1a>
 8000e88:	6023      	str	r3, [r4, #0]
 8000e8a:	bd38      	pop	{r3, r4, r5, pc}
 8000e8c:	200001b8 	.word	0x200001b8

08000e90 <_sbrk_r>:
 8000e90:	b538      	push	{r3, r4, r5, lr}
 8000e92:	4d06      	ldr	r5, [pc, #24]	@ (8000eac <_sbrk_r+0x1c>)
 8000e94:	2300      	movs	r3, #0
 8000e96:	4604      	mov	r4, r0
 8000e98:	4608      	mov	r0, r1
 8000e9a:	602b      	str	r3, [r5, #0]
 8000e9c:	f7ff fb00 	bl	80004a0 <_sbrk>
 8000ea0:	1c43      	adds	r3, r0, #1
 8000ea2:	d102      	bne.n	8000eaa <_sbrk_r+0x1a>
 8000ea4:	682b      	ldr	r3, [r5, #0]
 8000ea6:	b103      	cbz	r3, 8000eaa <_sbrk_r+0x1a>
 8000ea8:	6023      	str	r3, [r4, #0]
 8000eaa:	bd38      	pop	{r3, r4, r5, pc}
 8000eac:	200001b8 	.word	0x200001b8

08000eb0 <_init>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	bf00      	nop
 8000eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb6:	bc08      	pop	{r3}
 8000eb8:	469e      	mov	lr, r3
 8000eba:	4770      	bx	lr

08000ebc <_fini>:
 8000ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ebe:	bf00      	nop
 8000ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec2:	bc08      	pop	{r3}
 8000ec4:	469e      	mov	lr, r3
 8000ec6:	4770      	bx	lr
