
A_PROJECT_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001158  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08001328  08001328  00002328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001644  08001644  00003050  2**0
                  CONTENTS
  4 .ARM          00000008  08001644  08001644  00002644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800164c  0800164c  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800164c  0800164c  0000264c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001650  08001650  00002650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001654  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000050  080016a4  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  080016a4  000031b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d8f  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008b3  00000000  00000000  00004e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  000056c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000119  00000000  00000000  00005860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d2ec  00000000  00000000  00005979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002dc9  00000000  00000000  00012c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00045fcb  00000000  00000000  00015a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005b9f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000910  00000000  00000000  0005ba3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0005c34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000050 	.word	0x20000050
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001310 	.word	0x08001310

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000054 	.word	0x20000054
 800020c:	08001310 	.word	0x08001310

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <adc_init>:

// Define ADC sequence length of 1
#define ADC_SEQ_LEN_1 0

// Function to initialize the ADC peripheral
void adc_init(void) {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
    // Set PA0 to analog mode
    GPIOA->MODER |= PA0_ADC_MODE;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <adc_init+0x38>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a0b      	ldr	r2, [pc, #44]	@ (80002e8 <adc_init+0x38>)
 80002ba:	f043 0303 	orr.w	r3, r3, #3
 80002be:	6013      	str	r3, [r2, #0]

    // Enable the clock for ADC1
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80002c0:	4b0a      	ldr	r3, [pc, #40]	@ (80002ec <adc_init+0x3c>)
 80002c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002c4:	4a09      	ldr	r2, [pc, #36]	@ (80002ec <adc_init+0x3c>)
 80002c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002ca:	6453      	str	r3, [r2, #68]	@ 0x44

    // Configure ADC sequence length to 1
    ADC1->SQR1 = ADC_SEQ_LEN_1;
 80002cc:	4b08      	ldr	r3, [pc, #32]	@ (80002f0 <adc_init+0x40>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable the ADC peripheral
    ADC1->CR2 |= ADC_CR2_ADON;
 80002d2:	4b07      	ldr	r3, [pc, #28]	@ (80002f0 <adc_init+0x40>)
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	4a06      	ldr	r2, [pc, #24]	@ (80002f0 <adc_init+0x40>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6093      	str	r3, [r2, #8]
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	40020000 	.word	0x40020000
 80002ec:	40023800 	.word	0x40023800
 80002f0:	40012000 	.word	0x40012000

080002f4 <adc_start_conversion>:
    // Enable ADC interrupt in NVIC
    NVIC_EnableIRQ(ADC_IRQn);
}

// Function to start ADC conversion
void adc_start_conversion(void) {
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
    // Start ADC conversion
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80002f8:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <adc_start_conversion+0x1c>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <adc_start_conversion+0x1c>)
 80002fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000302:	6093      	str	r3, [r2, #8]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40012000 	.word	0x40012000

08000314 <adc_read>:

// Function to read the ADC conversion result
uint32_t adc_read(void) {
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
    // Wait until conversion is complete
    while (!(ADC1->SR & ADC_SR_EOC));
 8000318:	bf00      	nop
 800031a:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <adc_read+0x20>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f003 0302 	and.w	r3, r3, #2
 8000322:	2b00      	cmp	r3, #0
 8000324:	d0f9      	beq.n	800031a <adc_read+0x6>

    // Read and return ADC data register value
    return (ADC1->DR);
 8000326:	4b03      	ldr	r3, [pc, #12]	@ (8000334 <adc_read+0x20>)
 8000328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800032a:	4618      	mov	r0, r3
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	40012000 	.word	0x40012000

08000338 <ADC_IRQHandler>:

// ADC interrupt handler
void ADC_IRQHandler(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
    // Check if end-of-conversion flag is set
    if ((ADC1->SR & ADC_SR_EOC) != 0) {
 800033e:	4b0e      	ldr	r3, [pc, #56]	@ (8000378 <ADC_IRQHandler+0x40>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f003 0302 	and.w	r3, r3, #2
 8000346:	2b00      	cmp	r3, #0
 8000348:	d012      	beq.n	8000370 <ADC_IRQHandler+0x38>
        // Clear the end-of-conversion flag
        ADC1->SR &= ~ADC_SR_EOC;
 800034a:	4b0b      	ldr	r3, [pc, #44]	@ (8000378 <ADC_IRQHandler+0x40>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <ADC_IRQHandler+0x40>)
 8000350:	f023 0302 	bic.w	r3, r3, #2
 8000354:	6013      	str	r3, [r2, #0]

        // Read the ADC data register value
        volatile uint32_t value = ADC1->DR;
 8000356:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <ADC_IRQHandler+0x40>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800035a:	60fb      	str	r3, [r7, #12]

        // Prepare the value to be sent over UART
        char buffer[10];
        sprintf(buffer, "%lu\n\r", value);
 800035c:	68fa      	ldr	r2, [r7, #12]
 800035e:	463b      	mov	r3, r7
 8000360:	4906      	ldr	r1, [pc, #24]	@ (800037c <ADC_IRQHandler+0x44>)
 8000362:	4618      	mov	r0, r3
 8000364:	f000 fb3c 	bl	80009e0 <siprintf>

        // Send the value over UART
        UART2_SendString(buffer);
 8000368:	463b      	mov	r3, r7
 800036a:	4618      	mov	r0, r3
 800036c:	f000 fa7e 	bl	800086c <UART2_SendString>
    }
}
 8000370:	bf00      	nop
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40012000 	.word	0x40012000
 800037c:	08001328 	.word	0x08001328

08000380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800038a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038e:	2b00      	cmp	r3, #0
 8000390:	db0b      	blt.n	80003aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	f003 021f 	and.w	r2, r3, #31
 8000398:	4907      	ldr	r1, [pc, #28]	@ (80003b8 <__NVIC_EnableIRQ+0x38>)
 800039a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039e:	095b      	lsrs	r3, r3, #5
 80003a0:	2001      	movs	r0, #1
 80003a2:	fa00 f202 	lsl.w	r2, r0, r2
 80003a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	e000e100 	.word	0xe000e100

080003bc <Timer2_init>:

#include "interrupt.h"
#include "usart.h"

// Function to initialize Timer 2
void Timer2_init(void) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
    // Enable TIM2 clock
    RCC->APB1ENR |= (1U << 0);
 80003c0:	4b12      	ldr	r3, [pc, #72]	@ (800040c <Timer2_init+0x50>)
 80003c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003c4:	4a11      	ldr	r2, [pc, #68]	@ (800040c <Timer2_init+0x50>)
 80003c6:	f043 0301 	orr.w	r3, r3, #1
 80003ca:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set the prescaler value
    TIM2->PSC = 16000 - 1;
 80003cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d0:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80003d4:	629a      	str	r2, [r3, #40]	@ 0x28

    // Set the auto-reload value
    TIM2->ARR = 2000 - 1;
 80003d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003da:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80003de:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Reset counter
    TIM2->CNT = 0;
 80003e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003e4:	2200      	movs	r2, #0
 80003e6:	625a      	str	r2, [r3, #36]	@ 0x24

    // Enable update interrupt
    TIM2->DIER |= TIM_DIER_UIE;
 80003e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ec:	68db      	ldr	r3, [r3, #12]
 80003ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003f2:	f043 0301 	orr.w	r3, r3, #1
 80003f6:	60d3      	str	r3, [r2, #12]

    // Enable TIM2 interrupt in NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 80003f8:	201c      	movs	r0, #28
 80003fa:	f7ff ffc1 	bl	8000380 <__NVIC_EnableIRQ>

    // Enable TIM2
    TIM2->CR1 = (1U << 0);
 80003fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000402:	2201      	movs	r2, #1
 8000404:	601a      	str	r2, [r3, #0]
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40023800 	.word	0x40023800

08000410 <TIM2_IRQHandler>:

// Timer 2 interrupt handler
void TIM2_IRQHandler(void) {
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
    // Check if update interrupt flag is set
    if (TIM2->SR & (1U << 0)) {
 8000414:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000418:	691b      	ldr	r3, [r3, #16]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	2b00      	cmp	r3, #0
 8000420:	d00d      	beq.n	800043e <TIM2_IRQHandler+0x2e>
        // Clear update interrupt flag
        TIM2->SR &= ~(1U << 0);
 8000422:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000426:	691b      	ldr	r3, [r3, #16]
 8000428:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800042c:	f023 0301 	bic.w	r3, r3, #1
 8000430:	6113      	str	r3, [r2, #16]

        // Send message over UART
        UART2_SendString("\r\nTimer 2 Interrupt\r\n");
 8000432:	4804      	ldr	r0, [pc, #16]	@ (8000444 <TIM2_IRQHandler+0x34>)
 8000434:	f000 fa1a 	bl	800086c <UART2_SendString>
        UART2_SendString("Press RESET Button to return to main menu...\r\n");
 8000438:	4803      	ldr	r0, [pc, #12]	@ (8000448 <TIM2_IRQHandler+0x38>)
 800043a:	f000 fa17 	bl	800086c <UART2_SendString>
    }
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	08001330 	.word	0x08001330
 8000448:	08001348 	.word	0x08001348

0800044c <EXTI15_10_init>:

// Function to initialize External Interrupt for lines 15 to 10
void EXTI15_10_init(void) {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
    // Enable GPIOC clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000450:	4b13      	ldr	r3, [pc, #76]	@ (80004a0 <EXTI15_10_init+0x54>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000454:	4a12      	ldr	r2, [pc, #72]	@ (80004a0 <EXTI15_10_init+0x54>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6313      	str	r3, [r2, #48]	@ 0x30

    // Enable SYSCFG clock
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800045c:	4b10      	ldr	r3, [pc, #64]	@ (80004a0 <EXTI15_10_init+0x54>)
 800045e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000460:	4a0f      	ldr	r2, [pc, #60]	@ (80004a0 <EXTI15_10_init+0x54>)
 8000462:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000466:	6453      	str	r3, [r2, #68]	@ 0x44
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	bf00      	nop

    // Disable global interrupts
    __disable_irq();

    // Map EXTI line 13 to PC13
    SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC;
 800046c:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <EXTI15_10_init+0x58>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	4a0c      	ldr	r2, [pc, #48]	@ (80004a4 <EXTI15_10_init+0x58>)
 8000472:	f043 0320 	orr.w	r3, r3, #32
 8000476:	6153      	str	r3, [r2, #20]

    // Unmask EXTI line 13
    EXTI->IMR |= BUTTON_PIN;
 8000478:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <EXTI15_10_init+0x5c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a0a      	ldr	r2, [pc, #40]	@ (80004a8 <EXTI15_10_init+0x5c>)
 800047e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000482:	6013      	str	r3, [r2, #0]

    // Trigger on falling edge
    EXTI->FTSR |= BUTTON_PIN;
 8000484:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <EXTI15_10_init+0x5c>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	4a07      	ldr	r2, [pc, #28]	@ (80004a8 <EXTI15_10_init+0x5c>)
 800048a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800048e:	60d3      	str	r3, [r2, #12]

    // Enable EXTI line 15 to 10 interrupt in NVIC
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000490:	2028      	movs	r0, #40	@ 0x28
 8000492:	f7ff ff75 	bl	8000380 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000496:	b662      	cpsie	i
}
 8000498:	bf00      	nop

    // Enable global interrupts
    __enable_irq();
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40023800 	.word	0x40023800
 80004a4:	40013800 	.word	0x40013800
 80004a8:	40013c00 	.word	0x40013c00

080004ac <EXTI15_10_IRQHandler>:

// External Interrupt 15 to 10 handler
void EXTI15_10_IRQHandler(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
    // Check if the interrupt was from line 13
    if (EXTI->PR & BUTTON_PIN) {
 80004b0:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <EXTI15_10_IRQHandler+0x2c>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d00b      	beq.n	80004d4 <EXTI15_10_IRQHandler+0x28>
        // Clear the pending interrupt flag
        EXTI->PR |= BUTTON_PIN;
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <EXTI15_10_IRQHandler+0x2c>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	4a05      	ldr	r2, [pc, #20]	@ (80004d8 <EXTI15_10_IRQHandler+0x2c>)
 80004c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004c6:	6153      	str	r3, [r2, #20]

        // Send message over UART
        UART2_SendString("\r\nExternal Interrupt\r\n");
 80004c8:	4804      	ldr	r0, [pc, #16]	@ (80004dc <EXTI15_10_IRQHandler+0x30>)
 80004ca:	f000 f9cf 	bl	800086c <UART2_SendString>
        UART2_SendString("Press RESET Button to return to main menu...\r\n");
 80004ce:	4804      	ldr	r0, [pc, #16]	@ (80004e0 <EXTI15_10_IRQHandler+0x34>)
 80004d0:	f000 f9cc 	bl	800086c <UART2_SendString>
    }
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40013c00 	.word	0x40013c00
 80004dc:	08001378 	.word	0x08001378
 80004e0:	08001348 	.word	0x08001348

080004e4 <main>:
#include<usart.h>
#include<scc.h>
#include<operations.h>


int main(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
    SysClockConfig();
 80004ea:	f000 f917 	bl	800071c <SysClockConfig>
    Usart2_config();
 80004ee:	f000 f9d3 	bl	8000898 <Usart2_config>

    while (1) {
        print_menu();
 80004f2:	f000 f813 	bl	800051c <print_menu>
        char option = receiverdata();
 80004f6:	f000 fa33 	bl	8000960 <receiverdata>
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
        UART2_SendChar(option);
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	4618      	mov	r0, r3
 8000502:	f000 f99b 	bl	800083c <UART2_SendChar>
        UART2_SendString("\r\n");
 8000506:	4804      	ldr	r0, [pc, #16]	@ (8000518 <main+0x34>)
 8000508:	f000 f9b0 	bl	800086c <UART2_SendString>

        handle_option(option);
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	4618      	mov	r0, r3
 8000510:	f000 f848 	bl	80005a4 <handle_option>
    while (1) {
 8000514:	bf00      	nop
 8000516:	e7ec      	b.n	80004f2 <main+0xe>
 8000518:	08001390 	.word	0x08001390

0800051c <print_menu>:
#include "usart.h"
#include "adc.h"
#include "interrupt.h"  // Include the header for interrupt functions

// Function to print the main menu
void print_menu(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
    UART2_SendString("======================================== \r\n");
 8000520:	480c      	ldr	r0, [pc, #48]	@ (8000554 <print_menu+0x38>)
 8000522:	f000 f9a3 	bl	800086c <UART2_SendString>
    UART2_SendString("|                PROJECT - 1           | \r\n");
 8000526:	480c      	ldr	r0, [pc, #48]	@ (8000558 <print_menu+0x3c>)
 8000528:	f000 f9a0 	bl	800086c <UART2_SendString>
    UART2_SendString("======================================== \r\n");
 800052c:	4809      	ldr	r0, [pc, #36]	@ (8000554 <print_menu+0x38>)
 800052e:	f000 f99d 	bl	800086c <UART2_SendString>
    UART2_SendString("|      1. Start ADC Conversion         | \r\n");
 8000532:	480a      	ldr	r0, [pc, #40]	@ (800055c <print_menu+0x40>)
 8000534:	f000 f99a 	bl	800086c <UART2_SendString>
    UART2_SendString("|      2. Trigger Interrupt            | \r\n");
 8000538:	4809      	ldr	r0, [pc, #36]	@ (8000560 <print_menu+0x44>)
 800053a:	f000 f997 	bl	800086c <UART2_SendString>
    UART2_SendString("|           3. Exit                    | \r\n");
 800053e:	4809      	ldr	r0, [pc, #36]	@ (8000564 <print_menu+0x48>)
 8000540:	f000 f994 	bl	800086c <UART2_SendString>
    UART2_SendString("======================================== \r\n");
 8000544:	4803      	ldr	r0, [pc, #12]	@ (8000554 <print_menu+0x38>)
 8000546:	f000 f991 	bl	800086c <UART2_SendString>
    UART2_SendString("\r\n");
 800054a:	4807      	ldr	r0, [pc, #28]	@ (8000568 <print_menu+0x4c>)
 800054c:	f000 f98e 	bl	800086c <UART2_SendString>
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	08001394 	.word	0x08001394
 8000558:	080013c0 	.word	0x080013c0
 800055c:	080013ec 	.word	0x080013ec
 8000560:	08001418 	.word	0x08001418
 8000564:	08001444 	.word	0x08001444
 8000568:	08001470 	.word	0x08001470

0800056c <print_interrupt_menu>:

// Function to print the interrupt menu
void print_interrupt_menu(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    UART2_SendString("\r\n");
 8000570:	4808      	ldr	r0, [pc, #32]	@ (8000594 <print_interrupt_menu+0x28>)
 8000572:	f000 f97b 	bl	800086c <UART2_SendString>
    UART2_SendString("Select Interrupt to Trigger:\r\n");
 8000576:	4808      	ldr	r0, [pc, #32]	@ (8000598 <print_interrupt_menu+0x2c>)
 8000578:	f000 f978 	bl	800086c <UART2_SendString>
    UART2_SendString("1. Timer Interrupt\r\n");
 800057c:	4807      	ldr	r0, [pc, #28]	@ (800059c <print_interrupt_menu+0x30>)
 800057e:	f000 f975 	bl	800086c <UART2_SendString>
    UART2_SendString("2. External Interrupt\r\n");
 8000582:	4807      	ldr	r0, [pc, #28]	@ (80005a0 <print_interrupt_menu+0x34>)
 8000584:	f000 f972 	bl	800086c <UART2_SendString>
    UART2_SendString("\r\n");
 8000588:	4802      	ldr	r0, [pc, #8]	@ (8000594 <print_interrupt_menu+0x28>)
 800058a:	f000 f96f 	bl	800086c <UART2_SendString>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	08001470 	.word	0x08001470
 8000598:	08001474 	.word	0x08001474
 800059c:	08001494 	.word	0x08001494
 80005a0:	080014ac 	.word	0x080014ac

080005a4 <handle_option>:

// Function to handle the selected option from the main menu
void handle_option(char option) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    switch (option) {
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b33      	cmp	r3, #51	@ 0x33
 80005b2:	d00c      	beq.n	80005ce <handle_option+0x2a>
 80005b4:	2b33      	cmp	r3, #51	@ 0x33
 80005b6:	dc0d      	bgt.n	80005d4 <handle_option+0x30>
 80005b8:	2b31      	cmp	r3, #49	@ 0x31
 80005ba:	d002      	beq.n	80005c2 <handle_option+0x1e>
 80005bc:	2b32      	cmp	r3, #50	@ 0x32
 80005be:	d003      	beq.n	80005c8 <handle_option+0x24>
 80005c0:	e008      	b.n	80005d4 <handle_option+0x30>
        case '1':
            start_adc_conversion();
 80005c2:	f000 f811 	bl	80005e8 <start_adc_conversion>
            break;
 80005c6:	e009      	b.n	80005dc <handle_option+0x38>
        case '2':
            trigger_interrupt();
 80005c8:	f000 f860 	bl	800068c <trigger_interrupt>
            break;
 80005cc:	e006      	b.n	80005dc <handle_option+0x38>
        case '3':
            exit_program();
 80005ce:	f000 f89b 	bl	8000708 <exit_program>
            break;
 80005d2:	e003      	b.n	80005dc <handle_option+0x38>
        default:
            UART2_SendString("Invalid Option! Please enter '1', '2', or '3'\r\n");
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <handle_option+0x40>)
 80005d6:	f000 f949 	bl	800086c <UART2_SendString>
            break;
 80005da:	bf00      	nop
    }
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	080014c4 	.word	0x080014c4

080005e8 <start_adc_conversion>:

// Function to start the ADC conversion process
void start_adc_conversion(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
    UART2_SendString("\r\n");
 80005ee:	4822      	ldr	r0, [pc, #136]	@ (8000678 <start_adc_conversion+0x90>)
 80005f0:	f000 f93c 	bl	800086c <UART2_SendString>
    UART2_SendString("Starting ADC Conversion...\r\n");
 80005f4:	4821      	ldr	r0, [pc, #132]	@ (800067c <start_adc_conversion+0x94>)
 80005f6:	f000 f939 	bl	800086c <UART2_SendString>

    // Initialize the ADC
    adc_init();
 80005fa:	f7ff fe59 	bl	80002b0 <adc_init>

    // Start ADC conversion
    adc_start_conversion();
 80005fe:	f7ff fe79 	bl	80002f4 <adc_start_conversion>

    // Read the ADC conversion value
    uint32_t value = adc_read();
 8000602:	f7ff fe87 	bl	8000314 <adc_read>
 8000606:	60f8      	str	r0, [r7, #12]

    // Buffer to hold the ADC value as a string
    char buffer[10];

    // Convert ADC value to string and store in buffer
    sprintf(buffer, "%lu\n\r", value);
 8000608:	463b      	mov	r3, r7
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	491c      	ldr	r1, [pc, #112]	@ (8000680 <start_adc_conversion+0x98>)
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f9e6 	bl	80009e0 <siprintf>

    // Send ADC value over UART
    UART2_SendString(buffer);
 8000614:	463b      	mov	r3, r7
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f928 	bl	800086c <UART2_SendString>

    // Loop to continue ADC conversion based on user input
    while (1) {
        UART2_SendString("Do you want to Continue ADC Conversion? (Y/N): ");
 800061c:	4819      	ldr	r0, [pc, #100]	@ (8000684 <start_adc_conversion+0x9c>)
 800061e:	f000 f925 	bl	800086c <UART2_SendString>

        // Receive user input
        char continue_option = receiverdata();
 8000622:	f000 f99d 	bl	8000960 <receiverdata>
 8000626:	4603      	mov	r3, r0
 8000628:	72fb      	strb	r3, [r7, #11]

        // Echo the received character
        UART2_SendChar(continue_option);
 800062a:	7afb      	ldrb	r3, [r7, #11]
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f905 	bl	800083c <UART2_SendChar>
        UART2_SendString("\r\n");
 8000632:	4811      	ldr	r0, [pc, #68]	@ (8000678 <start_adc_conversion+0x90>)
 8000634:	f000 f91a 	bl	800086c <UART2_SendString>

        // Check user input to continue or stop ADC conversion
        if (continue_option == 'N') {
 8000638:	7afb      	ldrb	r3, [r7, #11]
 800063a:	2b4e      	cmp	r3, #78	@ 0x4e
 800063c:	d016      	beq.n	800066c <start_adc_conversion+0x84>
            break;
        }
        else if (continue_option == 'Y') {
 800063e:	7afb      	ldrb	r3, [r7, #11]
 8000640:	2b59      	cmp	r3, #89	@ 0x59
 8000642:	d10f      	bne.n	8000664 <start_adc_conversion+0x7c>
            adc_start_conversion();
 8000644:	f7ff fe56 	bl	80002f4 <adc_start_conversion>
            value = adc_read();
 8000648:	f7ff fe64 	bl	8000314 <adc_read>
 800064c:	60f8      	str	r0, [r7, #12]
            sprintf(buffer, "%lu\n\r", value);
 800064e:	463b      	mov	r3, r7
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	490b      	ldr	r1, [pc, #44]	@ (8000680 <start_adc_conversion+0x98>)
 8000654:	4618      	mov	r0, r3
 8000656:	f000 f9c3 	bl	80009e0 <siprintf>
            UART2_SendString(buffer);
 800065a:	463b      	mov	r3, r7
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f905 	bl	800086c <UART2_SendString>
 8000662:	e7db      	b.n	800061c <start_adc_conversion+0x34>
        }
        else {
            UART2_SendString("Invalid Option! Please enter 'Y' or 'N'\r\n");
 8000664:	4808      	ldr	r0, [pc, #32]	@ (8000688 <start_adc_conversion+0xa0>)
 8000666:	f000 f901 	bl	800086c <UART2_SendString>
    while (1) {
 800066a:	e7d7      	b.n	800061c <start_adc_conversion+0x34>
            break;
 800066c:	bf00      	nop
        }
    }
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	08001470 	.word	0x08001470
 800067c:	080014f4 	.word	0x080014f4
 8000680:	08001514 	.word	0x08001514
 8000684:	0800151c 	.word	0x0800151c
 8000688:	0800154c 	.word	0x0800154c

0800068c <trigger_interrupt>:

// Function to trigger the selected interrupt
void trigger_interrupt(void) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
    UART2_SendString("\r\n");
 8000692:	4819      	ldr	r0, [pc, #100]	@ (80006f8 <trigger_interrupt+0x6c>)
 8000694:	f000 f8ea 	bl	800086c <UART2_SendString>

    // Print the interrupt menu
    print_interrupt_menu();
 8000698:	f7ff ff68 	bl	800056c <print_interrupt_menu>

    // Receive user input for interrupt option
    char interrupt_option = receiverdata();
 800069c:	f000 f960 	bl	8000960 <receiverdata>
 80006a0:	4603      	mov	r3, r0
 80006a2:	71fb      	strb	r3, [r7, #7]

    // Echo the received character
    UART2_SendChar(interrupt_option);
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f8c8 	bl	800083c <UART2_SendChar>

    UART2_SendString("\r\n");
 80006ac:	4812      	ldr	r0, [pc, #72]	@ (80006f8 <trigger_interrupt+0x6c>)
 80006ae:	f000 f8dd 	bl	800086c <UART2_SendString>

    // Check the selected interrupt option
    if (interrupt_option == '1') {
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b31      	cmp	r3, #49	@ 0x31
 80006b6:	d108      	bne.n	80006ca <trigger_interrupt+0x3e>
        UART2_SendString("\r\n");
 80006b8:	480f      	ldr	r0, [pc, #60]	@ (80006f8 <trigger_interrupt+0x6c>)
 80006ba:	f000 f8d7 	bl	800086c <UART2_SendString>
        UART2_SendString("Triggering Timer Interrupt...\r\n");
 80006be:	480f      	ldr	r0, [pc, #60]	@ (80006fc <trigger_interrupt+0x70>)
 80006c0:	f000 f8d4 	bl	800086c <UART2_SendString>

        // Initialize Timer 2
        Timer2_init();
 80006c4:	f7ff fe7a 	bl	80003bc <Timer2_init>
    }
    else {
        UART2_SendString("\r\n");
        UART2_SendString("Invalid Option! Please enter '1' or '2'\r\n");
    }
}
 80006c8:	e012      	b.n	80006f0 <trigger_interrupt+0x64>
    else if (interrupt_option == '2') {
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b32      	cmp	r3, #50	@ 0x32
 80006ce:	d109      	bne.n	80006e4 <trigger_interrupt+0x58>
        UART2_SendString("\r\n");
 80006d0:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <trigger_interrupt+0x6c>)
 80006d2:	f000 f8cb 	bl	800086c <UART2_SendString>
        UART2_SendString("Triggering External Interrupt...\r\n");
 80006d6:	480a      	ldr	r0, [pc, #40]	@ (8000700 <trigger_interrupt+0x74>)
 80006d8:	f000 f8c8 	bl	800086c <UART2_SendString>
        EXTI15_10_init();
 80006dc:	f7ff feb6 	bl	800044c <EXTI15_10_init>
        while(1);
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <trigger_interrupt+0x54>
        UART2_SendString("\r\n");
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <trigger_interrupt+0x6c>)
 80006e6:	f000 f8c1 	bl	800086c <UART2_SendString>
        UART2_SendString("Invalid Option! Please enter '1' or '2'\r\n");
 80006ea:	4806      	ldr	r0, [pc, #24]	@ (8000704 <trigger_interrupt+0x78>)
 80006ec:	f000 f8be 	bl	800086c <UART2_SendString>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	08001470 	.word	0x08001470
 80006fc:	08001578 	.word	0x08001578
 8000700:	08001598 	.word	0x08001598
 8000704:	080015bc 	.word	0x080015bc

08000708 <exit_program>:

// Function to exit the program
void exit_program(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    UART2_SendString("Exiting..............................\r\n");
 800070c:	4802      	ldr	r0, [pc, #8]	@ (8000718 <exit_program+0x10>)
 800070e:	f000 f8ad 	bl	800086c <UART2_SendString>

    // Infinite loop to keep the program running
    while (1);
 8000712:	bf00      	nop
 8000714:	e7fd      	b.n	8000712 <exit_program+0xa>
 8000716:	bf00      	nop
 8000718:	080015e8 	.word	0x080015e8

0800071c <SysClockConfig>:

#include<scc.h>

// System Clock Configuration
void SysClockConfig (void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

	// 1. ENABLE HSE and wait for the HSE to become Ready
	RCC->CR |= RCC_CR_HSEON;
 8000720:	4b27      	ldr	r3, [pc, #156]	@ (80007c0 <SysClockConfig+0xa4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a26      	ldr	r2, [pc, #152]	@ (80007c0 <SysClockConfig+0xa4>)
 8000726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800072a:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 800072c:	bf00      	nop
 800072e:	4b24      	ldr	r3, [pc, #144]	@ (80007c0 <SysClockConfig+0xa4>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0f9      	beq.n	800072e <SysClockConfig+0x12>

	// 2. Set the POWER ENABLE CLOCK and VOLTAGE REGULATOR
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800073a:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <SysClockConfig+0xa4>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073e:	4a20      	ldr	r2, [pc, #128]	@ (80007c0 <SysClockConfig+0xa4>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000744:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_VOS;
 8000746:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <SysClockConfig+0xa8>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a1e      	ldr	r2, [pc, #120]	@ (80007c4 <SysClockConfig+0xa8>)
 800074c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000750:	6013      	str	r3, [r2, #0]


	// 3. Configure the FLASH PREFETCH and the LATENCY Related Settings
	FLASH->ACR = FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 8000752:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <SysClockConfig+0xac>)
 8000754:	f240 7205 	movw	r2, #1797	@ 0x705
 8000758:	601a      	str	r2, [r3, #0]

	// 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
	// AHB PR
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800075a:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <SysClockConfig+0xa4>)
 800075c:	4a18      	ldr	r2, [pc, #96]	@ (80007c0 <SysClockConfig+0xa4>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	6093      	str	r3, [r2, #8]

	// APB1 PR
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <SysClockConfig+0xa4>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	4a16      	ldr	r2, [pc, #88]	@ (80007c0 <SysClockConfig+0xa4>)
 8000768:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800076c:	6093      	str	r3, [r2, #8]

	// APB2 PR
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <SysClockConfig+0xa4>)
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	4a13      	ldr	r2, [pc, #76]	@ (80007c0 <SysClockConfig+0xa4>)
 8000774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000778:	6093      	str	r3, [r2, #8]


	// 5. Configure the MAIN PLL
	RCC->PLLCFGR = (PLL_M <<0) | (PLL_N << 6) | (PLL_P <<16) | (RCC_PLLCFGR_PLLSRC_HSE);
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <SysClockConfig+0xa4>)
 800077c:	4a13      	ldr	r2, [pc, #76]	@ (80007cc <SysClockConfig+0xb0>)
 800077e:	605a      	str	r2, [r3, #4]

	// 6. Enable the PLL and wait for it to become ready
	RCC->CR |= RCC_CR_PLLON;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <SysClockConfig+0xa4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0e      	ldr	r2, [pc, #56]	@ (80007c0 <SysClockConfig+0xa4>)
 8000786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800078a:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 800078c:	bf00      	nop
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <SysClockConfig+0xa4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000796:	2b00      	cmp	r3, #0
 8000798:	d0f9      	beq.n	800078e <SysClockConfig+0x72>

	// 7. Select the Clock Source and wait for it to be set
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <SysClockConfig+0xa4>)
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	4a08      	ldr	r2, [pc, #32]	@ (80007c0 <SysClockConfig+0xa4>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80007a6:	bf00      	nop
 80007a8:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <SysClockConfig+0xa4>)
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	f003 030c 	and.w	r3, r3, #12
 80007b0:	2b08      	cmp	r3, #8
 80007b2:	d1f9      	bne.n	80007a8 <SysClockConfig+0x8c>
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000
 80007c8:	40023c00 	.word	0x40023c00
 80007cc:	00402d04 	.word	0x00402d04

080007d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d8:	4a14      	ldr	r2, [pc, #80]	@ (800082c <_sbrk+0x5c>)
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <_sbrk+0x60>)
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e4:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <_sbrk+0x64>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d102      	bne.n	80007f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <_sbrk+0x64>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <_sbrk+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007f2:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	693a      	ldr	r2, [r7, #16]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d207      	bcs.n	8000810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000800:	f000 f90e 	bl	8000a20 <__errno>
 8000804:	4603      	mov	r3, r0
 8000806:	220c      	movs	r2, #12
 8000808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	e009      	b.n	8000824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000810:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000816:	4b07      	ldr	r3, [pc, #28]	@ (8000834 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	4a05      	ldr	r2, [pc, #20]	@ (8000834 <_sbrk+0x64>)
 8000820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000822:	68fb      	ldr	r3, [r7, #12]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20020000 	.word	0x20020000
 8000830:	00000400 	.word	0x00000400
 8000834:	2000006c 	.word	0x2000006c
 8000838:	200001b8 	.word	0x200001b8

0800083c <UART2_SendChar>:
// UART Configuration and functions


// Function to send a single character over UART2
void UART2_SendChar(char ch)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	USART2->DR = ch; // Load the data register with the character
 8000846:	4a08      	ldr	r2, [pc, #32]	@ (8000868 <UART2_SendChar+0x2c>)
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & USART_SR_TXE)); // Wait until the transmit data register is empty
 800084c:	bf00      	nop
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <UART2_SendChar+0x2c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0f9      	beq.n	800084e <UART2_SendChar+0x12>
}
 800085a:	bf00      	nop
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	40004400 	.word	0x40004400

0800086c <UART2_SendString>:

// Function to send a string over UART2
void UART2_SendString(char *string)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	while(*string != '\0')
 8000874:	e007      	b.n	8000886 <UART2_SendString+0x1a>
	{
		UART2_SendChar(*string); // Send each character of the string
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ffde 	bl	800083c <UART2_SendChar>
		string++;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
	while(*string != '\0')
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1f3      	bne.n	8000876 <UART2_SendString+0xa>
	}
}
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <Usart2_config>:

// Function to configure USART2
void Usart2_config(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
	// Enable the clocks for GPIOA and USART2
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // Enable GPIOA clock
 800089c:	4b2d      	ldr	r3, [pc, #180]	@ (8000954 <Usart2_config+0xbc>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a0:	4a2c      	ldr	r2, [pc, #176]	@ (8000954 <Usart2_config+0xbc>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Enable USART2 clock
 80008a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000954 <Usart2_config+0xbc>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ac:	4a29      	ldr	r2, [pc, #164]	@ (8000954 <Usart2_config+0xbc>)
 80008ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b2:	6413      	str	r3, [r2, #64]	@ 0x40

	// Configure PA2 and PA3 for alternate function (USART2 TX/RX)
	GPIOA->MODER |= PA2_AF;  // Set PA2 to alternate function mode
 80008b4:	4b28      	ldr	r3, [pc, #160]	@ (8000958 <Usart2_config+0xc0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a27      	ldr	r2, [pc, #156]	@ (8000958 <Usart2_config+0xc0>)
 80008ba:	f043 0320 	orr.w	r3, r3, #32
 80008be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= PA3_AF;  // Set PA3 to alternate function mode
 80008c0:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <Usart2_config+0xc0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a24      	ldr	r2, [pc, #144]	@ (8000958 <Usart2_config+0xc0>)
 80008c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ca:	6013      	str	r3, [r2, #0]

	GPIOA->OSPEEDR |= (3 << 4); // Set high speed for PA2
 80008cc:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <Usart2_config+0xc0>)
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	4a21      	ldr	r2, [pc, #132]	@ (8000958 <Usart2_config+0xc0>)
 80008d2:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80008d6:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (3 << 6); // Set high speed for PA3
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <Usart2_config+0xc0>)
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000958 <Usart2_config+0xc0>)
 80008de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80008e2:	6093      	str	r3, [r2, #8]

	GPIOA->AFR[0] |= PA2_AF_USART2_TX; // Set alternate function for PA2 as USART2 TX
 80008e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <Usart2_config+0xc0>)
 80008e6:	6a1b      	ldr	r3, [r3, #32]
 80008e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000958 <Usart2_config+0xc0>)
 80008ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80008ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= PA3_AF_USART2_RX; // Set alternate function for PA3 as USART2 RX
 80008f0:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <Usart2_config+0xc0>)
 80008f2:	6a1b      	ldr	r3, [r3, #32]
 80008f4:	4a18      	ldr	r2, [pc, #96]	@ (8000958 <Usart2_config+0xc0>)
 80008f6:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80008fa:	6213      	str	r3, [r2, #32]

	USART2->CR1 = 0x00; // Clear all settings in CR1
 80008fc:	4b17      	ldr	r3, [pc, #92]	@ (800095c <Usart2_config+0xc4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_UE; // Enable USART2
 8000902:	4b16      	ldr	r3, [pc, #88]	@ (800095c <Usart2_config+0xc4>)
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	4a15      	ldr	r2, [pc, #84]	@ (800095c <Usart2_config+0xc4>)
 8000908:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800090c:	60d3      	str	r3, [r2, #12]

	USART2->CR1 &= ~(1 << 12); // Set word length to 8 bits
 800090e:	4b13      	ldr	r3, [pc, #76]	@ (800095c <Usart2_config+0xc4>)
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	4a12      	ldr	r2, [pc, #72]	@ (800095c <Usart2_config+0xc4>)
 8000914:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000918:	60d3      	str	r3, [r2, #12]

	USART2->BRR |= (1 << 0); // Set baud rate mantissa
 800091a:	4b10      	ldr	r3, [pc, #64]	@ (800095c <Usart2_config+0xc4>)
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	4a0f      	ldr	r2, [pc, #60]	@ (800095c <Usart2_config+0xc4>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6093      	str	r3, [r2, #8]
	USART2->BRR |= (24 << 4); // Set baud rate fraction
 8000926:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <Usart2_config+0xc4>)
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	4a0c      	ldr	r2, [pc, #48]	@ (800095c <Usart2_config+0xc4>)
 800092c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8000930:	6093      	str	r3, [r2, #8]

	USART2->CR1 |= USART_CR1_RE; // Enable receiver
 8000932:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <Usart2_config+0xc4>)
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	4a09      	ldr	r2, [pc, #36]	@ (800095c <Usart2_config+0xc4>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_TE; // Enable transmitter
 800093e:	4b07      	ldr	r3, [pc, #28]	@ (800095c <Usart2_config+0xc4>)
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	4a06      	ldr	r2, [pc, #24]	@ (800095c <Usart2_config+0xc4>)
 8000944:	f043 0308 	orr.w	r3, r3, #8
 8000948:	60d3      	str	r3, [r2, #12]
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40023800 	.word	0x40023800
 8000958:	40020000 	.word	0x40020000
 800095c:	40004400 	.word	0x40004400

08000960 <receiverdata>:

// Function to receive data from UART2
uint8_t receiverdata(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
	while(!(USART2->SR & USART_SR_RXNE)); // Wait until data is received
 8000966:	bf00      	nop
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <receiverdata+0x28>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 0320 	and.w	r3, r3, #32
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0f9      	beq.n	8000968 <receiverdata+0x8>
	uint8_t data = USART2->DR; // Read the received data
 8000974:	4b04      	ldr	r3, [pc, #16]	@ (8000988 <receiverdata+0x28>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	71fb      	strb	r3, [r7, #7]
	return data; // Return the received data
 800097a:	79fb      	ldrb	r3, [r7, #7]
}
 800097c:	4618      	mov	r0, r3
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	40004400 	.word	0x40004400

0800098c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800098c:	480d      	ldr	r0, [pc, #52]	@ (80009c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800098e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000990:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000994:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000996:	490d      	ldr	r1, [pc, #52]	@ (80009cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000998:	4a0d      	ldr	r2, [pc, #52]	@ (80009d0 <LoopForever+0xe>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ac:	4c0a      	ldr	r4, [pc, #40]	@ (80009d8 <LoopForever+0x16>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ba:	f000 f837 	bl	8000a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009be:	f7ff fd91 	bl	80004e4 <main>

080009c2 <LoopForever>:

LoopForever:
  b LoopForever
 80009c2:	e7fe      	b.n	80009c2 <LoopForever>
  ldr   r0, =_estack
 80009c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80009d0:	08001654 	.word	0x08001654
  ldr r2, =_sbss
 80009d4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80009d8:	200001b8 	.word	0x200001b8

080009dc <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <BusFault_Handler>
	...

080009e0 <siprintf>:
 80009e0:	b40e      	push	{r1, r2, r3}
 80009e2:	b500      	push	{lr}
 80009e4:	b09c      	sub	sp, #112	@ 0x70
 80009e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80009e8:	9002      	str	r0, [sp, #8]
 80009ea:	9006      	str	r0, [sp, #24]
 80009ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80009f0:	4809      	ldr	r0, [pc, #36]	@ (8000a18 <siprintf+0x38>)
 80009f2:	9107      	str	r1, [sp, #28]
 80009f4:	9104      	str	r1, [sp, #16]
 80009f6:	4909      	ldr	r1, [pc, #36]	@ (8000a1c <siprintf+0x3c>)
 80009f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80009fc:	9105      	str	r1, [sp, #20]
 80009fe:	6800      	ldr	r0, [r0, #0]
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	a902      	add	r1, sp, #8
 8000a04:	f000 f98c 	bl	8000d20 <_svfiprintf_r>
 8000a08:	9b02      	ldr	r3, [sp, #8]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
 8000a0e:	b01c      	add	sp, #112	@ 0x70
 8000a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a14:	b003      	add	sp, #12
 8000a16:	4770      	bx	lr
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	ffff0208 	.word	0xffff0208

08000a20 <__errno>:
 8000a20:	4b01      	ldr	r3, [pc, #4]	@ (8000a28 <__errno+0x8>)
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000000 	.word	0x20000000

08000a2c <__libc_init_array>:
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	4d0d      	ldr	r5, [pc, #52]	@ (8000a64 <__libc_init_array+0x38>)
 8000a30:	4c0d      	ldr	r4, [pc, #52]	@ (8000a68 <__libc_init_array+0x3c>)
 8000a32:	1b64      	subs	r4, r4, r5
 8000a34:	10a4      	asrs	r4, r4, #2
 8000a36:	2600      	movs	r6, #0
 8000a38:	42a6      	cmp	r6, r4
 8000a3a:	d109      	bne.n	8000a50 <__libc_init_array+0x24>
 8000a3c:	4d0b      	ldr	r5, [pc, #44]	@ (8000a6c <__libc_init_array+0x40>)
 8000a3e:	4c0c      	ldr	r4, [pc, #48]	@ (8000a70 <__libc_init_array+0x44>)
 8000a40:	f000 fc66 	bl	8001310 <_init>
 8000a44:	1b64      	subs	r4, r4, r5
 8000a46:	10a4      	asrs	r4, r4, #2
 8000a48:	2600      	movs	r6, #0
 8000a4a:	42a6      	cmp	r6, r4
 8000a4c:	d105      	bne.n	8000a5a <__libc_init_array+0x2e>
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a54:	4798      	blx	r3
 8000a56:	3601      	adds	r6, #1
 8000a58:	e7ee      	b.n	8000a38 <__libc_init_array+0xc>
 8000a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a5e:	4798      	blx	r3
 8000a60:	3601      	adds	r6, #1
 8000a62:	e7f2      	b.n	8000a4a <__libc_init_array+0x1e>
 8000a64:	0800164c 	.word	0x0800164c
 8000a68:	0800164c 	.word	0x0800164c
 8000a6c:	0800164c 	.word	0x0800164c
 8000a70:	08001650 	.word	0x08001650

08000a74 <__retarget_lock_acquire_recursive>:
 8000a74:	4770      	bx	lr

08000a76 <__retarget_lock_release_recursive>:
 8000a76:	4770      	bx	lr

08000a78 <_free_r>:
 8000a78:	b538      	push	{r3, r4, r5, lr}
 8000a7a:	4605      	mov	r5, r0
 8000a7c:	2900      	cmp	r1, #0
 8000a7e:	d041      	beq.n	8000b04 <_free_r+0x8c>
 8000a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a84:	1f0c      	subs	r4, r1, #4
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	bfb8      	it	lt
 8000a8a:	18e4      	addlt	r4, r4, r3
 8000a8c:	f000 f8e0 	bl	8000c50 <__malloc_lock>
 8000a90:	4a1d      	ldr	r2, [pc, #116]	@ (8000b08 <_free_r+0x90>)
 8000a92:	6813      	ldr	r3, [r2, #0]
 8000a94:	b933      	cbnz	r3, 8000aa4 <_free_r+0x2c>
 8000a96:	6063      	str	r3, [r4, #4]
 8000a98:	6014      	str	r4, [r2, #0]
 8000a9a:	4628      	mov	r0, r5
 8000a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000aa0:	f000 b8dc 	b.w	8000c5c <__malloc_unlock>
 8000aa4:	42a3      	cmp	r3, r4
 8000aa6:	d908      	bls.n	8000aba <_free_r+0x42>
 8000aa8:	6820      	ldr	r0, [r4, #0]
 8000aaa:	1821      	adds	r1, r4, r0
 8000aac:	428b      	cmp	r3, r1
 8000aae:	bf01      	itttt	eq
 8000ab0:	6819      	ldreq	r1, [r3, #0]
 8000ab2:	685b      	ldreq	r3, [r3, #4]
 8000ab4:	1809      	addeq	r1, r1, r0
 8000ab6:	6021      	streq	r1, [r4, #0]
 8000ab8:	e7ed      	b.n	8000a96 <_free_r+0x1e>
 8000aba:	461a      	mov	r2, r3
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	b10b      	cbz	r3, 8000ac4 <_free_r+0x4c>
 8000ac0:	42a3      	cmp	r3, r4
 8000ac2:	d9fa      	bls.n	8000aba <_free_r+0x42>
 8000ac4:	6811      	ldr	r1, [r2, #0]
 8000ac6:	1850      	adds	r0, r2, r1
 8000ac8:	42a0      	cmp	r0, r4
 8000aca:	d10b      	bne.n	8000ae4 <_free_r+0x6c>
 8000acc:	6820      	ldr	r0, [r4, #0]
 8000ace:	4401      	add	r1, r0
 8000ad0:	1850      	adds	r0, r2, r1
 8000ad2:	4283      	cmp	r3, r0
 8000ad4:	6011      	str	r1, [r2, #0]
 8000ad6:	d1e0      	bne.n	8000a9a <_free_r+0x22>
 8000ad8:	6818      	ldr	r0, [r3, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	6053      	str	r3, [r2, #4]
 8000ade:	4408      	add	r0, r1
 8000ae0:	6010      	str	r0, [r2, #0]
 8000ae2:	e7da      	b.n	8000a9a <_free_r+0x22>
 8000ae4:	d902      	bls.n	8000aec <_free_r+0x74>
 8000ae6:	230c      	movs	r3, #12
 8000ae8:	602b      	str	r3, [r5, #0]
 8000aea:	e7d6      	b.n	8000a9a <_free_r+0x22>
 8000aec:	6820      	ldr	r0, [r4, #0]
 8000aee:	1821      	adds	r1, r4, r0
 8000af0:	428b      	cmp	r3, r1
 8000af2:	bf04      	itt	eq
 8000af4:	6819      	ldreq	r1, [r3, #0]
 8000af6:	685b      	ldreq	r3, [r3, #4]
 8000af8:	6063      	str	r3, [r4, #4]
 8000afa:	bf04      	itt	eq
 8000afc:	1809      	addeq	r1, r1, r0
 8000afe:	6021      	streq	r1, [r4, #0]
 8000b00:	6054      	str	r4, [r2, #4]
 8000b02:	e7ca      	b.n	8000a9a <_free_r+0x22>
 8000b04:	bd38      	pop	{r3, r4, r5, pc}
 8000b06:	bf00      	nop
 8000b08:	200001b4 	.word	0x200001b4

08000b0c <sbrk_aligned>:
 8000b0c:	b570      	push	{r4, r5, r6, lr}
 8000b0e:	4e0f      	ldr	r6, [pc, #60]	@ (8000b4c <sbrk_aligned+0x40>)
 8000b10:	460c      	mov	r4, r1
 8000b12:	6831      	ldr	r1, [r6, #0]
 8000b14:	4605      	mov	r5, r0
 8000b16:	b911      	cbnz	r1, 8000b1e <sbrk_aligned+0x12>
 8000b18:	f000 fba6 	bl	8001268 <_sbrk_r>
 8000b1c:	6030      	str	r0, [r6, #0]
 8000b1e:	4621      	mov	r1, r4
 8000b20:	4628      	mov	r0, r5
 8000b22:	f000 fba1 	bl	8001268 <_sbrk_r>
 8000b26:	1c43      	adds	r3, r0, #1
 8000b28:	d103      	bne.n	8000b32 <sbrk_aligned+0x26>
 8000b2a:	f04f 34ff 	mov.w	r4, #4294967295
 8000b2e:	4620      	mov	r0, r4
 8000b30:	bd70      	pop	{r4, r5, r6, pc}
 8000b32:	1cc4      	adds	r4, r0, #3
 8000b34:	f024 0403 	bic.w	r4, r4, #3
 8000b38:	42a0      	cmp	r0, r4
 8000b3a:	d0f8      	beq.n	8000b2e <sbrk_aligned+0x22>
 8000b3c:	1a21      	subs	r1, r4, r0
 8000b3e:	4628      	mov	r0, r5
 8000b40:	f000 fb92 	bl	8001268 <_sbrk_r>
 8000b44:	3001      	adds	r0, #1
 8000b46:	d1f2      	bne.n	8000b2e <sbrk_aligned+0x22>
 8000b48:	e7ef      	b.n	8000b2a <sbrk_aligned+0x1e>
 8000b4a:	bf00      	nop
 8000b4c:	200001b0 	.word	0x200001b0

08000b50 <_malloc_r>:
 8000b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b54:	1ccd      	adds	r5, r1, #3
 8000b56:	f025 0503 	bic.w	r5, r5, #3
 8000b5a:	3508      	adds	r5, #8
 8000b5c:	2d0c      	cmp	r5, #12
 8000b5e:	bf38      	it	cc
 8000b60:	250c      	movcc	r5, #12
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	4606      	mov	r6, r0
 8000b66:	db01      	blt.n	8000b6c <_malloc_r+0x1c>
 8000b68:	42a9      	cmp	r1, r5
 8000b6a:	d904      	bls.n	8000b76 <_malloc_r+0x26>
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	6033      	str	r3, [r6, #0]
 8000b70:	2000      	movs	r0, #0
 8000b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c4c <_malloc_r+0xfc>
 8000b7a:	f000 f869 	bl	8000c50 <__malloc_lock>
 8000b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b82:	461c      	mov	r4, r3
 8000b84:	bb44      	cbnz	r4, 8000bd8 <_malloc_r+0x88>
 8000b86:	4629      	mov	r1, r5
 8000b88:	4630      	mov	r0, r6
 8000b8a:	f7ff ffbf 	bl	8000b0c <sbrk_aligned>
 8000b8e:	1c43      	adds	r3, r0, #1
 8000b90:	4604      	mov	r4, r0
 8000b92:	d158      	bne.n	8000c46 <_malloc_r+0xf6>
 8000b94:	f8d8 4000 	ldr.w	r4, [r8]
 8000b98:	4627      	mov	r7, r4
 8000b9a:	2f00      	cmp	r7, #0
 8000b9c:	d143      	bne.n	8000c26 <_malloc_r+0xd6>
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d04b      	beq.n	8000c3a <_malloc_r+0xea>
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	eb04 0903 	add.w	r9, r4, r3
 8000bac:	f000 fb5c 	bl	8001268 <_sbrk_r>
 8000bb0:	4581      	cmp	r9, r0
 8000bb2:	d142      	bne.n	8000c3a <_malloc_r+0xea>
 8000bb4:	6821      	ldr	r1, [r4, #0]
 8000bb6:	1a6d      	subs	r5, r5, r1
 8000bb8:	4629      	mov	r1, r5
 8000bba:	4630      	mov	r0, r6
 8000bbc:	f7ff ffa6 	bl	8000b0c <sbrk_aligned>
 8000bc0:	3001      	adds	r0, #1
 8000bc2:	d03a      	beq.n	8000c3a <_malloc_r+0xea>
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	442b      	add	r3, r5
 8000bc8:	6023      	str	r3, [r4, #0]
 8000bca:	f8d8 3000 	ldr.w	r3, [r8]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	bb62      	cbnz	r2, 8000c2c <_malloc_r+0xdc>
 8000bd2:	f8c8 7000 	str.w	r7, [r8]
 8000bd6:	e00f      	b.n	8000bf8 <_malloc_r+0xa8>
 8000bd8:	6822      	ldr	r2, [r4, #0]
 8000bda:	1b52      	subs	r2, r2, r5
 8000bdc:	d420      	bmi.n	8000c20 <_malloc_r+0xd0>
 8000bde:	2a0b      	cmp	r2, #11
 8000be0:	d917      	bls.n	8000c12 <_malloc_r+0xc2>
 8000be2:	1961      	adds	r1, r4, r5
 8000be4:	42a3      	cmp	r3, r4
 8000be6:	6025      	str	r5, [r4, #0]
 8000be8:	bf18      	it	ne
 8000bea:	6059      	strne	r1, [r3, #4]
 8000bec:	6863      	ldr	r3, [r4, #4]
 8000bee:	bf08      	it	eq
 8000bf0:	f8c8 1000 	streq.w	r1, [r8]
 8000bf4:	5162      	str	r2, [r4, r5]
 8000bf6:	604b      	str	r3, [r1, #4]
 8000bf8:	4630      	mov	r0, r6
 8000bfa:	f000 f82f 	bl	8000c5c <__malloc_unlock>
 8000bfe:	f104 000b 	add.w	r0, r4, #11
 8000c02:	1d23      	adds	r3, r4, #4
 8000c04:	f020 0007 	bic.w	r0, r0, #7
 8000c08:	1ac2      	subs	r2, r0, r3
 8000c0a:	bf1c      	itt	ne
 8000c0c:	1a1b      	subne	r3, r3, r0
 8000c0e:	50a3      	strne	r3, [r4, r2]
 8000c10:	e7af      	b.n	8000b72 <_malloc_r+0x22>
 8000c12:	6862      	ldr	r2, [r4, #4]
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	bf0c      	ite	eq
 8000c18:	f8c8 2000 	streq.w	r2, [r8]
 8000c1c:	605a      	strne	r2, [r3, #4]
 8000c1e:	e7eb      	b.n	8000bf8 <_malloc_r+0xa8>
 8000c20:	4623      	mov	r3, r4
 8000c22:	6864      	ldr	r4, [r4, #4]
 8000c24:	e7ae      	b.n	8000b84 <_malloc_r+0x34>
 8000c26:	463c      	mov	r4, r7
 8000c28:	687f      	ldr	r7, [r7, #4]
 8000c2a:	e7b6      	b.n	8000b9a <_malloc_r+0x4a>
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	42a3      	cmp	r3, r4
 8000c32:	d1fb      	bne.n	8000c2c <_malloc_r+0xdc>
 8000c34:	2300      	movs	r3, #0
 8000c36:	6053      	str	r3, [r2, #4]
 8000c38:	e7de      	b.n	8000bf8 <_malloc_r+0xa8>
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	6033      	str	r3, [r6, #0]
 8000c3e:	4630      	mov	r0, r6
 8000c40:	f000 f80c 	bl	8000c5c <__malloc_unlock>
 8000c44:	e794      	b.n	8000b70 <_malloc_r+0x20>
 8000c46:	6005      	str	r5, [r0, #0]
 8000c48:	e7d6      	b.n	8000bf8 <_malloc_r+0xa8>
 8000c4a:	bf00      	nop
 8000c4c:	200001b4 	.word	0x200001b4

08000c50 <__malloc_lock>:
 8000c50:	4801      	ldr	r0, [pc, #4]	@ (8000c58 <__malloc_lock+0x8>)
 8000c52:	f7ff bf0f 	b.w	8000a74 <__retarget_lock_acquire_recursive>
 8000c56:	bf00      	nop
 8000c58:	200001ac 	.word	0x200001ac

08000c5c <__malloc_unlock>:
 8000c5c:	4801      	ldr	r0, [pc, #4]	@ (8000c64 <__malloc_unlock+0x8>)
 8000c5e:	f7ff bf0a 	b.w	8000a76 <__retarget_lock_release_recursive>
 8000c62:	bf00      	nop
 8000c64:	200001ac 	.word	0x200001ac

08000c68 <__ssputs_r>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	688e      	ldr	r6, [r1, #8]
 8000c6e:	461f      	mov	r7, r3
 8000c70:	42be      	cmp	r6, r7
 8000c72:	680b      	ldr	r3, [r1, #0]
 8000c74:	4682      	mov	sl, r0
 8000c76:	460c      	mov	r4, r1
 8000c78:	4690      	mov	r8, r2
 8000c7a:	d82d      	bhi.n	8000cd8 <__ssputs_r+0x70>
 8000c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000c84:	d026      	beq.n	8000cd4 <__ssputs_r+0x6c>
 8000c86:	6965      	ldr	r5, [r4, #20]
 8000c88:	6909      	ldr	r1, [r1, #16]
 8000c8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000c8e:	eba3 0901 	sub.w	r9, r3, r1
 8000c92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000c96:	1c7b      	adds	r3, r7, #1
 8000c98:	444b      	add	r3, r9
 8000c9a:	106d      	asrs	r5, r5, #1
 8000c9c:	429d      	cmp	r5, r3
 8000c9e:	bf38      	it	cc
 8000ca0:	461d      	movcc	r5, r3
 8000ca2:	0553      	lsls	r3, r2, #21
 8000ca4:	d527      	bpl.n	8000cf6 <__ssputs_r+0x8e>
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	f7ff ff52 	bl	8000b50 <_malloc_r>
 8000cac:	4606      	mov	r6, r0
 8000cae:	b360      	cbz	r0, 8000d0a <__ssputs_r+0xa2>
 8000cb0:	6921      	ldr	r1, [r4, #16]
 8000cb2:	464a      	mov	r2, r9
 8000cb4:	f000 fae8 	bl	8001288 <memcpy>
 8000cb8:	89a3      	ldrh	r3, [r4, #12]
 8000cba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cc2:	81a3      	strh	r3, [r4, #12]
 8000cc4:	6126      	str	r6, [r4, #16]
 8000cc6:	6165      	str	r5, [r4, #20]
 8000cc8:	444e      	add	r6, r9
 8000cca:	eba5 0509 	sub.w	r5, r5, r9
 8000cce:	6026      	str	r6, [r4, #0]
 8000cd0:	60a5      	str	r5, [r4, #8]
 8000cd2:	463e      	mov	r6, r7
 8000cd4:	42be      	cmp	r6, r7
 8000cd6:	d900      	bls.n	8000cda <__ssputs_r+0x72>
 8000cd8:	463e      	mov	r6, r7
 8000cda:	6820      	ldr	r0, [r4, #0]
 8000cdc:	4632      	mov	r2, r6
 8000cde:	4641      	mov	r1, r8
 8000ce0:	f000 faa8 	bl	8001234 <memmove>
 8000ce4:	68a3      	ldr	r3, [r4, #8]
 8000ce6:	1b9b      	subs	r3, r3, r6
 8000ce8:	60a3      	str	r3, [r4, #8]
 8000cea:	6823      	ldr	r3, [r4, #0]
 8000cec:	4433      	add	r3, r6
 8000cee:	6023      	str	r3, [r4, #0]
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	462a      	mov	r2, r5
 8000cf8:	f000 fad4 	bl	80012a4 <_realloc_r>
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d1e0      	bne.n	8000cc4 <__ssputs_r+0x5c>
 8000d02:	6921      	ldr	r1, [r4, #16]
 8000d04:	4650      	mov	r0, sl
 8000d06:	f7ff feb7 	bl	8000a78 <_free_r>
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	f8ca 3000 	str.w	r3, [sl]
 8000d10:	89a3      	ldrh	r3, [r4, #12]
 8000d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d16:	81a3      	strh	r3, [r4, #12]
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	e7e9      	b.n	8000cf2 <__ssputs_r+0x8a>
	...

08000d20 <_svfiprintf_r>:
 8000d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d24:	4698      	mov	r8, r3
 8000d26:	898b      	ldrh	r3, [r1, #12]
 8000d28:	061b      	lsls	r3, r3, #24
 8000d2a:	b09d      	sub	sp, #116	@ 0x74
 8000d2c:	4607      	mov	r7, r0
 8000d2e:	460d      	mov	r5, r1
 8000d30:	4614      	mov	r4, r2
 8000d32:	d510      	bpl.n	8000d56 <_svfiprintf_r+0x36>
 8000d34:	690b      	ldr	r3, [r1, #16]
 8000d36:	b973      	cbnz	r3, 8000d56 <_svfiprintf_r+0x36>
 8000d38:	2140      	movs	r1, #64	@ 0x40
 8000d3a:	f7ff ff09 	bl	8000b50 <_malloc_r>
 8000d3e:	6028      	str	r0, [r5, #0]
 8000d40:	6128      	str	r0, [r5, #16]
 8000d42:	b930      	cbnz	r0, 8000d52 <_svfiprintf_r+0x32>
 8000d44:	230c      	movs	r3, #12
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	b01d      	add	sp, #116	@ 0x74
 8000d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d52:	2340      	movs	r3, #64	@ 0x40
 8000d54:	616b      	str	r3, [r5, #20]
 8000d56:	2300      	movs	r3, #0
 8000d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d5a:	2320      	movs	r3, #32
 8000d5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d64:	2330      	movs	r3, #48	@ 0x30
 8000d66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000f04 <_svfiprintf_r+0x1e4>
 8000d6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d6e:	f04f 0901 	mov.w	r9, #1
 8000d72:	4623      	mov	r3, r4
 8000d74:	469a      	mov	sl, r3
 8000d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d7a:	b10a      	cbz	r2, 8000d80 <_svfiprintf_r+0x60>
 8000d7c:	2a25      	cmp	r2, #37	@ 0x25
 8000d7e:	d1f9      	bne.n	8000d74 <_svfiprintf_r+0x54>
 8000d80:	ebba 0b04 	subs.w	fp, sl, r4
 8000d84:	d00b      	beq.n	8000d9e <_svfiprintf_r+0x7e>
 8000d86:	465b      	mov	r3, fp
 8000d88:	4622      	mov	r2, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	4638      	mov	r0, r7
 8000d8e:	f7ff ff6b 	bl	8000c68 <__ssputs_r>
 8000d92:	3001      	adds	r0, #1
 8000d94:	f000 80a7 	beq.w	8000ee6 <_svfiprintf_r+0x1c6>
 8000d98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d9a:	445a      	add	r2, fp
 8000d9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 809f 	beq.w	8000ee6 <_svfiprintf_r+0x1c6>
 8000da8:	2300      	movs	r3, #0
 8000daa:	f04f 32ff 	mov.w	r2, #4294967295
 8000dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000db2:	f10a 0a01 	add.w	sl, sl, #1
 8000db6:	9304      	str	r3, [sp, #16]
 8000db8:	9307      	str	r3, [sp, #28]
 8000dba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000dbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8000dc0:	4654      	mov	r4, sl
 8000dc2:	2205      	movs	r2, #5
 8000dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dc8:	484e      	ldr	r0, [pc, #312]	@ (8000f04 <_svfiprintf_r+0x1e4>)
 8000dca:	f7ff fa21 	bl	8000210 <memchr>
 8000dce:	9a04      	ldr	r2, [sp, #16]
 8000dd0:	b9d8      	cbnz	r0, 8000e0a <_svfiprintf_r+0xea>
 8000dd2:	06d0      	lsls	r0, r2, #27
 8000dd4:	bf44      	itt	mi
 8000dd6:	2320      	movmi	r3, #32
 8000dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ddc:	0711      	lsls	r1, r2, #28
 8000dde:	bf44      	itt	mi
 8000de0:	232b      	movmi	r3, #43	@ 0x2b
 8000de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000de6:	f89a 3000 	ldrb.w	r3, [sl]
 8000dea:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dec:	d015      	beq.n	8000e1a <_svfiprintf_r+0xfa>
 8000dee:	9a07      	ldr	r2, [sp, #28]
 8000df0:	4654      	mov	r4, sl
 8000df2:	2000      	movs	r0, #0
 8000df4:	f04f 0c0a 	mov.w	ip, #10
 8000df8:	4621      	mov	r1, r4
 8000dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dfe:	3b30      	subs	r3, #48	@ 0x30
 8000e00:	2b09      	cmp	r3, #9
 8000e02:	d94b      	bls.n	8000e9c <_svfiprintf_r+0x17c>
 8000e04:	b1b0      	cbz	r0, 8000e34 <_svfiprintf_r+0x114>
 8000e06:	9207      	str	r2, [sp, #28]
 8000e08:	e014      	b.n	8000e34 <_svfiprintf_r+0x114>
 8000e0a:	eba0 0308 	sub.w	r3, r0, r8
 8000e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8000e12:	4313      	orrs	r3, r2
 8000e14:	9304      	str	r3, [sp, #16]
 8000e16:	46a2      	mov	sl, r4
 8000e18:	e7d2      	b.n	8000dc0 <_svfiprintf_r+0xa0>
 8000e1a:	9b03      	ldr	r3, [sp, #12]
 8000e1c:	1d19      	adds	r1, r3, #4
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	9103      	str	r1, [sp, #12]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bfbb      	ittet	lt
 8000e26:	425b      	neglt	r3, r3
 8000e28:	f042 0202 	orrlt.w	r2, r2, #2
 8000e2c:	9307      	strge	r3, [sp, #28]
 8000e2e:	9307      	strlt	r3, [sp, #28]
 8000e30:	bfb8      	it	lt
 8000e32:	9204      	strlt	r2, [sp, #16]
 8000e34:	7823      	ldrb	r3, [r4, #0]
 8000e36:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e38:	d10a      	bne.n	8000e50 <_svfiprintf_r+0x130>
 8000e3a:	7863      	ldrb	r3, [r4, #1]
 8000e3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e3e:	d132      	bne.n	8000ea6 <_svfiprintf_r+0x186>
 8000e40:	9b03      	ldr	r3, [sp, #12]
 8000e42:	1d1a      	adds	r2, r3, #4
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	9203      	str	r2, [sp, #12]
 8000e48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e4c:	3402      	adds	r4, #2
 8000e4e:	9305      	str	r3, [sp, #20]
 8000e50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000f14 <_svfiprintf_r+0x1f4>
 8000e54:	7821      	ldrb	r1, [r4, #0]
 8000e56:	2203      	movs	r2, #3
 8000e58:	4650      	mov	r0, sl
 8000e5a:	f7ff f9d9 	bl	8000210 <memchr>
 8000e5e:	b138      	cbz	r0, 8000e70 <_svfiprintf_r+0x150>
 8000e60:	9b04      	ldr	r3, [sp, #16]
 8000e62:	eba0 000a 	sub.w	r0, r0, sl
 8000e66:	2240      	movs	r2, #64	@ 0x40
 8000e68:	4082      	lsls	r2, r0
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	3401      	adds	r4, #1
 8000e6e:	9304      	str	r3, [sp, #16]
 8000e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e74:	4824      	ldr	r0, [pc, #144]	@ (8000f08 <_svfiprintf_r+0x1e8>)
 8000e76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e7a:	2206      	movs	r2, #6
 8000e7c:	f7ff f9c8 	bl	8000210 <memchr>
 8000e80:	2800      	cmp	r0, #0
 8000e82:	d036      	beq.n	8000ef2 <_svfiprintf_r+0x1d2>
 8000e84:	4b21      	ldr	r3, [pc, #132]	@ (8000f0c <_svfiprintf_r+0x1ec>)
 8000e86:	bb1b      	cbnz	r3, 8000ed0 <_svfiprintf_r+0x1b0>
 8000e88:	9b03      	ldr	r3, [sp, #12]
 8000e8a:	3307      	adds	r3, #7
 8000e8c:	f023 0307 	bic.w	r3, r3, #7
 8000e90:	3308      	adds	r3, #8
 8000e92:	9303      	str	r3, [sp, #12]
 8000e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e96:	4433      	add	r3, r6
 8000e98:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e9a:	e76a      	b.n	8000d72 <_svfiprintf_r+0x52>
 8000e9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ea0:	460c      	mov	r4, r1
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	e7a8      	b.n	8000df8 <_svfiprintf_r+0xd8>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	3401      	adds	r4, #1
 8000eaa:	9305      	str	r3, [sp, #20]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 0c0a 	mov.w	ip, #10
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000eb8:	3a30      	subs	r2, #48	@ 0x30
 8000eba:	2a09      	cmp	r2, #9
 8000ebc:	d903      	bls.n	8000ec6 <_svfiprintf_r+0x1a6>
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0c6      	beq.n	8000e50 <_svfiprintf_r+0x130>
 8000ec2:	9105      	str	r1, [sp, #20]
 8000ec4:	e7c4      	b.n	8000e50 <_svfiprintf_r+0x130>
 8000ec6:	fb0c 2101 	mla	r1, ip, r1, r2
 8000eca:	4604      	mov	r4, r0
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e7f0      	b.n	8000eb2 <_svfiprintf_r+0x192>
 8000ed0:	ab03      	add	r3, sp, #12
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	462a      	mov	r2, r5
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <_svfiprintf_r+0x1f0>)
 8000ed8:	a904      	add	r1, sp, #16
 8000eda:	4638      	mov	r0, r7
 8000edc:	f3af 8000 	nop.w
 8000ee0:	1c42      	adds	r2, r0, #1
 8000ee2:	4606      	mov	r6, r0
 8000ee4:	d1d6      	bne.n	8000e94 <_svfiprintf_r+0x174>
 8000ee6:	89ab      	ldrh	r3, [r5, #12]
 8000ee8:	065b      	lsls	r3, r3, #25
 8000eea:	f53f af2d 	bmi.w	8000d48 <_svfiprintf_r+0x28>
 8000eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ef0:	e72c      	b.n	8000d4c <_svfiprintf_r+0x2c>
 8000ef2:	ab03      	add	r3, sp, #12
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	462a      	mov	r2, r5
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <_svfiprintf_r+0x1f0>)
 8000efa:	a904      	add	r1, sp, #16
 8000efc:	4638      	mov	r0, r7
 8000efe:	f000 f879 	bl	8000ff4 <_printf_i>
 8000f02:	e7ed      	b.n	8000ee0 <_svfiprintf_r+0x1c0>
 8000f04:	08001610 	.word	0x08001610
 8000f08:	0800161a 	.word	0x0800161a
 8000f0c:	00000000 	.word	0x00000000
 8000f10:	08000c69 	.word	0x08000c69
 8000f14:	08001616 	.word	0x08001616

08000f18 <_printf_common>:
 8000f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f1c:	4616      	mov	r6, r2
 8000f1e:	4698      	mov	r8, r3
 8000f20:	688a      	ldr	r2, [r1, #8]
 8000f22:	690b      	ldr	r3, [r1, #16]
 8000f24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	bfb8      	it	lt
 8000f2c:	4613      	movlt	r3, r2
 8000f2e:	6033      	str	r3, [r6, #0]
 8000f30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f34:	4607      	mov	r7, r0
 8000f36:	460c      	mov	r4, r1
 8000f38:	b10a      	cbz	r2, 8000f3e <_printf_common+0x26>
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	6033      	str	r3, [r6, #0]
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	0699      	lsls	r1, r3, #26
 8000f42:	bf42      	ittt	mi
 8000f44:	6833      	ldrmi	r3, [r6, #0]
 8000f46:	3302      	addmi	r3, #2
 8000f48:	6033      	strmi	r3, [r6, #0]
 8000f4a:	6825      	ldr	r5, [r4, #0]
 8000f4c:	f015 0506 	ands.w	r5, r5, #6
 8000f50:	d106      	bne.n	8000f60 <_printf_common+0x48>
 8000f52:	f104 0a19 	add.w	sl, r4, #25
 8000f56:	68e3      	ldr	r3, [r4, #12]
 8000f58:	6832      	ldr	r2, [r6, #0]
 8000f5a:	1a9b      	subs	r3, r3, r2
 8000f5c:	42ab      	cmp	r3, r5
 8000f5e:	dc26      	bgt.n	8000fae <_printf_common+0x96>
 8000f60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f64:	6822      	ldr	r2, [r4, #0]
 8000f66:	3b00      	subs	r3, #0
 8000f68:	bf18      	it	ne
 8000f6a:	2301      	movne	r3, #1
 8000f6c:	0692      	lsls	r2, r2, #26
 8000f6e:	d42b      	bmi.n	8000fc8 <_printf_common+0xb0>
 8000f70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f74:	4641      	mov	r1, r8
 8000f76:	4638      	mov	r0, r7
 8000f78:	47c8      	blx	r9
 8000f7a:	3001      	adds	r0, #1
 8000f7c:	d01e      	beq.n	8000fbc <_printf_common+0xa4>
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	6922      	ldr	r2, [r4, #16]
 8000f82:	f003 0306 	and.w	r3, r3, #6
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf02      	ittt	eq
 8000f8a:	68e5      	ldreq	r5, [r4, #12]
 8000f8c:	6833      	ldreq	r3, [r6, #0]
 8000f8e:	1aed      	subeq	r5, r5, r3
 8000f90:	68a3      	ldr	r3, [r4, #8]
 8000f92:	bf0c      	ite	eq
 8000f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f98:	2500      	movne	r5, #0
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	bfc4      	itt	gt
 8000f9e:	1a9b      	subgt	r3, r3, r2
 8000fa0:	18ed      	addgt	r5, r5, r3
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	341a      	adds	r4, #26
 8000fa6:	42b5      	cmp	r5, r6
 8000fa8:	d11a      	bne.n	8000fe0 <_printf_common+0xc8>
 8000faa:	2000      	movs	r0, #0
 8000fac:	e008      	b.n	8000fc0 <_printf_common+0xa8>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	4652      	mov	r2, sl
 8000fb2:	4641      	mov	r1, r8
 8000fb4:	4638      	mov	r0, r7
 8000fb6:	47c8      	blx	r9
 8000fb8:	3001      	adds	r0, #1
 8000fba:	d103      	bne.n	8000fc4 <_printf_common+0xac>
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc4:	3501      	adds	r5, #1
 8000fc6:	e7c6      	b.n	8000f56 <_printf_common+0x3e>
 8000fc8:	18e1      	adds	r1, r4, r3
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	2030      	movs	r0, #48	@ 0x30
 8000fce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000fd2:	4422      	add	r2, r4
 8000fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000fd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000fdc:	3302      	adds	r3, #2
 8000fde:	e7c7      	b.n	8000f70 <_printf_common+0x58>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	4622      	mov	r2, r4
 8000fe4:	4641      	mov	r1, r8
 8000fe6:	4638      	mov	r0, r7
 8000fe8:	47c8      	blx	r9
 8000fea:	3001      	adds	r0, #1
 8000fec:	d0e6      	beq.n	8000fbc <_printf_common+0xa4>
 8000fee:	3601      	adds	r6, #1
 8000ff0:	e7d9      	b.n	8000fa6 <_printf_common+0x8e>
	...

08000ff4 <_printf_i>:
 8000ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff8:	7e0f      	ldrb	r7, [r1, #24]
 8000ffa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000ffc:	2f78      	cmp	r7, #120	@ 0x78
 8000ffe:	4691      	mov	r9, r2
 8001000:	4680      	mov	r8, r0
 8001002:	460c      	mov	r4, r1
 8001004:	469a      	mov	sl, r3
 8001006:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800100a:	d807      	bhi.n	800101c <_printf_i+0x28>
 800100c:	2f62      	cmp	r7, #98	@ 0x62
 800100e:	d80a      	bhi.n	8001026 <_printf_i+0x32>
 8001010:	2f00      	cmp	r7, #0
 8001012:	f000 80d2 	beq.w	80011ba <_printf_i+0x1c6>
 8001016:	2f58      	cmp	r7, #88	@ 0x58
 8001018:	f000 80b9 	beq.w	800118e <_printf_i+0x19a>
 800101c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001020:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001024:	e03a      	b.n	800109c <_printf_i+0xa8>
 8001026:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800102a:	2b15      	cmp	r3, #21
 800102c:	d8f6      	bhi.n	800101c <_printf_i+0x28>
 800102e:	a101      	add	r1, pc, #4	@ (adr r1, 8001034 <_printf_i+0x40>)
 8001030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001034:	0800108d 	.word	0x0800108d
 8001038:	080010a1 	.word	0x080010a1
 800103c:	0800101d 	.word	0x0800101d
 8001040:	0800101d 	.word	0x0800101d
 8001044:	0800101d 	.word	0x0800101d
 8001048:	0800101d 	.word	0x0800101d
 800104c:	080010a1 	.word	0x080010a1
 8001050:	0800101d 	.word	0x0800101d
 8001054:	0800101d 	.word	0x0800101d
 8001058:	0800101d 	.word	0x0800101d
 800105c:	0800101d 	.word	0x0800101d
 8001060:	080011a1 	.word	0x080011a1
 8001064:	080010cb 	.word	0x080010cb
 8001068:	0800115b 	.word	0x0800115b
 800106c:	0800101d 	.word	0x0800101d
 8001070:	0800101d 	.word	0x0800101d
 8001074:	080011c3 	.word	0x080011c3
 8001078:	0800101d 	.word	0x0800101d
 800107c:	080010cb 	.word	0x080010cb
 8001080:	0800101d 	.word	0x0800101d
 8001084:	0800101d 	.word	0x0800101d
 8001088:	08001163 	.word	0x08001163
 800108c:	6833      	ldr	r3, [r6, #0]
 800108e:	1d1a      	adds	r2, r3, #4
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6032      	str	r2, [r6, #0]
 8001094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001098:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800109c:	2301      	movs	r3, #1
 800109e:	e09d      	b.n	80011dc <_printf_i+0x1e8>
 80010a0:	6833      	ldr	r3, [r6, #0]
 80010a2:	6820      	ldr	r0, [r4, #0]
 80010a4:	1d19      	adds	r1, r3, #4
 80010a6:	6031      	str	r1, [r6, #0]
 80010a8:	0606      	lsls	r6, r0, #24
 80010aa:	d501      	bpl.n	80010b0 <_printf_i+0xbc>
 80010ac:	681d      	ldr	r5, [r3, #0]
 80010ae:	e003      	b.n	80010b8 <_printf_i+0xc4>
 80010b0:	0645      	lsls	r5, r0, #25
 80010b2:	d5fb      	bpl.n	80010ac <_printf_i+0xb8>
 80010b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80010b8:	2d00      	cmp	r5, #0
 80010ba:	da03      	bge.n	80010c4 <_printf_i+0xd0>
 80010bc:	232d      	movs	r3, #45	@ 0x2d
 80010be:	426d      	negs	r5, r5
 80010c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010c4:	4859      	ldr	r0, [pc, #356]	@ (800122c <_printf_i+0x238>)
 80010c6:	230a      	movs	r3, #10
 80010c8:	e011      	b.n	80010ee <_printf_i+0xfa>
 80010ca:	6821      	ldr	r1, [r4, #0]
 80010cc:	6833      	ldr	r3, [r6, #0]
 80010ce:	0608      	lsls	r0, r1, #24
 80010d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80010d4:	d402      	bmi.n	80010dc <_printf_i+0xe8>
 80010d6:	0649      	lsls	r1, r1, #25
 80010d8:	bf48      	it	mi
 80010da:	b2ad      	uxthmi	r5, r5
 80010dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80010de:	4853      	ldr	r0, [pc, #332]	@ (800122c <_printf_i+0x238>)
 80010e0:	6033      	str	r3, [r6, #0]
 80010e2:	bf14      	ite	ne
 80010e4:	230a      	movne	r3, #10
 80010e6:	2308      	moveq	r3, #8
 80010e8:	2100      	movs	r1, #0
 80010ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80010ee:	6866      	ldr	r6, [r4, #4]
 80010f0:	60a6      	str	r6, [r4, #8]
 80010f2:	2e00      	cmp	r6, #0
 80010f4:	bfa2      	ittt	ge
 80010f6:	6821      	ldrge	r1, [r4, #0]
 80010f8:	f021 0104 	bicge.w	r1, r1, #4
 80010fc:	6021      	strge	r1, [r4, #0]
 80010fe:	b90d      	cbnz	r5, 8001104 <_printf_i+0x110>
 8001100:	2e00      	cmp	r6, #0
 8001102:	d04b      	beq.n	800119c <_printf_i+0x1a8>
 8001104:	4616      	mov	r6, r2
 8001106:	fbb5 f1f3 	udiv	r1, r5, r3
 800110a:	fb03 5711 	mls	r7, r3, r1, r5
 800110e:	5dc7      	ldrb	r7, [r0, r7]
 8001110:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001114:	462f      	mov	r7, r5
 8001116:	42bb      	cmp	r3, r7
 8001118:	460d      	mov	r5, r1
 800111a:	d9f4      	bls.n	8001106 <_printf_i+0x112>
 800111c:	2b08      	cmp	r3, #8
 800111e:	d10b      	bne.n	8001138 <_printf_i+0x144>
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	07df      	lsls	r7, r3, #31
 8001124:	d508      	bpl.n	8001138 <_printf_i+0x144>
 8001126:	6923      	ldr	r3, [r4, #16]
 8001128:	6861      	ldr	r1, [r4, #4]
 800112a:	4299      	cmp	r1, r3
 800112c:	bfde      	ittt	le
 800112e:	2330      	movle	r3, #48	@ 0x30
 8001130:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001134:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001138:	1b92      	subs	r2, r2, r6
 800113a:	6122      	str	r2, [r4, #16]
 800113c:	f8cd a000 	str.w	sl, [sp]
 8001140:	464b      	mov	r3, r9
 8001142:	aa03      	add	r2, sp, #12
 8001144:	4621      	mov	r1, r4
 8001146:	4640      	mov	r0, r8
 8001148:	f7ff fee6 	bl	8000f18 <_printf_common>
 800114c:	3001      	adds	r0, #1
 800114e:	d14a      	bne.n	80011e6 <_printf_i+0x1f2>
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	b004      	add	sp, #16
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	f043 0320 	orr.w	r3, r3, #32
 8001160:	6023      	str	r3, [r4, #0]
 8001162:	4833      	ldr	r0, [pc, #204]	@ (8001230 <_printf_i+0x23c>)
 8001164:	2778      	movs	r7, #120	@ 0x78
 8001166:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	6831      	ldr	r1, [r6, #0]
 800116e:	061f      	lsls	r7, r3, #24
 8001170:	f851 5b04 	ldr.w	r5, [r1], #4
 8001174:	d402      	bmi.n	800117c <_printf_i+0x188>
 8001176:	065f      	lsls	r7, r3, #25
 8001178:	bf48      	it	mi
 800117a:	b2ad      	uxthmi	r5, r5
 800117c:	6031      	str	r1, [r6, #0]
 800117e:	07d9      	lsls	r1, r3, #31
 8001180:	bf44      	itt	mi
 8001182:	f043 0320 	orrmi.w	r3, r3, #32
 8001186:	6023      	strmi	r3, [r4, #0]
 8001188:	b11d      	cbz	r5, 8001192 <_printf_i+0x19e>
 800118a:	2310      	movs	r3, #16
 800118c:	e7ac      	b.n	80010e8 <_printf_i+0xf4>
 800118e:	4827      	ldr	r0, [pc, #156]	@ (800122c <_printf_i+0x238>)
 8001190:	e7e9      	b.n	8001166 <_printf_i+0x172>
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	f023 0320 	bic.w	r3, r3, #32
 8001198:	6023      	str	r3, [r4, #0]
 800119a:	e7f6      	b.n	800118a <_printf_i+0x196>
 800119c:	4616      	mov	r6, r2
 800119e:	e7bd      	b.n	800111c <_printf_i+0x128>
 80011a0:	6833      	ldr	r3, [r6, #0]
 80011a2:	6825      	ldr	r5, [r4, #0]
 80011a4:	6961      	ldr	r1, [r4, #20]
 80011a6:	1d18      	adds	r0, r3, #4
 80011a8:	6030      	str	r0, [r6, #0]
 80011aa:	062e      	lsls	r6, r5, #24
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	d501      	bpl.n	80011b4 <_printf_i+0x1c0>
 80011b0:	6019      	str	r1, [r3, #0]
 80011b2:	e002      	b.n	80011ba <_printf_i+0x1c6>
 80011b4:	0668      	lsls	r0, r5, #25
 80011b6:	d5fb      	bpl.n	80011b0 <_printf_i+0x1bc>
 80011b8:	8019      	strh	r1, [r3, #0]
 80011ba:	2300      	movs	r3, #0
 80011bc:	6123      	str	r3, [r4, #16]
 80011be:	4616      	mov	r6, r2
 80011c0:	e7bc      	b.n	800113c <_printf_i+0x148>
 80011c2:	6833      	ldr	r3, [r6, #0]
 80011c4:	1d1a      	adds	r2, r3, #4
 80011c6:	6032      	str	r2, [r6, #0]
 80011c8:	681e      	ldr	r6, [r3, #0]
 80011ca:	6862      	ldr	r2, [r4, #4]
 80011cc:	2100      	movs	r1, #0
 80011ce:	4630      	mov	r0, r6
 80011d0:	f7ff f81e 	bl	8000210 <memchr>
 80011d4:	b108      	cbz	r0, 80011da <_printf_i+0x1e6>
 80011d6:	1b80      	subs	r0, r0, r6
 80011d8:	6060      	str	r0, [r4, #4]
 80011da:	6863      	ldr	r3, [r4, #4]
 80011dc:	6123      	str	r3, [r4, #16]
 80011de:	2300      	movs	r3, #0
 80011e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80011e4:	e7aa      	b.n	800113c <_printf_i+0x148>
 80011e6:	6923      	ldr	r3, [r4, #16]
 80011e8:	4632      	mov	r2, r6
 80011ea:	4649      	mov	r1, r9
 80011ec:	4640      	mov	r0, r8
 80011ee:	47d0      	blx	sl
 80011f0:	3001      	adds	r0, #1
 80011f2:	d0ad      	beq.n	8001150 <_printf_i+0x15c>
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	079b      	lsls	r3, r3, #30
 80011f8:	d413      	bmi.n	8001222 <_printf_i+0x22e>
 80011fa:	68e0      	ldr	r0, [r4, #12]
 80011fc:	9b03      	ldr	r3, [sp, #12]
 80011fe:	4298      	cmp	r0, r3
 8001200:	bfb8      	it	lt
 8001202:	4618      	movlt	r0, r3
 8001204:	e7a6      	b.n	8001154 <_printf_i+0x160>
 8001206:	2301      	movs	r3, #1
 8001208:	4632      	mov	r2, r6
 800120a:	4649      	mov	r1, r9
 800120c:	4640      	mov	r0, r8
 800120e:	47d0      	blx	sl
 8001210:	3001      	adds	r0, #1
 8001212:	d09d      	beq.n	8001150 <_printf_i+0x15c>
 8001214:	3501      	adds	r5, #1
 8001216:	68e3      	ldr	r3, [r4, #12]
 8001218:	9903      	ldr	r1, [sp, #12]
 800121a:	1a5b      	subs	r3, r3, r1
 800121c:	42ab      	cmp	r3, r5
 800121e:	dcf2      	bgt.n	8001206 <_printf_i+0x212>
 8001220:	e7eb      	b.n	80011fa <_printf_i+0x206>
 8001222:	2500      	movs	r5, #0
 8001224:	f104 0619 	add.w	r6, r4, #25
 8001228:	e7f5      	b.n	8001216 <_printf_i+0x222>
 800122a:	bf00      	nop
 800122c:	08001621 	.word	0x08001621
 8001230:	08001632 	.word	0x08001632

08001234 <memmove>:
 8001234:	4288      	cmp	r0, r1
 8001236:	b510      	push	{r4, lr}
 8001238:	eb01 0402 	add.w	r4, r1, r2
 800123c:	d902      	bls.n	8001244 <memmove+0x10>
 800123e:	4284      	cmp	r4, r0
 8001240:	4623      	mov	r3, r4
 8001242:	d807      	bhi.n	8001254 <memmove+0x20>
 8001244:	1e43      	subs	r3, r0, #1
 8001246:	42a1      	cmp	r1, r4
 8001248:	d008      	beq.n	800125c <memmove+0x28>
 800124a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800124e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001252:	e7f8      	b.n	8001246 <memmove+0x12>
 8001254:	4402      	add	r2, r0
 8001256:	4601      	mov	r1, r0
 8001258:	428a      	cmp	r2, r1
 800125a:	d100      	bne.n	800125e <memmove+0x2a>
 800125c:	bd10      	pop	{r4, pc}
 800125e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001266:	e7f7      	b.n	8001258 <memmove+0x24>

08001268 <_sbrk_r>:
 8001268:	b538      	push	{r3, r4, r5, lr}
 800126a:	4d06      	ldr	r5, [pc, #24]	@ (8001284 <_sbrk_r+0x1c>)
 800126c:	2300      	movs	r3, #0
 800126e:	4604      	mov	r4, r0
 8001270:	4608      	mov	r0, r1
 8001272:	602b      	str	r3, [r5, #0]
 8001274:	f7ff faac 	bl	80007d0 <_sbrk>
 8001278:	1c43      	adds	r3, r0, #1
 800127a:	d102      	bne.n	8001282 <_sbrk_r+0x1a>
 800127c:	682b      	ldr	r3, [r5, #0]
 800127e:	b103      	cbz	r3, 8001282 <_sbrk_r+0x1a>
 8001280:	6023      	str	r3, [r4, #0]
 8001282:	bd38      	pop	{r3, r4, r5, pc}
 8001284:	200001a8 	.word	0x200001a8

08001288 <memcpy>:
 8001288:	440a      	add	r2, r1
 800128a:	4291      	cmp	r1, r2
 800128c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001290:	d100      	bne.n	8001294 <memcpy+0xc>
 8001292:	4770      	bx	lr
 8001294:	b510      	push	{r4, lr}
 8001296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800129a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800129e:	4291      	cmp	r1, r2
 80012a0:	d1f9      	bne.n	8001296 <memcpy+0xe>
 80012a2:	bd10      	pop	{r4, pc}

080012a4 <_realloc_r>:
 80012a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012a8:	4680      	mov	r8, r0
 80012aa:	4615      	mov	r5, r2
 80012ac:	460c      	mov	r4, r1
 80012ae:	b921      	cbnz	r1, 80012ba <_realloc_r+0x16>
 80012b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012b4:	4611      	mov	r1, r2
 80012b6:	f7ff bc4b 	b.w	8000b50 <_malloc_r>
 80012ba:	b92a      	cbnz	r2, 80012c8 <_realloc_r+0x24>
 80012bc:	f7ff fbdc 	bl	8000a78 <_free_r>
 80012c0:	2400      	movs	r4, #0
 80012c2:	4620      	mov	r0, r4
 80012c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012c8:	f000 f81a 	bl	8001300 <_malloc_usable_size_r>
 80012cc:	4285      	cmp	r5, r0
 80012ce:	4606      	mov	r6, r0
 80012d0:	d802      	bhi.n	80012d8 <_realloc_r+0x34>
 80012d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80012d6:	d8f4      	bhi.n	80012c2 <_realloc_r+0x1e>
 80012d8:	4629      	mov	r1, r5
 80012da:	4640      	mov	r0, r8
 80012dc:	f7ff fc38 	bl	8000b50 <_malloc_r>
 80012e0:	4607      	mov	r7, r0
 80012e2:	2800      	cmp	r0, #0
 80012e4:	d0ec      	beq.n	80012c0 <_realloc_r+0x1c>
 80012e6:	42b5      	cmp	r5, r6
 80012e8:	462a      	mov	r2, r5
 80012ea:	4621      	mov	r1, r4
 80012ec:	bf28      	it	cs
 80012ee:	4632      	movcs	r2, r6
 80012f0:	f7ff ffca 	bl	8001288 <memcpy>
 80012f4:	4621      	mov	r1, r4
 80012f6:	4640      	mov	r0, r8
 80012f8:	f7ff fbbe 	bl	8000a78 <_free_r>
 80012fc:	463c      	mov	r4, r7
 80012fe:	e7e0      	b.n	80012c2 <_realloc_r+0x1e>

08001300 <_malloc_usable_size_r>:
 8001300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001304:	1f18      	subs	r0, r3, #4
 8001306:	2b00      	cmp	r3, #0
 8001308:	bfbc      	itt	lt
 800130a:	580b      	ldrlt	r3, [r1, r0]
 800130c:	18c0      	addlt	r0, r0, r3
 800130e:	4770      	bx	lr

08001310 <_init>:
 8001310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001312:	bf00      	nop
 8001314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001316:	bc08      	pop	{r3}
 8001318:	469e      	mov	lr, r3
 800131a:	4770      	bx	lr

0800131c <_fini>:
 800131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800131e:	bf00      	nop
 8001320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001322:	bc08      	pop	{r3}
 8001324:	469e      	mov	lr, r3
 8001326:	4770      	bx	lr
